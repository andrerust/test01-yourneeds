<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.root_dir">/programming/prod-yourneeds/src</parameter>
    <parameter key="kernel.project_dir">/programming/prod-yourneeds</parameter>
    <parameter key="kernel.environment">dev</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.name">src</parameter>
    <parameter key="kernel.cache_dir">/programming/prod-yourneeds/var/cache/dev</parameter>
    <parameter key="kernel.logs_dir">/programming/prod-yourneeds/var/log</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="DoctrineCacheBundle">Doctrine\Bundle\DoctrineCacheBundle\DoctrineCacheBundle</parameter>
      <parameter key="DoctrineBundle">Doctrine\Bundle\DoctrineBundle\DoctrineBundle</parameter>
      <parameter key="DoctrineMigrationsBundle">Doctrine\Bundle\MigrationsBundle\DoctrineMigrationsBundle</parameter>
      <parameter key="JMSSerializerBundle">JMS\SerializerBundle\JMSSerializerBundle</parameter>
      <parameter key="KnpSnappyBundle">Knp\Bundle\SnappyBundle\KnpSnappyBundle</parameter>
      <parameter key="SensioFrameworkExtraBundle">Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle</parameter>
      <parameter key="StofDoctrineExtensionsBundle">Stof\DoctrineExtensionsBundle\StofDoctrineExtensionsBundle</parameter>
      <parameter key="MonologBundle">Symfony\Bundle\MonologBundle\MonologBundle</parameter>
      <parameter key="SwiftmailerBundle">Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle</parameter>
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="TwigBundle">Symfony\Bundle\TwigBundle\TwigBundle</parameter>
      <parameter key="SecurityBundle">Symfony\Bundle\SecurityBundle\SecurityBundle</parameter>
      <parameter key="AppBundle">AppBundle\AppBundle</parameter>
      <parameter key="MainUserBundle">Main\UserBundle\MainUserBundle</parameter>
      <parameter key="MainInsuranceBundle">Main\InsuranceBundle\MainInsuranceBundle</parameter>
      <parameter key="MainAdminBundle">Main\AdminBundle\MainAdminBundle</parameter>
      <parameter key="KnpMarkdownBundle">Knp\Bundle\MarkdownBundle\KnpMarkdownBundle</parameter>
      <parameter key="WebpackEncoreBundle">Symfony\WebpackEncoreBundle\WebpackEncoreBundle</parameter>
    </parameter>
    <parameter key="kernel.bundles_metadata" type="collection">
      <parameter key="DoctrineCacheBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/doctrine/doctrine-cache-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\DoctrineCacheBundle</parameter>
      </parameter>
      <parameter key="DoctrineBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/doctrine/doctrine-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\DoctrineBundle</parameter>
      </parameter>
      <parameter key="DoctrineMigrationsBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/doctrine/doctrine-migrations-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\MigrationsBundle</parameter>
      </parameter>
      <parameter key="JMSSerializerBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/jms/serializer-bundle</parameter>
        <parameter key="namespace">JMS\SerializerBundle</parameter>
      </parameter>
      <parameter key="KnpSnappyBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/knplabs/knp-snappy-bundle</parameter>
        <parameter key="namespace">Knp\Bundle\SnappyBundle</parameter>
      </parameter>
      <parameter key="SensioFrameworkExtraBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/sensio/framework-extra-bundle</parameter>
        <parameter key="namespace">Sensio\Bundle\FrameworkExtraBundle</parameter>
      </parameter>
      <parameter key="StofDoctrineExtensionsBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/stof/doctrine-extensions-bundle</parameter>
        <parameter key="namespace">Stof\DoctrineExtensionsBundle</parameter>
      </parameter>
      <parameter key="MonologBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/symfony/monolog-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\MonologBundle</parameter>
      </parameter>
      <parameter key="SwiftmailerBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/symfony/swiftmailer-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\SwiftmailerBundle</parameter>
      </parameter>
      <parameter key="FrameworkBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/symfony/framework-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\FrameworkBundle</parameter>
      </parameter>
      <parameter key="TwigBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/symfony/twig-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\TwigBundle</parameter>
      </parameter>
      <parameter key="SecurityBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/symfony/security-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\SecurityBundle</parameter>
      </parameter>
      <parameter key="AppBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/src/AppBundle</parameter>
        <parameter key="namespace">AppBundle</parameter>
      </parameter>
      <parameter key="MainUserBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/src/Main/UserBundle</parameter>
        <parameter key="namespace">Main\UserBundle</parameter>
      </parameter>
      <parameter key="MainInsuranceBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/src/Main/InsuranceBundle</parameter>
        <parameter key="namespace">Main\InsuranceBundle</parameter>
      </parameter>
      <parameter key="MainAdminBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/src/Main/AdminBundle</parameter>
        <parameter key="namespace">Main\AdminBundle</parameter>
      </parameter>
      <parameter key="KnpMarkdownBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/knplabs/knp-markdown-bundle</parameter>
        <parameter key="namespace">Knp\Bundle\MarkdownBundle</parameter>
      </parameter>
      <parameter key="WebpackEncoreBundle" type="collection">
        <parameter key="path">/programming/prod-yourneeds/vendor/symfony/webpack-encore-bundle/src</parameter>
        <parameter key="namespace">Symfony\WebpackEncoreBundle</parameter>
      </parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">srcApp_KernelDevDebugContainer</parameter>
    <parameter key="container.autowiring.strict_mode">true</parameter>
    <parameter key="container.dumper.inline_class_loader">true</parameter>
    <parameter key="env(DATABASE_URL)"></parameter>
    <parameter key="cache_type">array</parameter>
    <parameter key="locale">de</parameter>
    <parameter key="upload_profiles">/programming/prod-yourneeds/src/../public/uploads/profiles</parameter>
    <parameter key="upload_logos">/programming/prod-yourneeds/src/../public/uploads/logos</parameter>
    <parameter key="upload_image">/programming/prod-yourneeds/src/../_uploads</parameter>
    <parameter key="jms_serializer.camel_case_naming_strategy.class">JMS\Serializer\Naming\IdenticalPropertyNamingStrategy</parameter>
    <parameter key="doctrine_cache.apc.class">Doctrine\Common\Cache\ApcCache</parameter>
    <parameter key="doctrine_cache.apcu.class">Doctrine\Common\Cache\ApcuCache</parameter>
    <parameter key="doctrine_cache.array.class">Doctrine\Common\Cache\ArrayCache</parameter>
    <parameter key="doctrine_cache.chain.class">Doctrine\Common\Cache\ChainCache</parameter>
    <parameter key="doctrine_cache.couchbase.class">Doctrine\Common\Cache\CouchbaseCache</parameter>
    <parameter key="doctrine_cache.couchbase.connection.class">Couchbase</parameter>
    <parameter key="doctrine_cache.couchbase.hostnames">localhost:8091</parameter>
    <parameter key="doctrine_cache.file_system.class">Doctrine\Common\Cache\FilesystemCache</parameter>
    <parameter key="doctrine_cache.php_file.class">Doctrine\Common\Cache\PhpFileCache</parameter>
    <parameter key="doctrine_cache.memcache.class">Doctrine\Common\Cache\MemcacheCache</parameter>
    <parameter key="doctrine_cache.memcache.connection.class">Memcache</parameter>
    <parameter key="doctrine_cache.memcache.host">localhost</parameter>
    <parameter key="doctrine_cache.memcache.port">11211</parameter>
    <parameter key="doctrine_cache.memcached.class">Doctrine\Common\Cache\MemcachedCache</parameter>
    <parameter key="doctrine_cache.memcached.connection.class">Memcached</parameter>
    <parameter key="doctrine_cache.memcached.host">localhost</parameter>
    <parameter key="doctrine_cache.memcached.port">11211</parameter>
    <parameter key="doctrine_cache.mongodb.class">Doctrine\Common\Cache\MongoDBCache</parameter>
    <parameter key="doctrine_cache.mongodb.collection.class">MongoCollection</parameter>
    <parameter key="doctrine_cache.mongodb.connection.class">MongoClient</parameter>
    <parameter key="doctrine_cache.mongodb.server">localhost:27017</parameter>
    <parameter key="doctrine_cache.predis.client.class">Predis\Client</parameter>
    <parameter key="doctrine_cache.predis.scheme">tcp</parameter>
    <parameter key="doctrine_cache.predis.host">localhost</parameter>
    <parameter key="doctrine_cache.predis.port">6379</parameter>
    <parameter key="doctrine_cache.redis.class">Doctrine\Common\Cache\RedisCache</parameter>
    <parameter key="doctrine_cache.redis.connection.class">Redis</parameter>
    <parameter key="doctrine_cache.redis.host">localhost</parameter>
    <parameter key="doctrine_cache.redis.port">6379</parameter>
    <parameter key="doctrine_cache.riak.class">Doctrine\Common\Cache\RiakCache</parameter>
    <parameter key="doctrine_cache.riak.bucket.class">Riak\Bucket</parameter>
    <parameter key="doctrine_cache.riak.connection.class">Riak\Connection</parameter>
    <parameter key="doctrine_cache.riak.bucket_property_list.class">Riak\BucketPropertyList</parameter>
    <parameter key="doctrine_cache.riak.host">localhost</parameter>
    <parameter key="doctrine_cache.riak.port">8087</parameter>
    <parameter key="doctrine_cache.sqlite3.class">Doctrine\Common\Cache\SQLite3Cache</parameter>
    <parameter key="doctrine_cache.sqlite3.connection.class">SQLite3</parameter>
    <parameter key="doctrine_cache.void.class">Doctrine\Common\Cache\VoidCache</parameter>
    <parameter key="doctrine_cache.wincache.class">Doctrine\Common\Cache\WinCacheCache</parameter>
    <parameter key="doctrine_cache.xcache.class">Doctrine\Common\Cache\XcacheCache</parameter>
    <parameter key="doctrine_cache.zenddata.class">Doctrine\Common\Cache\ZendDataCache</parameter>
    <parameter key="doctrine_cache.security.acl.cache.class">Doctrine\Bundle\DoctrineCacheBundle\Acl\Model\AclCache</parameter>
    <parameter key="doctrine.dbal.logger.chain.class">Doctrine\DBAL\Logging\LoggerChain</parameter>
    <parameter key="doctrine.dbal.logger.profiling.class">Doctrine\DBAL\Logging\DebugStack</parameter>
    <parameter key="doctrine.dbal.logger.class">Symfony\Bridge\Doctrine\Logger\DbalLogger</parameter>
    <parameter key="doctrine.dbal.configuration.class">Doctrine\DBAL\Configuration</parameter>
    <parameter key="doctrine.data_collector.class">Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector</parameter>
    <parameter key="doctrine.dbal.connection.event_manager.class">Symfony\Bridge\Doctrine\ContainerAwareEventManager</parameter>
    <parameter key="doctrine.dbal.connection_factory.class">Doctrine\Bundle\DoctrineBundle\ConnectionFactory</parameter>
    <parameter key="doctrine.dbal.events.mysql_session_init.class">Doctrine\DBAL\Event\Listeners\MysqlSessionInit</parameter>
    <parameter key="doctrine.dbal.events.oracle_session_init.class">Doctrine\DBAL\Event\Listeners\OracleSessionInit</parameter>
    <parameter key="doctrine.class">Doctrine\Bundle\DoctrineBundle\Registry</parameter>
    <parameter key="doctrine.entity_managers" type="collection">
      <parameter key="default">doctrine.orm.default_entity_manager</parameter>
    </parameter>
    <parameter key="doctrine.default_entity_manager">default</parameter>
    <parameter key="doctrine.dbal.connection_factory.types" type="collection"/>
    <parameter key="doctrine.connections" type="collection">
      <parameter key="default">doctrine.dbal.default_connection</parameter>
    </parameter>
    <parameter key="doctrine.default_connection">default</parameter>
    <parameter key="doctrine.orm.configuration.class">Doctrine\ORM\Configuration</parameter>
    <parameter key="doctrine.orm.entity_manager.class">Doctrine\ORM\EntityManager</parameter>
    <parameter key="doctrine.orm.manager_configurator.class">Doctrine\Bundle\DoctrineBundle\ManagerConfigurator</parameter>
    <parameter key="doctrine.orm.cache.array.class">Doctrine\Common\Cache\ArrayCache</parameter>
    <parameter key="doctrine.orm.cache.apc.class">Doctrine\Common\Cache\ApcCache</parameter>
    <parameter key="doctrine.orm.cache.memcache.class">Doctrine\Common\Cache\MemcacheCache</parameter>
    <parameter key="doctrine.orm.cache.memcache_host">localhost</parameter>
    <parameter key="doctrine.orm.cache.memcache_port">11211</parameter>
    <parameter key="doctrine.orm.cache.memcache_instance.class">Memcache</parameter>
    <parameter key="doctrine.orm.cache.memcached.class">Doctrine\Common\Cache\MemcachedCache</parameter>
    <parameter key="doctrine.orm.cache.memcached_host">localhost</parameter>
    <parameter key="doctrine.orm.cache.memcached_port">11211</parameter>
    <parameter key="doctrine.orm.cache.memcached_instance.class">Memcached</parameter>
    <parameter key="doctrine.orm.cache.redis.class">Doctrine\Common\Cache\RedisCache</parameter>
    <parameter key="doctrine.orm.cache.redis_host">localhost</parameter>
    <parameter key="doctrine.orm.cache.redis_port">6379</parameter>
    <parameter key="doctrine.orm.cache.redis_instance.class">Redis</parameter>
    <parameter key="doctrine.orm.cache.xcache.class">Doctrine\Common\Cache\XcacheCache</parameter>
    <parameter key="doctrine.orm.cache.wincache.class">Doctrine\Common\Cache\WinCacheCache</parameter>
    <parameter key="doctrine.orm.cache.zenddata.class">Doctrine\Common\Cache\ZendDataCache</parameter>
    <parameter key="doctrine.orm.metadata.driver_chain.class">Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain</parameter>
    <parameter key="doctrine.orm.metadata.annotation.class">Doctrine\ORM\Mapping\Driver\AnnotationDriver</parameter>
    <parameter key="doctrine.orm.metadata.xml.class">Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver</parameter>
    <parameter key="doctrine.orm.metadata.yml.class">Doctrine\ORM\Mapping\Driver\SimplifiedYamlDriver</parameter>
    <parameter key="doctrine.orm.metadata.php.class">Doctrine\ORM\Mapping\Driver\PHPDriver</parameter>
    <parameter key="doctrine.orm.metadata.staticphp.class">Doctrine\ORM\Mapping\Driver\StaticPHPDriver</parameter>
    <parameter key="doctrine.orm.proxy_cache_warmer.class">Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer</parameter>
    <parameter key="form.type_guesser.doctrine.class">Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser</parameter>
    <parameter key="doctrine.orm.validator.unique.class">Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator</parameter>
    <parameter key="doctrine.orm.validator_initializer.class">Symfony\Bridge\Doctrine\Validator\DoctrineInitializer</parameter>
    <parameter key="doctrine.orm.security.user.provider.class">Symfony\Bridge\Doctrine\Security\User\EntityUserProvider</parameter>
    <parameter key="doctrine.orm.listeners.resolve_target_entity.class">Doctrine\ORM\Tools\ResolveTargetEntityListener</parameter>
    <parameter key="doctrine.orm.listeners.attach_entity_listeners.class">Doctrine\ORM\Tools\AttachEntityListenersListener</parameter>
    <parameter key="doctrine.orm.naming_strategy.default.class">Doctrine\ORM\Mapping\DefaultNamingStrategy</parameter>
    <parameter key="doctrine.orm.naming_strategy.underscore.class">Doctrine\ORM\Mapping\UnderscoreNamingStrategy</parameter>
    <parameter key="doctrine.orm.quote_strategy.default.class">Doctrine\ORM\Mapping\DefaultQuoteStrategy</parameter>
    <parameter key="doctrine.orm.quote_strategy.ansi.class">Doctrine\ORM\Mapping\AnsiQuoteStrategy</parameter>
    <parameter key="doctrine.orm.entity_listener_resolver.class">Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver</parameter>
    <parameter key="doctrine.orm.second_level_cache.default_cache_factory.class">Doctrine\ORM\Cache\DefaultCacheFactory</parameter>
    <parameter key="doctrine.orm.second_level_cache.default_region.class">Doctrine\ORM\Cache\Region\DefaultRegion</parameter>
    <parameter key="doctrine.orm.second_level_cache.filelock_region.class">Doctrine\ORM\Cache\Region\FileLockRegion</parameter>
    <parameter key="doctrine.orm.second_level_cache.logger_chain.class">Doctrine\ORM\Cache\Logging\CacheLoggerChain</parameter>
    <parameter key="doctrine.orm.second_level_cache.logger_statistics.class">Doctrine\ORM\Cache\Logging\StatisticsCacheLogger</parameter>
    <parameter key="doctrine.orm.second_level_cache.cache_configuration.class">Doctrine\ORM\Cache\CacheConfiguration</parameter>
    <parameter key="doctrine.orm.second_level_cache.regions_configuration.class">Doctrine\ORM\Cache\RegionsConfiguration</parameter>
    <parameter key="doctrine.orm.auto_generate_proxy_classes">true</parameter>
    <parameter key="doctrine.orm.proxy_dir">/programming/prod-yourneeds/var/cache/dev/doctrine/orm/Proxies</parameter>
    <parameter key="doctrine.orm.proxy_namespace">Proxies</parameter>
    <parameter key="doctrine_migrations.dir_name">/programming/prod-yourneeds/src/Migrations</parameter>
    <parameter key="doctrine_migrations.namespace">Application\Migrations</parameter>
    <parameter key="doctrine_migrations.table_name">migration_versions</parameter>
    <parameter key="doctrine_migrations.name">Application Migrations</parameter>
    <parameter key="doctrine_migrations.custom_template">null</parameter>
    <parameter key="doctrine_migrations.organize_migrations">false</parameter>
    <parameter key="jms_serializer.metadata.file_locator.class">Metadata\Driver\FileLocator</parameter>
    <parameter key="jms_serializer.metadata.annotation_driver.class">JMS\Serializer\Metadata\Driver\AnnotationDriver</parameter>
    <parameter key="jms_serializer.metadata.chain_driver.class">Metadata\Driver\DriverChain</parameter>
    <parameter key="jms_serializer.metadata.yaml_driver.class">JMS\Serializer\Metadata\Driver\YamlDriver</parameter>
    <parameter key="jms_serializer.metadata.xml_driver.class">JMS\Serializer\Metadata\Driver\XmlDriver</parameter>
    <parameter key="jms_serializer.metadata.php_driver.class">JMS\Serializer\Metadata\Driver\PhpDriver</parameter>
    <parameter key="jms_serializer.metadata.doctrine_type_driver.class">JMS\Serializer\Metadata\Driver\DoctrineTypeDriver</parameter>
    <parameter key="jms_serializer.metadata.doctrine_phpcr_type_driver.class">JMS\Serializer\Metadata\Driver\DoctrinePHPCRTypeDriver</parameter>
    <parameter key="jms_serializer.metadata.lazy_loading_driver.class">Metadata\Driver\LazyLoadingDriver</parameter>
    <parameter key="jms_serializer.metadata.metadata_factory.class">Metadata\MetadataFactory</parameter>
    <parameter key="jms_serializer.metadata.cache.file_cache.class">Metadata\Cache\FileCache</parameter>
    <parameter key="jms_serializer.event_dispatcher.class">JMS\Serializer\EventDispatcher\LazyEventDispatcher</parameter>
    <parameter key="jms_serializer.identical_property_naming_strategy.class">JMS\Serializer\Naming\IdenticalPropertyNamingStrategy</parameter>
    <parameter key="jms_serializer.serialized_name_annotation_strategy.class">JMS\Serializer\Naming\SerializedNameAnnotationStrategy</parameter>
    <parameter key="jms_serializer.cache_naming_strategy.class">JMS\Serializer\Naming\CacheNamingStrategy</parameter>
    <parameter key="jms_serializer.doctrine_object_constructor.class">JMS\Serializer\Construction\DoctrineObjectConstructor</parameter>
    <parameter key="jms_serializer.unserialize_object_constructor.class">JMS\Serializer\Construction\UnserializeObjectConstructor</parameter>
    <parameter key="jms_serializer.version_exclusion_strategy.class">JMS\Serializer\Exclusion\VersionExclusionStrategy</parameter>
    <parameter key="jms_serializer.serializer.class">JMS\Serializer\Serializer</parameter>
    <parameter key="jms_serializer.twig_extension.class">JMS\Serializer\Twig\SerializerExtension</parameter>
    <parameter key="jms_serializer.twig_runtime_extension.class">JMS\Serializer\Twig\SerializerRuntimeExtension</parameter>
    <parameter key="jms_serializer.twig_runtime_extension_helper.class">JMS\Serializer\Twig\SerializerRuntimeHelper</parameter>
    <parameter key="jms_serializer.templating.helper.class">JMS\SerializerBundle\Templating\SerializerHelper</parameter>
    <parameter key="jms_serializer.json_serialization_visitor.class">JMS\Serializer\JsonSerializationVisitor</parameter>
    <parameter key="jms_serializer.json_serialization_visitor.options">1216</parameter>
    <parameter key="jms_serializer.json_deserialization_visitor.class">JMS\Serializer\JsonDeserializationVisitor</parameter>
    <parameter key="jms_serializer.xml_serialization_visitor.class">JMS\Serializer\XmlSerializationVisitor</parameter>
    <parameter key="jms_serializer.xml_deserialization_visitor.class">JMS\Serializer\XmlDeserializationVisitor</parameter>
    <parameter key="jms_serializer.xml_deserialization_visitor.doctype_whitelist" type="collection"/>
    <parameter key="jms_serializer.xml_serialization_visitor.format_output">true</parameter>
    <parameter key="jms_serializer.yaml_serialization_visitor.class">JMS\Serializer\YamlSerializationVisitor</parameter>
    <parameter key="jms_serializer.handler_registry.class">JMS\Serializer\Handler\LazyHandlerRegistry</parameter>
    <parameter key="jms_serializer.datetime_handler.class">JMS\Serializer\Handler\DateHandler</parameter>
    <parameter key="jms_serializer.array_collection_handler.class">JMS\Serializer\Handler\ArrayCollectionHandler</parameter>
    <parameter key="jms_serializer.php_collection_handler.class">JMS\Serializer\Handler\PhpCollectionHandler</parameter>
    <parameter key="jms_serializer.form_error_handler.class">JMS\Serializer\Handler\FormErrorHandler</parameter>
    <parameter key="jms_serializer.constraint_violation_handler.class">JMS\Serializer\Handler\ConstraintViolationHandler</parameter>
    <parameter key="jms_serializer.doctrine_proxy_subscriber.class">JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber</parameter>
    <parameter key="jms_serializer.stopwatch_subscriber.class">JMS\SerializerBundle\Serializer\StopwatchEventSubscriber</parameter>
    <parameter key="jms_serializer.configured_context_factory.class">JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory</parameter>
    <parameter key="jms_serializer.expression_evaluator.class">JMS\Serializer\Expression\ExpressionEvaluator</parameter>
    <parameter key="jms_serializer.expression_language.class">Symfony\Component\ExpressionLanguage\ExpressionLanguage</parameter>
    <parameter key="jms_serializer.expression_language.function_provider.class">JMS\SerializerBundle\ExpressionLanguage\BasicSerializerFunctionsProvider</parameter>
    <parameter key="jms_serializer.accessor_strategy.default.class">JMS\Serializer\Accessor\DefaultAccessorStrategy</parameter>
    <parameter key="jms_serializer.accessor_strategy.expression.class">JMS\Serializer\Accessor\ExpressionAccessorStrategy</parameter>
    <parameter key="jms_serializer.cache.cache_warmer.class">JMS\SerializerBundle\Cache\CacheWarmer</parameter>
    <parameter key="knp_snappy.pdf.binary">E:\\_dev\yourneeds\test-yourneeds\src\wkhtmltopdf\wkhtmltopdf.exe</parameter>
    <parameter key="knp_snappy.pdf.options" type="collection"/>
    <parameter key="knp_snappy.pdf.env" type="collection"/>
    <parameter key="knp_snappy.image.binary">%env(WKHTMLTOIMAGE_PATH)%</parameter>
    <parameter key="knp_snappy.image.options" type="collection"/>
    <parameter key="knp_snappy.image.env" type="collection"/>
    <parameter key="stof_doctrine_extensions.listener.sluggable.class">Gedmo\Sluggable\SluggableListener</parameter>
    <parameter key="stof_doctrine_extensions.default_locale">en_US</parameter>
    <parameter key="stof_doctrine_extensions.translation_fallback">false</parameter>
    <parameter key="stof_doctrine_extensions.persist_default_translation">false</parameter>
    <parameter key="stof_doctrine_extensions.skip_translation_on_load">false</parameter>
    <parameter key="stof_doctrine_extensions.listener.translatable.class">Gedmo\Translatable\TranslatableListener</parameter>
    <parameter key="stof_doctrine_extensions.listener.timestampable.class">Gedmo\Timestampable\TimestampableListener</parameter>
    <parameter key="stof_doctrine_extensions.listener.blameable.class">Gedmo\Blameable\BlameableListener</parameter>
    <parameter key="stof_doctrine_extensions.listener.tree.class">Gedmo\Tree\TreeListener</parameter>
    <parameter key="stof_doctrine_extensions.listener.loggable.class">Gedmo\Loggable\LoggableListener</parameter>
    <parameter key="stof_doctrine_extensions.listener.sortable.class">Gedmo\Sortable\SortableListener</parameter>
    <parameter key="stof_doctrine_extensions.listener.softdeleteable.class">Gedmo\SoftDeleteable\SoftDeleteableListener</parameter>
    <parameter key="stof_doctrine_extensions.listener.uploadable.class">Gedmo\Uploadable\UploadableListener</parameter>
    <parameter key="stof_doctrine_extensions.listener.reference_integrity.class">Gedmo\ReferenceIntegrity\ReferenceIntegrityListener</parameter>
    <parameter key="monolog.use_microseconds">true</parameter>
    <parameter key="monolog.swift_mailer.handlers" type="collection"/>
    <parameter key="monolog.handlers_to_channels" type="collection">
      <parameter key="monolog.handler.console" type="collection">
        <parameter key="type">exclusive</parameter>
        <parameter key="elements" type="collection">
          <parameter>event</parameter>
          <parameter>doctrine</parameter>
          <parameter>console</parameter>
        </parameter>
      </parameter>
      <parameter key="monolog.handler.main" type="collection">
        <parameter key="type">exclusive</parameter>
        <parameter key="elements" type="collection">
          <parameter>event</parameter>
        </parameter>
      </parameter>
      <parameter key="monolog.handler.my_logger" type="collection">
        <parameter key="type">inclusive</parameter>
        <parameter key="elements" type="collection">
          <parameter>app</parameter>
        </parameter>
      </parameter>
    </parameter>
    <parameter key="swiftmailer.mailer.default.transport.name">dynamic</parameter>
    <parameter key="swiftmailer.spool.default.memory.path">/programming/prod-yourneeds/var/cache/dev/swiftmailer/spool/default</parameter>
    <parameter key="swiftmailer.mailer.default.spool.enabled">true</parameter>
    <parameter key="swiftmailer.mailer.default.plugin.impersonate">null</parameter>
    <parameter key="swiftmailer.mailer.default.single_address">null</parameter>
    <parameter key="swiftmailer.mailer.default.delivery.enabled">true</parameter>
    <parameter key="swiftmailer.spool.enabled">true</parameter>
    <parameter key="swiftmailer.delivery.enabled">true</parameter>
    <parameter key="swiftmailer.single_address">null</parameter>
    <parameter key="swiftmailer.mailers" type="collection">
      <parameter key="default">swiftmailer.mailer.default</parameter>
    </parameter>
    <parameter key="swiftmailer.default_mailer">default</parameter>
    <parameter key="fragment.renderer.hinclude.global_template"></parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="kernel.secret">%env(APP_SECRET)%</parameter>
    <parameter key="kernel.http_method_override">true</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.default_locale">de</parameter>
    <parameter key="templating.helper.code.file_link_format">null</parameter>
    <parameter key="debug.file_link_format">null</parameter>
    <parameter key="test.client.parameters" type="collection"/>
    <parameter key="session.metadata.storage_key">_sf2_meta</parameter>
    <parameter key="session.storage.options" type="collection">
      <parameter key="cache_limiter">0</parameter>
      <parameter key="cookie_httponly">true</parameter>
      <parameter key="gc_probability">1</parameter>
    </parameter>
    <parameter key="session.save_path">/programming/prod-yourneeds/var/cache/dev/sessions</parameter>
    <parameter key="session.metadata.update_threshold">0</parameter>
    <parameter key="form.type_extension.csrf.enabled">true</parameter>
    <parameter key="form.type_extension.csrf.field_name">_token</parameter>
    <parameter key="asset.request_context.base_path"></parameter>
    <parameter key="asset.request_context.secure">false</parameter>
    <parameter key="validator.mapping.cache.prefix"></parameter>
    <parameter key="validator.mapping.cache.file">/programming/prod-yourneeds/var/cache/dev/validation.php</parameter>
    <parameter key="validator.translation_domain">validators</parameter>
    <parameter key="translator.logging">false</parameter>
    <parameter key="translator.default_path">/programming/prod-yourneeds/translations</parameter>
    <parameter key="data_collector.templates" type="collection"/>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.container.dump">/programming/prod-yourneeds/var/cache/dev/srcApp_KernelDevDebugContainer.xml</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">kernel::loadRoutes</parameter>
    <parameter key="router.cache_class_prefix">srcApp_KernelDevDebugContainer</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="twig.exception_listener.controller">twig.controller.exception::showAction</parameter>
    <parameter key="twig.form.resources" type="collection">
      <parameter>form_div_layout.html.twig</parameter>
    </parameter>
    <parameter key="twig.default_path">/programming/prod-yourneeds/templates</parameter>
    <parameter key="security.authentication.trust_resolver.anonymous_class">null</parameter>
    <parameter key="security.authentication.trust_resolver.rememberme_class">null</parameter>
    <parameter key="security.role_hierarchy.roles" type="collection">
      <parameter key="ROLE_SUPERADMIN" type="collection">
        <parameter>ROLE_ADMIN</parameter>
      </parameter>
      <parameter key="ROLE_ADMIN" type="collection">
        <parameter>ROLE_USER</parameter>
        <parameter>ROLE_USER_ACTIVE</parameter>
      </parameter>
      <parameter key="ROLE_USER_ACTIVE" type="collection">
        <parameter>ROLE_USER</parameter>
      </parameter>
    </parameter>
    <parameter key="security.access.denied_url">/</parameter>
    <parameter key="security.authentication.manager.erase_credentials">true</parameter>
    <parameter key="security.authentication.session_strategy.strategy">migrate</parameter>
    <parameter key="security.access.always_authenticate_before_granting">false</parameter>
    <parameter key="security.authentication.hide_user_not_found">true</parameter>
    <parameter key="console.command.ids" type="collection">
      <parameter>console.command.public_alias.doctrine_cache.contains_command</parameter>
      <parameter>console.command.public_alias.doctrine_cache.delete_command</parameter>
      <parameter>console.command.public_alias.doctrine_cache.flush_command</parameter>
      <parameter>console.command.public_alias.doctrine_cache.stats_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.diff_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.execute_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.generate_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.latest_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.migrate_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.status_command</parameter>
      <parameter>console.command.public_alias.doctrine_migrations.version_command</parameter>
    </parameter>
  </parameters>
  <services>
    <service id="service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="AppBundle\AppBundle" class="AppBundle\AppBundle" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="AppBundle\Controller\AbstractARCustomController" class="AppBundle\Controller\AbstractARCustomController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="AppBundle\Controller\BaseController" class="AppBundle\Controller\BaseController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="AppBundle\Controller\DocumentController" class="AppBundle\Controller\DocumentController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="AppBundle\Controller\ExceptionController" class="AppBundle\Controller\ExceptionController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="AppBundle\Controller\HelpController" class="AppBundle\Controller\HelpController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="AppBundle\Controller\MainController" class="AppBundle\Controller\MainController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="AppBundle\Controller\MessageController" class="AppBundle\Controller\MessageController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="AppBundle\Controller\NewsController" class="AppBundle\Controller\NewsController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="AppBundle\Controller\ProjectController" class="AppBundle\Controller\ProjectController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="AppBundle\DataFixtures\ORM\LoadFixtures" class="AppBundle\DataFixtures\ORM\LoadFixtures" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.fixture.orm"/>
    </service>
    <service id="AppBundle\Form\Message\EditMessageFormType" class="AppBundle\Form\Message\EditMessageFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="AppBundle\Form\Project\EditProjectFormType" class="AppBundle\Form\Project\EditProjectFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="AppBundle\Form\Type\TagFormType" class="AppBundle\Form\Type\TagFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="AppBundle\Form\TypeExtension\HelpFormExtension" class="AppBundle\Form\TypeExtension\HelpFormExtension" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type_extension" extended_type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <tag name="form.type_extension"/>
    </service>
    <service id="AppBundle\Helper\ConstantHelper" class="AppBundle\Helper\ConstantHelper" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="AppBundle\Helper\DateHelper" class="AppBundle\Helper\DateHelper" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="AppBundle\Helper\DocumentHelper" class="AppBundle\Helper\DocumentHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="AppBundle\Repository\DocumentRepository"/>
      <argument type="service" id="AppBundle\Repository\DocumentTypeRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="AppBundle\Helper\DocumentStructureHelper" class="AppBundle\Helper\DocumentStructureHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="AppBundle\Repository\DocumentRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="AppBundle\Helper\MediaHelper" class="AppBundle\Helper\MediaHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="AppBundle\Repository\MediaRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="AppBundle\Helper\StringHelper" class="AppBundle\Helper\StringHelper" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="AppBundle\Listener\CustomExceptionListener" class="AppBundle\Listener\CustomExceptionListener" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="AppBundle\Repository\BaseRepository" class="AppBundle\Repository\BaseRepository" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="AppBundle\Repository\DocumentRepository" class="AppBundle\Repository\DocumentRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="AppBundle\Repository\DocumentTypeRepository" class="AppBundle\Repository\DocumentTypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="AppBundle\Repository\FaqQuestionRepository" class="AppBundle\Repository\FaqQuestionRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="AppBundle\Repository\MediaRepository" class="AppBundle\Repository\MediaRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="AppBundle\Repository\MediaTypeRepository" class="AppBundle\Repository\MediaTypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="AppBundle\Repository\MessageRepository" class="AppBundle\Repository\MessageRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="AppBundle\Repository\MessageTypeRepository" class="AppBundle\Repository\MessageTypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="AppBundle\Repository\ProjectRepository" class="AppBundle\Repository\ProjectRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="AppBundle\Service\UploadService" class="AppBundle\Service\UploadService" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="AppBundle\tests\Test" class="AppBundle\tests\Test" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\AdminBundle\Controller\AdminController" class="Main\AdminBundle\Controller\AdminController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\AdminBundle\Controller\Api\AddressImportController" class="Main\AdminBundle\Controller\Api\AddressImportController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\AdminBundle\Controller\Api\AnimalDogBreedImportController" class="Main\AdminBundle\Controller\Api\AnimalDogBreedImportController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\AdminBundle\Controller\Api\JobGroupImportController" class="Main\AdminBundle\Controller\Api\JobGroupImportController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\AdminBundle\Controller\Api\QuestionLoadController" class="Main\AdminBundle\Controller\Api\QuestionLoadController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\AdminBundle\DependencyInjection\Configuration" class="Main\AdminBundle\DependencyInjection\Configuration" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\AdminBundle\DependencyInjection\MainAdminExtension" class="Main\AdminBundle\DependencyInjection\MainAdminExtension" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\AdminBundle\Helper\CurlConnector" class="Main\AdminBundle\Helper\CurlConnector" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\AdminBundle\Helper\MM\AddressImportHelper" class="Main\AdminBundle\Helper\MM\AddressImportHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="Main\UserBundle\Repository\AddressRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\AdminBundle\Helper\MM\AnimalDogBreedImportHelper" class="Main\AdminBundle\Helper\MM\AnimalDogBreedImportHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="Main\AdminBundle\Repository\AnimalDogBreedRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\AdminBundle\Helper\MM\JobImportHelper" class="Main\AdminBundle\Helper\MM\JobImportHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="Main\UserBundle\Repository\JobGroupRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\AdminBundle\Helper\MM\TariffImportHelper" class="Main\AdminBundle\Helper\MM\TariffImportHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument>null</argument>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\AdminBundle\MainAdminBundle" class="Main\AdminBundle\MainAdminBundle" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\AdminBundle\Repository\AnimalDogBreedRepository" class="Main\AdminBundle\Repository\AnimalDogBreedRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\AdminBundle\Tests\Controller\DefaultControllerTest" class="Main\AdminBundle\Tests\Controller\DefaultControllerTest" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\UserBundle\Controller\Admin\AddressController" class="Main\UserBundle\Controller\Admin\AddressController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\UserBundle\Controller\Admin\AdminUserController" class="Main\UserBundle\Controller\Admin\AdminUserController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\UserBundle\Controller\Admin\BankController" class="Main\UserBundle\Controller\Admin\BankController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\UserBundle\Controller\Web\ActivityController" class="Main\UserBundle\Controller\Web\ActivityController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\UserBundle\Controller\Web\BenefitController" class="Main\UserBundle\Controller\Web\BenefitController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\UserBundle\Controller\Web\ManagerController" class="Main\UserBundle\Controller\Web\ManagerController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\UserBundle\Controller\Web\MandateController" class="Main\UserBundle\Controller\Web\MandateController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\UserBundle\Controller\Web\SecurityController" class="Main\UserBundle\Controller\Web\SecurityController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\UserBundle\DataFixtures\BasicFixtures" class="Main\UserBundle\DataFixtures\BasicFixtures" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\UserBundle\DataFixtures\UserFixtures" class="Main\UserBundle\DataFixtures\UserFixtures" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\UserBundle\DependencyInjection\Configuration" class="Main\UserBundle\DependencyInjection\Configuration" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\UserBundle\DependencyInjection\MainUserExtension" class="Main\UserBundle\DependencyInjection\MainUserExtension" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\UserBundle\Doctrine\HashPasswordListener" class="Main\UserBundle\Doctrine\HashPasswordListener" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.event_subscriber"/>
      <argument type="service" id="security.user_password_encoder.generic"/>
    </service>
    <service id="Main\UserBundle\Form\Address\Admin\EditAddressFormType" class="Main\UserBundle\Form\Address\Admin\EditAddressFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\UserBundle\Form\Address\Admin\NewAddressFormType" class="Main\UserBundle\Form\Address\Admin\NewAddressFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\UserBundle\Form\Bank\Admin\EditBankFormType" class="Main\UserBundle\Form\Bank\Admin\EditBankFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\UserBundle\Form\Bank\Admin\NewBankFormType" class="Main\UserBundle\Form\Bank\Admin\NewBankFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\UserBundle\Form\LoginForm" class="Main\UserBundle\Form\LoginForm" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\UserBundle\Form\NewsletterFormType" class="Main\UserBundle\Form\NewsletterFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\UserBundle\Form\RegistrationForm" class="Main\UserBundle\Form\RegistrationForm" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\UserBundle\Form\User\Admin\EditUserFormType" class="Main\UserBundle\Form\User\Admin\EditUserFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\UserBundle\Form\User\Admin\NewUserFormType" class="Main\UserBundle\Form\User\Admin\NewUserFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\UserBundle\Form\UserRegistrationForm" class="Main\UserBundle\Form\UserRegistrationForm" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\UserBundle\Helper\AddressHelper" class="Main\UserBundle\Helper\AddressHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="Main\UserBundle\Repository\AddressRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\UserBundle\Helper\BankAccountHelper" class="Main\UserBundle\Helper\BankAccountHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="Main\UserBundle\Repository\BankAccountRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\UserBundle\Helper\ManagerHelper" class="Main\UserBundle\Helper\ManagerHelper" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\UserBundle\MainUserBundle" class="Main\UserBundle\MainUserBundle" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\UserBundle\Repository\AchievementRepository" class="Main\UserBundle\Repository\AchievementRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\ActivityRepository" class="Main\UserBundle\Repository\ActivityRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\AddressRepository" class="Main\UserBundle\Repository\AddressRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\AddressTypeRepository" class="Main\UserBundle\Repository\AddressTypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\BankAccountRepository" class="Main\UserBundle\Repository\BankAccountRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\BenefitPartnerRepository" class="Main\UserBundle\Repository\BenefitPartnerRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\CityRepository" class="Main\UserBundle\Repository\CityRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\CountryRepository" class="Main\UserBundle\Repository\CountryRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\FamilyStatusRepository" class="Main\UserBundle\Repository\FamilyStatusRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\JobGroupRepository" class="Main\UserBundle\Repository\JobGroupRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\TitleRepository" class="Main\UserBundle\Repository\TitleRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\UserAchievementRepository" class="Main\UserBundle\Repository\UserAchievementRepository" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\UserBundle\Repository\UserActivityRepository" class="Main\UserBundle\Repository\UserActivityRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\UserMediaRepository" class="Main\UserBundle\Repository\UserMediaRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\UserProjectRepository" class="Main\UserBundle\Repository\UserProjectRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\UserRepository" class="Main\UserBundle\Repository\UserRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Repository\UserSecurityLogRepository" class="Main\UserBundle\Repository\UserSecurityLogRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\UserBundle\Security\LoginFormAuthentificator" class="Main\UserBundle\Security\LoginFormAuthentificator" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="form.factory"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="security.user_password_encoder.generic"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" class="Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\CanSendMessageVoter" class="Main\UserBundle\Security\Voter\CanSendMessageVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\ChoosePaymentVoter" class="Main\UserBundle\Security\Voter\ChoosePaymentVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\DoAdminImportVoter" class="Main\UserBundle\Security\Voter\DoAdminImportVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\DoApplicationVoter" class="Main\UserBundle\Security\Voter\DoApplicationVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\DoNewContractVoter" class="Main\UserBundle\Security\Voter\DoNewContractVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\DoUseBuilderVoter" class="Main\UserBundle\Security\Voter\DoUseBuilderVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\EditBenefitVoter" class="Main\UserBundle\Security\Voter\EditBenefitVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\SaveSurveyVoter" class="Main\UserBundle\Security\Voter\SaveSurveyVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\UseBenefitVoter" class="Main\UserBundle\Security\Voter\UseBenefitVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" class="Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\ViewDoSurveyVoter" class="Main\UserBundle\Security\Voter\ViewDoSurveyVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\ViewOwnContractsVoter" class="Main\UserBundle\Security\Voter\ViewOwnContractsVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\ViewProfileVoter" class="Main\UserBundle\Security\Voter\ViewProfileVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\Security\Voter\ViewSurveyResultVoter" class="Main\UserBundle\Security\Voter\ViewSurveyResultVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="Main\UserBundle\_bak\UserController" class="Main\UserBundle\_bak\UserController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\InsuranceBundle\Controller\Admin\AdminTariffController" class="Main\InsuranceBundle\Controller\Admin\AdminTariffController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\InsuranceBundle\Controller\Admin\CompanyController" class="Main\InsuranceBundle\Controller\Admin\CompanyController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\InsuranceBundle\Controller\Admin\SurveyController" class="Main\InsuranceBundle\Controller\Admin\SurveyController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\InsuranceBundle\Controller\Api\TariffDeliveryApiController" class="Main\InsuranceBundle\Controller\Api\TariffDeliveryApiController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\InsuranceBundle\Controller\ContractController" class="Main\InsuranceBundle\Controller\ContractController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\InsuranceBundle\Controller\DamageReportController" class="Main\InsuranceBundle\Controller\DamageReportController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\InsuranceBundle\Controller\Test\TestDamageReportController" class="Main\InsuranceBundle\Controller\Test\TestDamageReportController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\InsuranceBundle\Controller\Test\TestSurveyController" class="Main\InsuranceBundle\Controller\Test\TestSurveyController" public="true" lazy="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="Main\InsuranceBundle\DataFixtures\CompanyFixtures" class="Main\InsuranceBundle\DataFixtures\CompanyFixtures" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\DataFixtures\TariffFixtures" class="Main\InsuranceBundle\DataFixtures\TariffFixtures" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\DependencyInjection\Configuration" class="Main\InsuranceBundle\DependencyInjection\Configuration" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\DependencyInjection\MainInsuranceExtension" class="Main\InsuranceBundle\DependencyInjection\MainInsuranceExtension" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Form\Company\Admin\EditCompanyFormType" class="Main\InsuranceBundle\Form\Company\Admin\EditCompanyFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\InsuranceBundle\Form\Company\Admin\NewCompanyFormType" class="Main\InsuranceBundle\Form\Company\Admin\NewCompanyFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\InsuranceBundle\Form\Contract\EditContractFormType" class="Main\InsuranceBundle\Form\Contract\EditContractFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\InsuranceBundle\Form\Tariff\Admin\EditTariffFormType" class="Main\InsuranceBundle\Form\Tariff\Admin\EditTariffFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\InsuranceBundle\Form\Tariff\Admin\NewTariffFormType" class="Main\InsuranceBundle\Form\Tariff\Admin\NewTariffFormType" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="form.type"/>
    </service>
    <service id="Main\InsuranceBundle\Helper\Api\MM\ApiResultHelper" class="Main\InsuranceBundle\Helper\Api\MM\ApiResultHelper" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Map\AbstractApiToTariffMap" class="Main\InsuranceBundle\Helper\Api\MM\Map\AbstractApiToTariffMap" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Map\AciApiToTariffMap" class="Main\InsuranceBundle\Helper\Api\MM\Map\AciApiToTariffMap" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Map\AliApiToTariffMap" class="Main\InsuranceBundle\Helper\Api\MM\Map\AliApiToTariffMap" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Map\HciApiToTariffMap" class="Main\InsuranceBundle\Helper\Api\MM\Map\HciApiToTariffMap" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Map\LpiApiToTariffMap" class="Main\InsuranceBundle\Helper\Api\MM\Map\LpiApiToTariffMap" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Map\PliApiToTariffMap" class="Main\InsuranceBundle\Helper\Api\MM\Map\PliApiToTariffMap" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Map\RbiApiToTariffMap" class="Main\InsuranceBundle\Helper\Api\MM\Map\RbiApiToTariffMap" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Structure\AbstractApiStructure" class="Main\InsuranceBundle\Helper\Api\MM\Structure\AbstractApiStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Structure\AciApiStructure" class="Main\InsuranceBundle\Helper\Api\MM\Structure\AciApiStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Structure\AliApiStructure" class="Main\InsuranceBundle\Helper\Api\MM\Structure\AliApiStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Structure\HciApiStructure" class="Main\InsuranceBundle\Helper\Api\MM\Structure\HciApiStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Structure\LpiApiStructure" class="Main\InsuranceBundle\Helper\Api\MM\Structure\LpiApiStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Structure\PliApiStructure" class="Main\InsuranceBundle\Helper\Api\MM\Structure\PliApiStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Api\MM\Structure\RbiApiStructure" class="Main\InsuranceBundle\Helper\Api\MM\Structure\RbiApiStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Company\CompanyHelper" class="Main\InsuranceBundle\Helper\Company\CompanyHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\InsuranceBundle\Helper\Damage\AbstractDamageReportHelper" class="Main\InsuranceBundle\Helper\Damage\AbstractDamageReportHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\InsuranceBundle\Helper\Damage\AciDamageReportHelper" class="Main\InsuranceBundle\Helper\Damage\AciDamageReportHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\InsuranceBundle\Helper\Damage\AliDamageReportHelper" class="Main\InsuranceBundle\Helper\Damage\AliDamageReportHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\InsuranceBundle\Helper\Damage\HciDamageReportHelper" class="Main\InsuranceBundle\Helper\Damage\HciDamageReportHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\InsuranceBundle\Helper\Damage\LpiDamageReportHelper" class="Main\InsuranceBundle\Helper\Damage\LpiDamageReportHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\InsuranceBundle\Helper\Damage\PliDamageReportHelper" class="Main\InsuranceBundle\Helper\Damage\PliDamageReportHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\InsuranceBundle\Helper\Damage\RbiDamageReportHelper" class="Main\InsuranceBundle\Helper\Damage\RbiDamageReportHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\InsuranceBundle\Helper\Entity\TariffTypeHelper" class="Main\InsuranceBundle\Helper\Entity\TariffTypeHelper" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\FileParserHelper" class="Main\InsuranceBundle\Helper\FileParserHelper" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Filter\HciResponseFilter" class="Main\InsuranceBundle\Helper\Filter\HciResponseFilter" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Filter\PliResponseFilter" class="Main\InsuranceBundle\Helper\Filter\PliResponseFilter" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Mapping\Companies\LogoNameMapping" class="Main\InsuranceBundle\Helper\Mapping\Companies\LogoNameMapping" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Mapping\Tariff\AciTariffStructure" class="Main\InsuranceBundle\Helper\Mapping\Tariff\AciTariffStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Mapping\Tariff\AliTariffStructure" class="Main\InsuranceBundle\Helper\Mapping\Tariff\AliTariffStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Mapping\Tariff\HciTariffStructure" class="Main\InsuranceBundle\Helper\Mapping\Tariff\HciTariffStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Mapping\Tariff\LpiTariffStructure" class="Main\InsuranceBundle\Helper\Mapping\Tariff\LpiTariffStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Mapping\Tariff\PliTariffStructure" class="Main\InsuranceBundle\Helper\Mapping\Tariff\PliTariffStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Mapping\Tariff\RbiTariffStructure" class="Main\InsuranceBundle\Helper\Mapping\Tariff\RbiTariffStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Parser\Map\TariffMapStructure" class="Main\InsuranceBundle\Helper\Parser\Map\TariffMapStructure" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Parser\Map\TariffMapStructurePli" class="Main\InsuranceBundle\Helper\Parser\Map\TariffMapStructurePli" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Parser\Map\TariffMapStructureRate" class="Main\InsuranceBundle\Helper\Parser\Map\TariffMapStructureRate" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Parser\Result\TariffToResultParser" class="Main\InsuranceBundle\Helper\Parser\Result\TariffToResultParser" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Parser\SurveyToTariffNewParser" class="Main\InsuranceBundle\Helper\Parser\SurveyToTariffNewParser" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Parser\SurveyToTariffParser" class="Main\InsuranceBundle\Helper\Parser\SurveyToTariffParser" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Parser\TariffSurveyParser" class="Main\InsuranceBundle\Helper\Parser\TariffSurveyParser" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Parser\TariffSurveyParserHelper" class="Main\InsuranceBundle\Helper\Parser\TariffSurveyParserHelper" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Parser\TariffToSurveyParser" class="Main\InsuranceBundle\Helper\Parser\TariffToSurveyParser" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Structure\DamageStructureHelper" class="Main\InsuranceBundle\Helper\Structure\DamageStructureHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="Main\InsuranceBundle\Repository\DamageRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\InsuranceBundle\Helper\Structure\SurveyStructureHelper" class="Main\InsuranceBundle\Helper\Structure\SurveyStructureHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="Main\InsuranceBundle\Repository\StructureRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\InsuranceBundle\Helper\Tariff\TariffHelper" class="Main\InsuranceBundle\Helper\Tariff\TariffHelper" public="false" lazy="true" autowire="true" autoconfigure="true">
      <argument type="service" id="Main\UserBundle\Repository\UserRepository"/>
      <argument type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="Main\InsuranceBundle\Helper\TariffParserHelper" class="Main\InsuranceBundle\Helper\TariffParserHelper" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Url\AciUrlBuilder" class="Main\InsuranceBundle\Helper\Url\AciUrlBuilder" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Url\AliUrlBuilder" class="Main\InsuranceBundle\Helper\Url\AliUrlBuilder" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Url\Application\AciApplicationUrlBuilder" class="Main\InsuranceBundle\Helper\Url\Application\AciApplicationUrlBuilder" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Url\Application\AliApplicationUrlBuilder" class="Main\InsuranceBundle\Helper\Url\Application\AliApplicationUrlBuilder" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Url\Application\HciApplicationUrlBuilder" class="Main\InsuranceBundle\Helper\Url\Application\HciApplicationUrlBuilder" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Url\Application\LpiApplicationUrlBuilder" class="Main\InsuranceBundle\Helper\Url\Application\LpiApplicationUrlBuilder" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Url\Application\PliApplicationUrlBuilder" class="Main\InsuranceBundle\Helper\Url\Application\PliApplicationUrlBuilder" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Url\Application\RbiApplicationUrlBuilder" class="Main\InsuranceBundle\Helper\Url\Application\RbiApplicationUrlBuilder" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Url\HciUrlBuilder" class="Main\InsuranceBundle\Helper\Url\HciUrlBuilder" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Url\LpiUrlBuilder" class="Main\InsuranceBundle\Helper\Url\LpiUrlBuilder" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Url\PliUrlBuilder" class="Main\InsuranceBundle\Helper\Url\PliUrlBuilder" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Helper\Url\RbiUrlBuilder" class="Main\InsuranceBundle\Helper\Url\RbiUrlBuilder" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\MainInsuranceBundle" class="Main\InsuranceBundle\MainInsuranceBundle" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Repository\CompanyRepository" class="Main\InsuranceBundle\Repository\CompanyRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\ContractRepository" class="Main\InsuranceBundle\Repository\ContractRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\DamageDocumentRepository" class="Main\InsuranceBundle\Repository\DamageDocumentRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\DamageMediaRepository" class="Main\InsuranceBundle\Repository\DamageMediaRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\DamageRepository" class="Main\InsuranceBundle\Repository\DamageRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\InsuranceCompanyRepository" class="Main\InsuranceBundle\Repository\InsuranceCompanyRepository" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Repository\InsurancePrivateLiabilityRepository" class="Main\InsuranceBundle\Repository\InsurancePrivateLiabilityRepository" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Repository\InsuranceRepository" class="Main\InsuranceBundle\Repository\InsuranceRepository" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Repository\InsuranceTariffRepository" class="Main\InsuranceBundle\Repository\InsuranceTariffRepository" public="false" lazy="true" autowire="true" autoconfigure="true"/>
    <service id="Main\InsuranceBundle\Repository\MMContractRepository" class="Main\InsuranceBundle\Repository\MMContractRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\ProcessActivityRepository" class="Main\InsuranceBundle\Repository\ProcessActivityRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\ProcessRepository" class="Main\InsuranceBundle\Repository\ProcessRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\ProcessStatusRepository" class="Main\InsuranceBundle\Repository\ProcessStatusRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository" class="Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\ProcessTypeRepository" class="Main\InsuranceBundle\Repository\ProcessTypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\StructureRepository" class="Main\InsuranceBundle\Repository\StructureRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\SurveyQuestionRepository" class="Main\InsuranceBundle\Repository\SurveyQuestionRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\TargetGroupRepository" class="Main\InsuranceBundle\Repository\TargetGroupRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\TariffRateRepository" class="Main\InsuranceBundle\Repository\TariffRateRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\TariffRepository" class="Main\InsuranceBundle\Repository\TariffRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\TariffTargetGroupRepository" class="Main\InsuranceBundle\Repository\TariffTargetGroupRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\TariffTypeRepository" class="Main\InsuranceBundle\Repository\TariffTypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="Main\InsuranceBundle\Repository\TypeRepository" class="Main\InsuranceBundle\Repository\TypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="app.service.file_uploader" class="AppBundle\Service\UploadService" public="true" lazy="true" autowire="true" autoconfigure="true">
      <argument>/programming/prod-yourneeds/src/../public/uploads/profiles</argument>
      <argument>/programming/prod-yourneeds/src/../public/uploads/logos</argument>
    </service>
    <service id="app.security.voter.view_profile" class="Main\UserBundle\Security\Voter\ViewProfileVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="app.security.voter.view_choose_survey" class="Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="app.security.voter.view_do_survey" class="Main\UserBundle\Security\Voter\ViewDoSurveyVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
    </service>
    <service id="app.security.voter.save_survey" class="Main\UserBundle\Security\Voter\SaveSurveyVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="app.security.voter.view_survey_result" class="Main\UserBundle\Security\Voter\ViewSurveyResultVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="app.security.voter.choose_payment" class="Main\UserBundle\Security\Voter\ChoosePaymentVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="app.security.voter.do_application" class="Main\UserBundle\Security\Voter\DoApplicationVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="app.security.voter.do_use_builder" class="Main\UserBundle\Security\Voter\DoAdminImportVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="app.security.voter.can_upload_document" class="Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="app.security.voter.do_admin_import" class="Main\UserBundle\Security\Voter\DoUseBuilderVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="app.security.voter.use_benefit" class="Main\UserBundle\Security\Voter\UseBenefitVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="app.security.voter.edit_benefit" class="Main\UserBundle\Security\Voter\EditBenefitVoter" public="false" lazy="true" autowire="true" autoconfigure="true">
      <tag name="security.voter"/>
      <argument type="service" id="security.helper"/>
    </service>
    <service id="doctrine_cache.abstract.apc" class="Doctrine\Common\Cache\ApcCache" abstract="true"/>
    <service id="doctrine_cache.abstract.apcu" class="Doctrine\Common\Cache\ApcuCache" abstract="true"/>
    <service id="doctrine_cache.abstract.array" class="Doctrine\Common\Cache\ArrayCache" abstract="true"/>
    <service id="doctrine_cache.abstract.chain" class="Doctrine\Common\Cache\ChainCache" abstract="true"/>
    <service id="doctrine_cache.abstract.couchbase" class="Doctrine\Common\Cache\CouchbaseCache" abstract="true"/>
    <service id="doctrine_cache.abstract.file_system" class="Doctrine\Common\Cache\FilesystemCache" abstract="true"/>
    <service id="doctrine_cache.abstract.php_file" class="Doctrine\Common\Cache\PhpFileCache" abstract="true"/>
    <service id="doctrine_cache.abstract.memcache" class="Doctrine\Common\Cache\MemcacheCache" abstract="true"/>
    <service id="doctrine_cache.abstract.memcached" class="Doctrine\Common\Cache\MemcachedCache" abstract="true"/>
    <service id="doctrine_cache.abstract.mongodb" class="Doctrine\Common\Cache\MongoDBCache" abstract="true"/>
    <service id="doctrine_cache.abstract.redis" class="Doctrine\Common\Cache\RedisCache" abstract="true"/>
    <service id="doctrine_cache.abstract.predis" class="Doctrine\Common\Cache\PredisCache" abstract="true"/>
    <service id="doctrine_cache.abstract.riak" class="Doctrine\Common\Cache\RiakCache" abstract="true"/>
    <service id="doctrine_cache.abstract.sqlite3" class="Doctrine\Common\Cache\SQLite3Cache" abstract="true"/>
    <service id="doctrine_cache.abstract.void" class="Doctrine\Common\Cache\VoidCache" abstract="true"/>
    <service id="doctrine_cache.abstract.wincache" class="Doctrine\Common\Cache\WinCacheCache" abstract="true"/>
    <service id="doctrine_cache.abstract.xcache" class="Doctrine\Common\Cache\XcacheCache" abstract="true"/>
    <service id="doctrine_cache.abstract.zenddata" class="Doctrine\Common\Cache\ZendDataCache" abstract="true"/>
    <service id="doctrine_cache.contains_command" class="Doctrine\Bundle\DoctrineCacheBundle\Command\ContainsCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_cache.delete_command" class="Doctrine\Bundle\DoctrineCacheBundle\Command\DeleteCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_cache.flush_command" class="Doctrine\Bundle\DoctrineCacheBundle\Command\FlushCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_cache.stats_command" class="Doctrine\Bundle\DoctrineCacheBundle\Command\StatsCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_cache.providers.my_markdown_cache" class="Doctrine\Common\Cache\ArrayCache" public="true"/>
    <service id="doctrine.dbal.logger.chain" class="Doctrine\DBAL\Logging\LoggerChain" public="false" abstract="true">
      <call method="addLogger">
        <argument type="service" id="doctrine.dbal.logger"/>
      </call>
    </service>
    <service id="doctrine.dbal.logger.profiling" class="Doctrine\DBAL\Logging\DebugStack" public="false" abstract="true"/>
    <service id="doctrine.dbal.logger" class="Symfony\Bridge\Doctrine\Logger\DbalLogger" public="false">
      <tag name="monolog.logger" channel="doctrine"/>
      <argument type="service" id="monolog.logger.doctrine" on-invalid="null"/>
      <argument>null</argument>
    </service>
    <service id="data_collector.doctrine" class="Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector" public="false">
      <tag name="data_collector" template="@Doctrine/Collector/db.html.twig" id="db" priority="250"/>
      <argument type="service" id="doctrine"/>
      <call method="addLogger">
        <argument>default</argument>
        <argument type="service" id="doctrine.dbal.logger.profiling.default"/>
      </call>
    </service>
    <service id="doctrine.dbal.connection_factory" class="Doctrine\Bundle\DoctrineBundle\ConnectionFactory">
      <argument type="collection"/>
    </service>
    <service id="doctrine.dbal.connection" class="Doctrine\DBAL\Connection" abstract="true">
      <factory service="doctrine.dbal.connection_factory" method="createConnection"/>
    </service>
    <service id="doctrine.dbal.connection.event_manager" class="Symfony\Bridge\Doctrine\ContainerAwareEventManager" public="false" abstract="true">
      <argument type="service" id="service_container"/>
    </service>
    <service id="doctrine.dbal.connection.configuration" class="Doctrine\DBAL\Configuration" public="false" abstract="true"/>
    <service id="doctrine" class="Doctrine\Bundle\DoctrineBundle\Registry" public="true">
      <argument type="service" id="service_container"/>
      <argument>%doctrine.connections%</argument>
      <argument>%doctrine.entity_managers%</argument>
      <argument>default</argument>
      <argument>default</argument>
    </service>
    <service id="doctrine.twig.doctrine_extension" class="Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="doctrine.database_create_command" class="Doctrine\Bundle\DoctrineBundle\Command\CreateDatabaseDoctrineCommand">
      <tag name="console.command" command="doctrine:database:create"/>
      <argument type="service" id="doctrine"/>
      <call method="setName">
        <argument>doctrine:database:create</argument>
      </call>
    </service>
    <service id="doctrine.database_drop_command" class="Doctrine\Bundle\DoctrineBundle\Command\DropDatabaseDoctrineCommand">
      <tag name="console.command" command="doctrine:database:drop"/>
      <argument type="service" id="doctrine"/>
      <call method="setName">
        <argument>doctrine:database:drop</argument>
      </call>
    </service>
    <service id="doctrine.generate_entities_command" class="Doctrine\Bundle\DoctrineBundle\Command\GenerateEntitiesDoctrineCommand">
      <tag name="console.command" command="doctrine:generate:entities"/>
      <argument type="service" id="doctrine"/>
      <call method="setName">
        <argument>doctrine:generate:entities</argument>
      </call>
    </service>
    <service id="doctrine.query_sql_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunSqlDoctrineCommand">
      <tag name="console.command" command="doctrine:query:sql"/>
      <call method="setName">
        <argument>doctrine:query:sql</argument>
      </call>
    </service>
    <service id="doctrine.dbal.default_connection.configuration" class="Doctrine\DBAL\Configuration" public="false">
      <call method="setSQLLogger">
        <argument type="service" id="doctrine.dbal.logger.chain.default"/>
      </call>
    </service>
    <service id="doctrine.dbal.logger.profiling.default" class="Doctrine\DBAL\Logging\DebugStack" public="false"/>
    <service id="doctrine.dbal.logger.chain.default" class="Doctrine\DBAL\Logging\LoggerChain" public="false">
      <call method="addLogger">
        <argument type="service" id="doctrine.dbal.logger"/>
      </call>
      <call method="addLogger">
        <argument type="service" id="doctrine.dbal.logger.profiling.default"/>
      </call>
    </service>
    <service id="doctrine.dbal.default_connection.event_manager" class="Symfony\Bridge\Doctrine\ContainerAwareEventManager" public="false">
      <argument type="service" id=".service_locator.Otd28_S"/>
      <call method="addEventSubscriber">
        <argument type="service" id="Main\UserBundle\Doctrine\HashPasswordListener"/>
      </call>
      <call method="addEventSubscriber">
        <argument type="service" id="stof_doctrine_extensions.listener.sluggable"/>
      </call>
      <call method="addEventListener">
        <argument type="collection">
          <argument>loadClassMetadata</argument>
        </argument>
        <argument>doctrine.orm.default_listeners.attach_entity_listeners</argument>
      </call>
    </service>
    <service id="doctrine.dbal.default_connection" class="Doctrine\DBAL\Connection" public="true">
      <argument type="collection">
        <argument key="driver">pdo_mysql</argument>
        <argument key="charset">utf8mb4</argument>
        <argument key="url">%env(DATABASE_URL)%</argument>
        <argument key="host">localhost</argument>
        <argument key="port">null</argument>
        <argument key="user">root</argument>
        <argument key="password">null</argument>
        <argument key="driverOptions" type="collection"/>
        <argument key="serverVersion">5.7</argument>
        <argument key="defaultTableOptions" type="collection">
          <argument key="charset">utf8mb4</argument>
          <argument key="collate">utf8mb4_unicode_ci</argument>
        </argument>
      </argument>
      <argument type="service" id="doctrine.dbal.default_connection.configuration"/>
      <argument type="service" id="doctrine.dbal.default_connection.event_manager"/>
      <argument type="collection"/>
      <factory service="doctrine.dbal.connection_factory" method="createConnection"/>
    </service>
    <service id="doctrine.orm.proxy_cache_warmer" class="Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="form.type_guesser.doctrine" class="Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser">
      <tag name="form.type_guesser"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="form.type.entity" class="Symfony\Bridge\Doctrine\Form\Type\EntityType">
      <tag name="form.type" alias="entity"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.configuration" class="Doctrine\ORM\Configuration" public="false" abstract="true"/>
    <service id="doctrine.orm.entity_manager.abstract" class="Doctrine\ORM\EntityManager" lazy="true" abstract="true">
      <factory class="Doctrine\ORM\EntityManager" method="create"/>
    </service>
    <service id="doctrine.orm.container_repository_factory" class="Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory" public="false">
      <argument type="service" id=".service_locator.hNBt2UX"/>
    </service>
    <service id="doctrine.orm.manager_configurator.abstract" class="Doctrine\Bundle\DoctrineBundle\ManagerConfigurator" abstract="true">
      <argument type="collection"/>
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.validator.unique" class="Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator">
      <tag name="validator.constraint_validator" alias="doctrine.orm.validator.unique"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.validator_initializer" class="Symfony\Bridge\Doctrine\Validator\DoctrineInitializer">
      <tag name="validator.initializer"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.security.user.provider" class="Symfony\Bridge\Doctrine\Security\User\EntityUserProvider" public="false" abstract="true">
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.listeners.resolve_target_entity" class="Doctrine\ORM\Tools\ResolveTargetEntityListener" public="false"/>
    <service id="doctrine.orm.naming_strategy.default" class="Doctrine\ORM\Mapping\DefaultNamingStrategy" public="false"/>
    <service id="doctrine.orm.naming_strategy.underscore" class="Doctrine\ORM\Mapping\UnderscoreNamingStrategy" public="false"/>
    <service id="doctrine.orm.quote_strategy.default" class="Doctrine\ORM\Mapping\DefaultQuoteStrategy" public="false"/>
    <service id="doctrine.orm.quote_strategy.ansi" class="Doctrine\ORM\Mapping\AnsiQuoteStrategy" public="false"/>
    <service id="doctrine.cache_clear_metadata_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearMetadataCacheDoctrineCommand">
      <tag name="console.command" command="doctrine:cache:clear-metadata"/>
      <call method="setName">
        <argument>doctrine:cache:clear-metadata</argument>
      </call>
    </service>
    <service id="doctrine.cache_clear_query_cache_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearQueryCacheDoctrineCommand">
      <tag name="console.command" command="doctrine:cache:clear-query"/>
      <call method="setName">
        <argument>doctrine:cache:clear-query</argument>
      </call>
    </service>
    <service id="doctrine.cache_clear_result_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearResultCacheDoctrineCommand">
      <tag name="console.command" command="doctrine:cache:clear-result"/>
      <call method="setName">
        <argument>doctrine:cache:clear-result</argument>
      </call>
    </service>
    <service id="doctrine.cache_collection_region_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\CollectionRegionDoctrineCommand">
      <tag name="console.command" command="doctrine:cache:clear-collection-region"/>
      <call method="setName">
        <argument>doctrine:cache:clear-collection-region</argument>
      </call>
    </service>
    <service id="doctrine.mapping_convert_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\ConvertMappingDoctrineCommand">
      <tag name="console.command" command="doctrine:mapping:convert"/>
      <call method="setName">
        <argument>doctrine:mapping:convert</argument>
      </call>
    </service>
    <service id="doctrine.schema_create_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\CreateSchemaDoctrineCommand">
      <tag name="console.command" command="doctrine:schema:create"/>
      <call method="setName">
        <argument>doctrine:schema:create</argument>
      </call>
    </service>
    <service id="doctrine.schema_drop_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\DropSchemaDoctrineCommand">
      <tag name="console.command" command="doctrine:schema:drop"/>
      <call method="setName">
        <argument>doctrine:schema:drop</argument>
      </call>
    </service>
    <service id="doctrine.ensure_production_settings_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\EnsureProductionSettingsDoctrineCommand">
      <tag name="console.command" command="doctrine:ensure-production-settings"/>
      <call method="setName">
        <argument>doctrine:ensure-production-settings</argument>
      </call>
    </service>
    <service id="doctrine.clear_entity_region_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\EntityRegionCacheDoctrineCommand">
      <tag name="console.command" command="doctrine:cache:clear-entity-region"/>
      <call method="setName">
        <argument>doctrine:cache:clear-entity-region</argument>
      </call>
    </service>
    <service id="doctrine.database_import_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\ImportDoctrineCommand">
      <tag name="console.command" command="doctrine:database:import"/>
      <call method="setName">
        <argument>doctrine:database:import</argument>
      </call>
    </service>
    <service id="doctrine.mapping_info_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\InfoDoctrineCommand">
      <tag name="console.command" command="doctrine:mapping:info"/>
      <call method="setName">
        <argument>doctrine:mapping:info</argument>
      </call>
    </service>
    <service id="doctrine.clear_query_region_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\QueryRegionCacheDoctrineCommand">
      <tag name="console.command" command="doctrine:cache:clear-query-region"/>
      <call method="setName">
        <argument>doctrine:cache:clear-query-region</argument>
      </call>
    </service>
    <service id="doctrine.query_dql_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunDqlDoctrineCommand">
      <tag name="console.command" command="doctrine:query:dql"/>
      <call method="setName">
        <argument>doctrine:query:dql</argument>
      </call>
    </service>
    <service id="doctrine.schema_update_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\UpdateSchemaDoctrineCommand">
      <tag name="console.command" command="doctrine:schema:update"/>
      <call method="setName">
        <argument>doctrine:schema:update</argument>
      </call>
    </service>
    <service id="doctrine.schema_validate_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\ValidateSchemaCommand">
      <tag name="console.command" command="doctrine:schema:validate"/>
      <call method="setName">
        <argument>doctrine:schema:validate</argument>
      </call>
    </service>
    <service id="doctrine.mapping_import_command" class="Doctrine\Bundle\DoctrineBundle\Command\ImportMappingDoctrineCommand">
      <tag name="console.command" command="doctrine:mapping:import"/>
      <argument type="service" id="doctrine"/>
      <argument>%kernel.bundles%</argument>
      <call method="setName">
        <argument>doctrine:mapping:import</argument>
      </call>
    </service>
    <service id="doctrine.orm.default_configuration" class="Doctrine\ORM\Configuration" public="false">
      <call method="setEntityNamespaces">
        <argument type="collection">
          <argument key="AppBundle">AppBundle\Entity</argument>
          <argument key="AdminBundle">Main\AdminBundle\Entity</argument>
          <argument key="UserBundle">Main\UserBundle\Entity</argument>
          <argument key="InsuranceBundle">Main\InsuranceBundle\Entity</argument>
          <argument key="MainUserBundle">Main\UserBundle\Entity</argument>
          <argument key="MainInsuranceBundle">Main\InsuranceBundle\Entity</argument>
          <argument key="MainAdminBundle">Main\AdminBundle\Entity</argument>
        </argument>
      </call>
      <call method="setMetadataCacheImpl">
        <argument type="service" id="doctrine_cache.providers.doctrine.orm.default_metadata_cache"/>
      </call>
      <call method="setQueryCacheImpl">
        <argument type="service" id="doctrine_cache.providers.doctrine.orm.default_query_cache"/>
      </call>
      <call method="setResultCacheImpl">
        <argument type="service" id="doctrine_cache.providers.doctrine.orm.default_result_cache"/>
      </call>
      <call method="setMetadataDriverImpl">
        <argument type="service" id="doctrine.orm.default_metadata_driver"/>
      </call>
      <call method="setProxyDir">
        <argument>/programming/prod-yourneeds/var/cache/dev/doctrine/orm/Proxies</argument>
      </call>
      <call method="setProxyNamespace">
        <argument>Proxies</argument>
      </call>
      <call method="setAutoGenerateProxyClasses">
        <argument>true</argument>
      </call>
      <call method="setClassMetadataFactoryName">
        <argument>Doctrine\ORM\Mapping\ClassMetadataFactory</argument>
      </call>
      <call method="setDefaultRepositoryClassName">
        <argument>Doctrine\ORM\EntityRepository</argument>
      </call>
      <call method="setNamingStrategy">
        <argument type="service" id="doctrine.orm.naming_strategy.underscore"/>
      </call>
      <call method="setQuoteStrategy">
        <argument type="service" id="doctrine.orm.quote_strategy.default"/>
      </call>
      <call method="setEntityListenerResolver">
        <argument type="service" id="doctrine.orm.default_entity_listener_resolver"/>
      </call>
      <call method="setRepositoryFactory">
        <argument type="service" id="doctrine.orm.container_repository_factory"/>
      </call>
    </service>
    <service id="doctrine.orm.default_annotation_metadata_driver" class="Doctrine\ORM\Mapping\Driver\AnnotationDriver" public="false">
      <argument type="service" id="annotations.cached_reader"/>
      <argument type="collection">
        <argument>/programming/prod-yourneeds/src/AppBundle/Entity</argument>
        <argument>/programming/prod-yourneeds/src/Main/AdminBundle/Entity</argument>
        <argument>/programming/prod-yourneeds/src/Main/UserBundle/Entity</argument>
        <argument>/programming/prod-yourneeds/src/Main/InsuranceBundle/Entity</argument>
      </argument>
    </service>
    <service id="doctrine.orm.default_metadata_driver" class="Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain" public="false">
      <call method="addDriver">
        <argument type="service" id="doctrine.orm.default_annotation_metadata_driver"/>
        <argument>AppBundle\Entity</argument>
      </call>
      <call method="addDriver">
        <argument type="service" id="doctrine.orm.default_annotation_metadata_driver"/>
        <argument>Main\AdminBundle\Entity</argument>
      </call>
      <call method="addDriver">
        <argument type="service" id="doctrine.orm.default_annotation_metadata_driver"/>
        <argument>Main\UserBundle\Entity</argument>
      </call>
      <call method="addDriver">
        <argument type="service" id="doctrine.orm.default_annotation_metadata_driver"/>
        <argument>Main\InsuranceBundle\Entity</argument>
      </call>
    </service>
    <service id="doctrine_cache.providers.doctrine.orm.default_metadata_cache" class="Doctrine\Common\Cache\ArrayCache" public="true">
      <call method="setNamespace">
        <argument>sf_orm_default_f120d4c4a93a7804f0603c555400cacb590fdb3953e2628d94f8632e181b0221</argument>
      </call>
    </service>
    <service id="doctrine_cache.providers.doctrine.orm.default_result_cache" class="Doctrine\Common\Cache\ArrayCache" public="true">
      <call method="setNamespace">
        <argument>sf_orm_default_f120d4c4a93a7804f0603c555400cacb590fdb3953e2628d94f8632e181b0221</argument>
      </call>
    </service>
    <service id="doctrine_cache.providers.doctrine.orm.default_query_cache" class="Doctrine\Common\Cache\ArrayCache" public="true">
      <call method="setNamespace">
        <argument>sf_orm_default_f120d4c4a93a7804f0603c555400cacb590fdb3953e2628d94f8632e181b0221</argument>
      </call>
    </service>
    <service id="doctrine.orm.default_entity_listener_resolver" class="Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver">
      <argument type="service" id="service_container"/>
    </service>
    <service id="doctrine.orm.default_listeners.attach_entity_listeners" class="Doctrine\ORM\Tools\AttachEntityListenersListener">
      <tag name="doctrine.event_listener" event="loadClassMetadata"/>
    </service>
    <service id="doctrine.orm.default_manager_configurator" class="Doctrine\Bundle\DoctrineBundle\ManagerConfigurator">
      <argument type="collection"/>
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.default_entity_manager" class="Doctrine\ORM\EntityManager" public="true" lazy="true">
      <argument type="service" id="doctrine.dbal.default_connection"/>
      <argument type="service" id="doctrine.orm.default_configuration"/>
      <factory class="Doctrine\ORM\EntityManager" method="create"/>
      <configurator service="doctrine.orm.default_manager_configurator" method="configure"/>
    </service>
    <service id="doctrine_migrations.diff_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsDiffDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.execute_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsExecuteDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.generate_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsGenerateDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.latest_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsLatestDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.migrate_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsMigrateDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.status_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsStatusDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="doctrine_migrations.version_command" class="Doctrine\Bundle\MigrationsBundle\Command\MigrationsVersionDoctrineCommand">
      <tag name="console.command"/>
    </service>
    <service id="jms_serializer.event_dispatcher" class="JMS\Serializer\EventDispatcher\LazyEventDispatcher" public="false">
      <argument type="service" id=".service_locator..a3fWhj"/>
      <call method="setListeners">
        <argument type="collection">
          <argument key="serializer.pre_serialize" type="collection">
            <argument type="collection">
              <argument type="collection">
                <argument>jms_serializer.doctrine_proxy_subscriber</argument>
                <argument>onPreSerializeTypedProxy</argument>
              </argument>
              <argument>null</argument>
              <argument>null</argument>
            </argument>
            <argument type="collection">
              <argument type="collection">
                <argument>jms_serializer.doctrine_proxy_subscriber</argument>
                <argument>onPreSerialize</argument>
              </argument>
              <argument>null</argument>
              <argument>null</argument>
            </argument>
          </argument>
        </argument>
      </call>
    </service>
    <service id="jms_serializer.doctrine_proxy_subscriber" class="JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber" public="true">
      <tag name="jms_serializer.event_subscriber"/>
      <argument>true</argument>
      <argument>false</argument>
    </service>
    <service id="jms_serializer.handler_registry" class="JMS\Serializer\Handler\LazyHandlerRegistry">
      <argument type="service" id=".service_locator.3Es1IPB"/>
      <argument type="collection">
        <argument key="2" type="collection">
          <argument key="DateTime" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>deserializeDateTimeFromjson</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>deserializeDateTimeFromxml</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>deserializeDateTimeFromyml</argument>
            </argument>
          </argument>
          <argument key="DateTimeImmutable" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>deserializeDateTimeImmutableFromjson</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>deserializeDateTimeImmutableFromxml</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>deserializeDateTimeImmutableFromyml</argument>
            </argument>
          </argument>
          <argument key="DateInterval" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>deserializeDateIntervalFromjson</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>deserializeDateIntervalFromxml</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>deserializeDateIntervalFromyml</argument>
            </argument>
          </argument>
          <argument key="ArrayCollection" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
          </argument>
          <argument key="Doctrine\Common\Collections\ArrayCollection" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
          </argument>
          <argument key="Doctrine\ORM\PersistentCollection" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
          </argument>
          <argument key="Doctrine\ODM\MongoDB\PersistentCollection" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
          </argument>
          <argument key="Doctrine\ODM\PHPCR\PersistentCollection" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>deserializeCollection</argument>
            </argument>
          </argument>
          <argument key="PhpCollection\Sequence" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.php_collection_handler</argument>
              <argument>deserializeSequence</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.php_collection_handler</argument>
              <argument>deserializeSequence</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.php_collection_handler</argument>
              <argument>deserializeSequence</argument>
            </argument>
          </argument>
          <argument key="PhpCollection\Map" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.php_collection_handler</argument>
              <argument>deserializeMap</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.php_collection_handler</argument>
              <argument>deserializeMap</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.php_collection_handler</argument>
              <argument>deserializeMap</argument>
            </argument>
          </argument>
        </argument>
        <argument key="1" type="collection">
          <argument key="DateTime" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>serializeDateTime</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>serializeDateTime</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>serializeDateTime</argument>
            </argument>
          </argument>
          <argument key="DateTimeImmutable" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>serializeDateTimeImmutable</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>serializeDateTimeImmutable</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>serializeDateTimeImmutable</argument>
            </argument>
          </argument>
          <argument key="DateInterval" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>serializeDateInterval</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>serializeDateInterval</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.datetime_handler</argument>
              <argument>serializeDateInterval</argument>
            </argument>
          </argument>
          <argument key="ArrayCollection" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
          </argument>
          <argument key="Doctrine\Common\Collections\ArrayCollection" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
          </argument>
          <argument key="Doctrine\ORM\PersistentCollection" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
          </argument>
          <argument key="Doctrine\ODM\MongoDB\PersistentCollection" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
          </argument>
          <argument key="Doctrine\ODM\PHPCR\PersistentCollection" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.array_collection_handler</argument>
              <argument>serializeCollection</argument>
            </argument>
          </argument>
          <argument key="PhpCollection\Sequence" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.php_collection_handler</argument>
              <argument>serializeSequence</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.php_collection_handler</argument>
              <argument>serializeSequence</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.php_collection_handler</argument>
              <argument>serializeSequence</argument>
            </argument>
          </argument>
          <argument key="PhpCollection\Map" type="collection">
            <argument key="json" type="collection">
              <argument>jms_serializer.php_collection_handler</argument>
              <argument>serializeMap</argument>
            </argument>
            <argument key="xml" type="collection">
              <argument>jms_serializer.php_collection_handler</argument>
              <argument>serializeMap</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.php_collection_handler</argument>
              <argument>serializeMap</argument>
            </argument>
          </argument>
          <argument key="Symfony\Component\Form\Form" type="collection">
            <argument key="xml" type="collection">
              <argument>jms_serializer.form_error_handler</argument>
              <argument>serializeFormToxml</argument>
            </argument>
            <argument key="json" type="collection">
              <argument>jms_serializer.form_error_handler</argument>
              <argument>serializeFormTojson</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.form_error_handler</argument>
              <argument>serializeFormToyml</argument>
            </argument>
          </argument>
          <argument key="Symfony\Component\Form\FormError" type="collection">
            <argument key="xml" type="collection">
              <argument>jms_serializer.form_error_handler</argument>
              <argument>serializeFormErrorToxml</argument>
            </argument>
            <argument key="json" type="collection">
              <argument>jms_serializer.form_error_handler</argument>
              <argument>serializeFormErrorTojson</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.form_error_handler</argument>
              <argument>serializeFormErrorToyml</argument>
            </argument>
          </argument>
          <argument key="Symfony\Component\Validator\ConstraintViolationList" type="collection">
            <argument key="xml" type="collection">
              <argument>jms_serializer.constraint_violation_handler</argument>
              <argument>serializeListToxml</argument>
            </argument>
            <argument key="json" type="collection">
              <argument>jms_serializer.constraint_violation_handler</argument>
              <argument>serializeListTojson</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.constraint_violation_handler</argument>
              <argument>serializeListToyml</argument>
            </argument>
          </argument>
          <argument key="Symfony\Component\Validator\ConstraintViolation" type="collection">
            <argument key="xml" type="collection">
              <argument>jms_serializer.constraint_violation_handler</argument>
              <argument>serializeViolationToxml</argument>
            </argument>
            <argument key="json" type="collection">
              <argument>jms_serializer.constraint_violation_handler</argument>
              <argument>serializeViolationTojson</argument>
            </argument>
            <argument key="yml" type="collection">
              <argument>jms_serializer.constraint_violation_handler</argument>
              <argument>serializeViolationToyml</argument>
            </argument>
          </argument>
        </argument>
      </argument>
    </service>
    <service id="jms_serializer.datetime_handler" class="JMS\Serializer\Handler\DateHandler" public="true">
      <tag name="jms_serializer.subscribing_handler"/>
      <argument>Y-m-d\TH:i:sP</argument>
      <argument>UTC</argument>
      <argument>true</argument>
    </service>
    <service id="jms_serializer.array_collection_handler" class="JMS\Serializer\Handler\ArrayCollectionHandler" public="true">
      <tag name="jms_serializer.subscribing_handler"/>
      <argument>false</argument>
    </service>
    <service id="jms_serializer.php_collection_handler" class="JMS\Serializer\Handler\PhpCollectionHandler" public="true">
      <tag name="jms_serializer.subscribing_handler"/>
    </service>
    <service id="jms_serializer.form_error_handler" class="JMS\Serializer\Handler\FormErrorHandler" public="true">
      <tag name="jms_serializer.subscribing_handler"/>
      <argument type="service" id="translator.default" on-invalid="null"/>
      <argument>validators</argument>
    </service>
    <service id="jms_serializer.constraint_violation_handler" class="JMS\Serializer\Handler\ConstraintViolationHandler" public="true">
      <tag name="jms_serializer.subscribing_handler"/>
    </service>
    <service id="jms_serializer.metadata.file_locator" class="Metadata\Driver\FileLocator" public="false">
      <argument type="collection"/>
    </service>
    <service id="jms_serializer.metadata.yaml_driver" class="JMS\Serializer\Metadata\Driver\YamlDriver" public="false">
      <argument type="service" id="jms_serializer.metadata.file_locator"/>
    </service>
    <service id="jms_serializer.metadata.xml_driver" class="JMS\Serializer\Metadata\Driver\XmlDriver" public="false">
      <argument type="service" id="jms_serializer.metadata.file_locator"/>
    </service>
    <service id="jms_serializer.metadata.php_driver" class="JMS\Serializer\Metadata\Driver\PhpDriver" public="false">
      <argument type="service" id="jms_serializer.metadata.file_locator"/>
    </service>
    <service id="jms_serializer.metadata.annotation_driver" class="JMS\Serializer\Metadata\Driver\AnnotationDriver" public="false">
      <argument type="service" id="annotations.cached_reader"/>
    </service>
    <service id="jms_serializer.metadata.chain_driver" class="Metadata\Driver\DriverChain" public="false">
      <argument type="collection">
        <argument type="service" id="jms_serializer.metadata.yaml_driver"/>
        <argument type="service" id="jms_serializer.metadata.xml_driver"/>
        <argument type="service" id="jms_serializer.metadata.php_driver"/>
        <argument type="service" id="jms_serializer.metadata.annotation_driver"/>
      </argument>
    </service>
    <service id="jms_serializer.metadata.doctrine_type_driver" class="JMS\Serializer\Metadata\Driver\DoctrineTypeDriver" public="false">
      <argument type="service" id="jms_serializer.metadata.chain_driver"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="jms_serializer.metadata.doctrine_phpcr_type_driver" class="JMS\Serializer\Metadata\Driver\DoctrinePHPCRTypeDriver" public="false">
      <argument type="service" id="jms_serializer.metadata.chain_driver"/>
      <argument type="service" id="doctrine_phpcr"/>
    </service>
    <service id="jms_serializer.metadata.lazy_loading_driver" class="Metadata\Driver\LazyLoadingDriver" public="false">
      <argument type="service" id="service_container"/>
      <argument>jms_serializer.metadata_driver</argument>
    </service>
    <service id="jms_serializer.metadata.cache.file_cache" class="Metadata\Cache\FileCache" public="false">
      <argument>/programming/prod-yourneeds/var/cache/dev/jms_serializer</argument>
    </service>
    <service id="jms_serializer.metadata_factory" class="Metadata\MetadataFactory" public="false">
      <argument type="service" id="jms_serializer.metadata.lazy_loading_driver"/>
      <argument>Metadata\ClassHierarchyMetadata</argument>
      <argument>true</argument>
      <call method="setCache">
        <argument type="service" id="jms_serializer.metadata.cache.file_cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="jms_serializer.version_exclusion_strategy" class="JMS\Serializer\Exclusion\VersionExclusionStrategy" public="false" abstract="true"/>
    <service id="jms_serializer.camel_case_naming_strategy" class="JMS\Serializer\Naming\IdenticalPropertyNamingStrategy" public="false">
      <argument>_</argument>
      <argument>true</argument>
    </service>
    <service id="jms_serializer.identical_property_naming_strategy" class="JMS\Serializer\Naming\IdenticalPropertyNamingStrategy" public="false"/>
    <service id="jms_serializer.serialized_name_annotation_strategy" class="JMS\Serializer\Naming\SerializedNameAnnotationStrategy" public="false">
      <argument type="service" id="jms_serializer.camel_case_naming_strategy"/>
    </service>
    <service id="jms_serializer.cache_naming_strategy" class="JMS\Serializer\Naming\CacheNamingStrategy" public="false">
      <argument type="service" id="jms_serializer.serialized_name_annotation_strategy"/>
    </service>
    <service id="jms_serializer.doctrine_object_constructor" class="JMS\Serializer\Construction\DoctrineObjectConstructor" public="false">
      <argument type="service" id="doctrine"/>
      <argument type="service" id="jms_serializer.unserialize_object_constructor"/>
      <argument type="string">null</argument>
    </service>
    <service id="jms_serializer.doctrine_phpcr_object_constructor" class="JMS\Serializer\Construction\DoctrineObjectConstructor" public="false">
      <argument type="service" id="doctrine_phpcr"/>
      <argument type="service" id="jms_serializer.unserialize_object_constructor"/>
    </service>
    <service id="jms_serializer.unserialize_object_constructor" class="JMS\Serializer\Construction\UnserializeObjectConstructor" public="false"/>
    <service id="jms_serializer.serializer" class="JMS\Serializer\Serializer" public="false">
      <argument type="service" id="jms_serializer.metadata_factory"/>
      <argument type="service" id="jms_serializer.handler_registry"/>
      <argument type="service" id="jms_serializer.unserialize_object_constructor"/>
      <argument type="service">
        <service class="PhpCollection\Map">
          <argument type="collection">
            <argument key="json" type="service" id="jms_serializer.json_serialization_visitor"/>
            <argument key="xml" type="service" id="jms_serializer.xml_serialization_visitor"/>
            <argument key="yml" type="service" id="jms_serializer.yaml_serialization_visitor"/>
          </argument>
        </service>
      </argument>
      <argument type="service">
        <service class="PhpCollection\Map">
          <argument type="collection">
            <argument key="json" type="service" id="jms_serializer.json_deserialization_visitor"/>
            <argument key="xml" type="service" id="jms_serializer.xml_deserialization_visitor"/>
          </argument>
        </service>
      </argument>
      <argument type="service" id="jms_serializer.event_dispatcher"/>
      <argument>null</argument>
      <argument type="service" id="jms_serializer.expression_evaluator"/>
      <call method="setSerializationContextFactory">
        <argument type="service" id="jms_serializer.configured_serialization_context_factory"/>
      </call>
      <call method="setDeserializationContextFactory">
        <argument type="service" id="jms_serializer.configured_deserialization_context_factory"/>
      </call>
    </service>
    <service id="jms_serializer.expression_evaluator" class="JMS\Serializer\Expression\ExpressionEvaluator">
      <argument type="service" id="jms_serializer.expression_language"/>
      <argument type="collection">
        <argument key="container" type="service" id="service_container"/>
      </argument>
    </service>
    <service id="jms_serializer.expression_language" class="Symfony\Component\ExpressionLanguage\ExpressionLanguage" public="false">
      <call method="registerProvider">
        <argument type="service" id="jms_serializer.expression_language.function_provider"/>
      </call>
    </service>
    <service id="jms_serializer.expression_language.function_provider" class="JMS\SerializerBundle\ExpressionLanguage\BasicSerializerFunctionsProvider" public="false"/>
    <service id="jms_serializer.twig_extension.serializer" class="JMS\Serializer\Twig\SerializerRuntimeExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="jms_serializer.twig_extension.serializer_runtime_helper" class="JMS\Serializer\Twig\SerializerRuntimeHelper" public="true">
      <tag name="twig.runtime"/>
      <argument type="service" id="jms_serializer.serializer"/>
    </service>
    <service id="jms_serializer.templating.helper.serializer" class="JMS\SerializerBundle\Templating\SerializerHelper">
      <tag name="templating.helper" alias="jms_serializer"/>
      <argument type="service" id="jms_serializer.serializer"/>
    </service>
    <service id="jms_serializer.accessor_strategy.default" class="JMS\Serializer\Accessor\DefaultAccessorStrategy" public="false"/>
    <service id="jms_serializer.accessor_strategy.expression" class="JMS\Serializer\Accessor\ExpressionAccessorStrategy" public="false">
      <argument type="service" id="jms_serializer.expression_evaluator"/>
      <argument type="service" id="jms_serializer.accessor_strategy.default"/>
    </service>
    <service id="jms_serializer.json_serialization_visitor" class="JMS\Serializer\JsonSerializationVisitor" public="true">
      <tag name="jms_serializer.serialization_visitor" format="json"/>
      <argument type="service" id="jms_serializer.cache_naming_strategy"/>
      <argument type="service" id="jms_serializer.accessor_strategy.expression"/>
      <call method="setOptions">
        <argument>1216</argument>
      </call>
    </service>
    <service id="jms_serializer.json_deserialization_visitor" class="JMS\Serializer\JsonDeserializationVisitor" public="true">
      <tag name="jms_serializer.deserialization_visitor" format="json"/>
      <argument type="service" id="jms_serializer.cache_naming_strategy"/>
    </service>
    <service id="jms_serializer.xml_serialization_visitor" class="JMS\Serializer\XmlSerializationVisitor" public="true">
      <tag name="jms_serializer.serialization_visitor" format="xml"/>
      <argument type="service" id="jms_serializer.cache_naming_strategy"/>
      <argument type="service" id="jms_serializer.accessor_strategy.expression"/>
      <call method="setFormatOutput">
        <argument>true</argument>
      </call>
    </service>
    <service id="jms_serializer.xml_deserialization_visitor" class="JMS\Serializer\XmlDeserializationVisitor" public="true">
      <tag name="jms_serializer.deserialization_visitor" format="xml"/>
      <argument type="service" id="jms_serializer.cache_naming_strategy"/>
      <call method="setDoctypeWhitelist">
        <argument type="collection"/>
      </call>
    </service>
    <service id="jms_serializer.yaml_serialization_visitor" class="JMS\Serializer\YamlSerializationVisitor" public="true">
      <tag name="jms_serializer.serialization_visitor" format="yml"/>
      <argument type="service" id="jms_serializer.cache_naming_strategy"/>
      <argument type="service" id="jms_serializer.accessor_strategy.expression"/>
    </service>
    <service id="jms_serializer.configured_serialization_context_factory" class="JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory" public="false"/>
    <service id="jms_serializer.configured_deserialization_context_factory" class="JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory" public="false"/>
    <service id="knp_snappy.pdf" class="Knp\Snappy\Pdf" public="true">
      <tag name="monolog.logger" channel="snappy"/>
      <argument>E:\\_dev\yourneeds\test-yourneeds\src\wkhtmltopdf\wkhtmltopdf.exe</argument>
      <argument type="collection"/>
      <argument type="collection"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.snappy" on-invalid="ignore"/>
      </call>
    </service>
    <service id="knp_snappy.image" class="Knp\Snappy\Image" public="true">
      <tag name="monolog.logger" channel="snappy"/>
      <argument>%env(WKHTMLTOIMAGE_PATH)%</argument>
      <argument type="collection"/>
      <argument type="collection"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.snappy" on-invalid="ignore"/>
      </call>
    </service>
    <service id="sensio_framework_extra.controller.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="annotations.cached_reader"/>
    </service>
    <service id="sensio_framework_extra.routing.loader.annot_class" class="Sensio\Bundle\FrameworkExtraBundle\Routing\AnnotatedRouteControllerLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="annotations.cached_reader"/>
      <deprecated>The "%service_id%" service is deprecated since version 5.2</deprecated>
    </service>
    <service id="sensio_framework_extra.routing.loader.annot_dir" class="Symfony\Component\Routing\Loader\AnnotationDirectoryLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="sensio_framework_extra.routing.loader.annot_class"/>
      <deprecated>The "%service_id%" service is deprecated since version 5.2</deprecated>
    </service>
    <service id="sensio_framework_extra.routing.loader.annot_file" class="Symfony\Component\Routing\Loader\AnnotationFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="sensio_framework_extra.routing.loader.annot_class"/>
      <deprecated>The "%service_id%" service is deprecated since version 5.2</deprecated>
    </service>
    <service id="sensio_framework_extra.converter.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="sensio_framework_extra.converter.manager"/>
      <argument>true</argument>
    </service>
    <service id="sensio_framework_extra.converter.manager" class="Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager">
      <call method="add">
        <argument type="service" id="sensio_framework_extra.converter.doctrine.orm"/>
        <argument>0</argument>
        <argument>doctrine.orm</argument>
      </call>
      <call method="add">
        <argument type="service" id="framework_extra_bundle.date_time_param_converter"/>
        <argument>0</argument>
        <argument>datetime</argument>
      </call>
    </service>
    <service id="sensio_framework_extra.converter.doctrine.orm" class="Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter" public="false">
      <tag name="request.param_converter" converter="doctrine.orm"/>
      <argument type="service" id="doctrine" on-invalid="ignore"/>
      <argument type="service" id="sensio_framework_extra.converter.doctrine.orm.expression_language.default" on-invalid="null"/>
    </service>
    <service id="framework_extra_bundle.date_time_param_converter" class="Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter" public="false">
      <tag name="request.param_converter" converter="datetime"/>
    </service>
    <service id="sensio_framework_extra.converter.doctrine.orm.expression_language.default" class="Symfony\Component\ExpressionLanguage\ExpressionLanguage" public="false"/>
    <service id="sensio_framework_extra.view.guesser" class="Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser" public="false">
      <argument type="service" id="kernel"/>
    </service>
    <service id="sensio_framework_extra.view.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="sensio_framework_extra.view.guesser"/>
      <argument type="service" id="twig" on-invalid="null"/>
    </service>
    <service id="sensio_framework_extra.cache.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="sensio_framework_extra.security.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="framework_extra_bundle.argument_name_convertor"/>
      <argument type="service" id="sensio_framework_extra.security.expression_language.default" on-invalid="null"/>
      <argument type="service" id="security.authentication.trust_resolver" on-invalid="null"/>
      <argument type="service" id="security.role_hierarchy" on-invalid="null"/>
      <argument type="service" id="security.token_storage" on-invalid="null"/>
      <argument type="service" id="security.authorization_checker" on-invalid="null"/>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
    </service>
    <service id="sensio_framework_extra.security.expression_language.default" class="Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage" public="false"/>
    <service id="framework_extra_bundle.event.is_granted" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="framework_extra_bundle.argument_name_convertor"/>
      <argument type="service" id="security.authorization_checker" on-invalid="null"/>
    </service>
    <service id="framework_extra_bundle.argument_name_convertor" class="Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter" public="false">
      <argument type="service" id="argument_metadata_factory"/>
    </service>
    <service id="stof_doctrine_extensions.listener.sluggable" class="Gedmo\Sluggable\SluggableListener" public="false">
      <tag name="doctrine.event_subscriber" connection="default"/>
      <call method="setAnnotationReader">
        <argument type="service" id="annotations.cached_reader"/>
      </call>
    </service>
    <service id="monolog.logger" class="Symfony\Bridge\Monolog\Logger" public="false">
      <argument>app</argument>
      <call method="useMicrosecondTimestamps">
        <argument>true</argument>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.my_logger"/>
      </call>
    </service>
    <service id="monolog.logger_prototype" class="Symfony\Bridge\Monolog\Logger" abstract="true">
      <argument></argument>
    </service>
    <service id="monolog.activation_strategy.not_found" class="Symfony\Bridge\Monolog\Handler\FingersCrossed\NotFoundActivationStrategy" abstract="true"/>
    <service id="monolog.handler.fingers_crossed.error_level_activation_strategy" class="Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy" abstract="true"/>
    <service id="monolog.formatter.chrome_php" class="Monolog\Formatter\ChromePHPFormatter" public="false"/>
    <service id="monolog.formatter.gelf_message" class="Monolog\Formatter\GelfMessageFormatter" public="false"/>
    <service id="monolog.formatter.html" class="Monolog\Formatter\HtmlFormatter" public="false"/>
    <service id="monolog.formatter.json" class="Monolog\Formatter\JsonFormatter" public="false"/>
    <service id="monolog.formatter.line" class="Monolog\Formatter\LineFormatter" public="false"/>
    <service id="monolog.formatter.loggly" class="Monolog\Formatter\LogglyFormatter" public="false"/>
    <service id="monolog.formatter.normalizer" class="Monolog\Formatter\NormalizerFormatter" public="false"/>
    <service id="monolog.formatter.scalar" class="Monolog\Formatter\ScalarFormatter" public="false"/>
    <service id="monolog.formatter.wildfire" class="Monolog\Formatter\WildfireFormatter" public="false"/>
    <service id="monolog.formatter.logstash" class="Monolog\Formatter\LogstashFormatter" public="false">
      <argument>app</argument>
    </service>
    <service id="monolog.processor.psr_log_message" class="Monolog\Processor\PsrLogMessageProcessor" public="false"/>
    <service id="monolog.handler.my_logger" class="Monolog\Handler\StreamHandler">
      <argument>/programming/prod-yourneeds/var/log/parser.log</argument>
      <argument>200</argument>
      <argument>true</argument>
      <argument>null</argument>
      <call method="pushProcessor">
        <argument type="service" id="monolog.processor.psr_log_message"/>
      </call>
    </service>
    <service id="monolog.handler.main" class="Monolog\Handler\StreamHandler">
      <argument>/programming/prod-yourneeds/var/log/dev.log</argument>
      <argument>100</argument>
      <argument>true</argument>
      <argument>null</argument>
      <call method="pushProcessor">
        <argument type="service" id="monolog.processor.psr_log_message"/>
      </call>
    </service>
    <service id="monolog.handler.console" class="Symfony\Bridge\Monolog\Handler\ConsoleHandler">
      <tag name="kernel.event_subscriber"/>
      <argument>null</argument>
      <argument>true</argument>
      <argument type="collection"/>
    </service>
    <service id=".4_Swift_Transport_Esmtp_Auth_NTLMAuthenticator~9KQzOjl" class="Swift_Transport_Esmtp_Auth_NTLMAuthenticator" public="false"/>
    <service id=".3_Swift_Transport_Esmtp_Auth_PlainAuthenticator~9KQzOjl" class="Swift_Transport_Esmtp_Auth_PlainAuthenticator" public="false"/>
    <service id=".2_Swift_Transport_Esmtp_Auth_LoginAuthenticator~9KQzOjl" class="Swift_Transport_Esmtp_Auth_LoginAuthenticator" public="false"/>
    <service id=".1_Swift_Transport_Esmtp_Auth_CramMd5Authenticator~9KQzOjl" class="Swift_Transport_Esmtp_Auth_CramMd5Authenticator" public="false"/>
    <service id="swiftmailer.mailer.abstract" class="Swift_Mailer" public="true" abstract="true">
      <argument type="service" id="swiftmailer.mailer.default.transport.spool"/>
    </service>
    <service id="swiftmailer.transport.smtp.configurator.abstract" class="Symfony\Bundle\SwiftmailerBundle\DependencyInjection\SmtpTransportConfigurator" public="false" abstract="true"/>
    <service id="swiftmailer.transport.sendmail.abstract" class="Swift_Transport_SendmailTransport" public="false" abstract="true"/>
    <service id="swiftmailer.transport.null.abstract" class="Swift_Transport_NullTransport" public="false" abstract="true"/>
    <service id="swiftmailer.transport.failover" class="Swift_Transport_FailoverTransport" public="false"/>
    <service id="swiftmailer.transport.buffer.abstract" class="Swift_Transport_StreamBuffer" public="false" abstract="true">
      <argument type="service" id="swiftmailer.transport.replacementfactory"/>
    </service>
    <service id="swiftmailer.transport.authhandler.abstract" class="Swift_Transport_Esmtp_AuthHandler" public="false" abstract="true">
      <argument type="collection">
        <argument type="service" id=".1_Swift_Transport_Esmtp_Auth_CramMd5Authenticator~9KQzOjl"/>
        <argument type="service" id=".2_Swift_Transport_Esmtp_Auth_LoginAuthenticator~9KQzOjl"/>
        <argument type="service" id=".3_Swift_Transport_Esmtp_Auth_PlainAuthenticator~9KQzOjl"/>
        <argument type="service" id=".4_Swift_Transport_Esmtp_Auth_NTLMAuthenticator~9KQzOjl"/>
      </argument>
    </service>
    <service id="swiftmailer.transport.eventdispatcher.abstract" class="Swift_Events_SimpleEventDispatcher" public="false" abstract="true"/>
    <service id="swiftmailer.transport.replacementfactory" class="Swift_StreamFilters_StringReplacementFilterFactory" public="false"/>
    <service id="swiftmailer.plugin.redirecting.abstract" class="Swift_Plugins_RedirectingPlugin" public="false" abstract="true"/>
    <service id="swiftmailer.plugin.antiflood.abstract" class="Swift_Plugins_AntiFloodPlugin" public="false" abstract="true"/>
    <service id="swiftmailer.plugin.impersonate.abstract" class="Swift_Plugins_ImpersonatePlugin" public="false" abstract="true"/>
    <service id="swiftmailer.plugin.messagelogger.abstract" class="Swift_Plugins_MessageLogger" abstract="true"/>
    <service id="swiftmailer.transport.smtp.abstract" class="Swift_Transport_EsmtpTransport" public="false" abstract="true"/>
    <service id="swiftmailer.transport.spool.abstract" class="Swift_Transport_SpoolTransport" public="false" abstract="true"/>
    <service id="swiftmailer.spool.file.abstract" class="Swift_FileSpool" public="false" abstract="true">
      <argument>/programming/prod-yourneeds/src/../data/swiftmailer/spool</argument>
    </service>
    <service id="swiftmailer.spool.memory.abstract" class="Swift_MemorySpool" public="false" abstract="true"/>
    <service id="swiftmailer.email_sender.listener" class="Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="monolog.logger" on-invalid="null"/>
    </service>
    <service id="swiftmailer.data_collector" class="Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector" public="false">
      <tag name="data_collector" template="@Swiftmailer/Collector/swiftmailer.html.twig" id="swiftmailer" priority="245"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="swiftmailer.command.debug" class="Symfony\Bundle\SwiftmailerBundle\Command\DebugCommand">
      <tag name="console.command" command="debug:swiftmailer"/>
      <call method="setName">
        <argument>debug:swiftmailer</argument>
      </call>
    </service>
    <service id="swiftmailer.command.new_email" class="Symfony\Bundle\SwiftmailerBundle\Command\NewEmailCommand">
      <tag name="console.command" command="swiftmailer:email:send"/>
      <call method="setName">
        <argument>swiftmailer:email:send</argument>
      </call>
    </service>
    <service id="swiftmailer.command.send_email" class="Symfony\Bundle\SwiftmailerBundle\Command\SendEmailCommand">
      <tag name="console.command" command="swiftmailer:spool:send"/>
      <call method="setName">
        <argument>swiftmailer:spool:send</argument>
      </call>
    </service>
    <service id="swiftmailer.mailer.default.transport.eventdispatcher" class="Swift_Events_SimpleEventDispatcher" public="false"/>
    <service id="swiftmailer.mailer.default.transport.dynamic" class="Swift_Transport">
      <argument type="collection">
        <argument key="transport">smtp.gmail.com</argument>
        <argument key="url">%env(MAILER_URL)%</argument>
        <argument key="username">andre.rust@intertects.com</argument>
        <argument key="password">Jari.1010</argument>
        <argument key="host">localhost</argument>
        <argument key="port">465</argument>
        <argument key="timeout">30</argument>
        <argument key="source_ip">null</argument>
        <argument key="local_domain">null</argument>
        <argument key="encryption">null</argument>
        <argument key="auth_mode">login</argument>
        <argument key="command">/usr/sbin/sendmail -bs</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="null"/>
      <argument type="service" id="swiftmailer.mailer.default.transport.eventdispatcher"/>
      <factory class="Symfony\Bundle\SwiftmailerBundle\DependencyInjection\SwiftmailerTransportFactory" method="createTransport"/>
    </service>
    <service id="swiftmailer.mailer.default" class="Swift_Mailer" public="true">
      <argument type="service" id="swiftmailer.mailer.default.transport.spool"/>
    </service>
    <service id="swiftmailer.mailer.default.spool.memory" class="Swift_MemorySpool" public="false"/>
    <service id="swiftmailer.mailer.default.transport.spool" class="Swift_Transport_SpoolTransport" public="false">
      <argument type="service" id="swiftmailer.mailer.default.transport.eventdispatcher"/>
      <argument type="service" id="swiftmailer.mailer.default.spool.memory"/>
      <call method="registerPlugin">
        <argument type="service" id="swiftmailer.mailer.default.plugin.messagelogger"/>
      </call>
    </service>
    <service id="swiftmailer.mailer.default.plugin.messagelogger" class="Swift_Plugins_MessageLogger" public="true">
      <tag name="swiftmailer.default.plugin"/>
    </service>
    <service id="controller_name_converter" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser" public="false">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="kernel"/>
    </service>
    <service id="controller_resolver" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver" public="false">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="controller_name_converter"/>
      <argument type="service" id="monolog.logger.request" on-invalid="ignore"/>
    </service>
    <service id="argument_metadata_factory" class="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory" public="false"/>
    <service id="argument_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver" public="false">
      <argument type="service" id="argument_metadata_factory"/>
      <argument type="iterator">
        <argument type="service" id="argument_resolver.request_attribute"/>
        <argument type="service" id="argument_resolver.request"/>
        <argument type="service" id="argument_resolver.session"/>
        <argument type="service" id="security.user_value_resolver"/>
        <argument type="service" id="argument_resolver.service"/>
        <argument type="service" id="argument_resolver.default"/>
        <argument type="service" id="argument_resolver.variadic"/>
      </argument>
    </service>
    <service id="argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="100"/>
    </service>
    <service id="argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="50"/>
    </service>
    <service id="argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="50"/>
    </service>
    <service id="argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="-50"/>
      <argument type="service" id=".service_locator.MzWCiiK"/>
    </service>
    <service id="argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="-100"/>
    </service>
    <service id="argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="-150"/>
    </service>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>UTF-8</argument>
    </service>
    <service id="streamed_response_listener" class="Symfony\Component\HttpKernel\EventListener\StreamedResponseListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="request_stack"/>
      <argument>de</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="http_exception_listener" class="Symfony\Component\HttpKernel\EventListener\ExceptionListener" public="false">
      <tag name="kernel.event_listener" event="kernel.exception" method="onKernelException" priority="-2048"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>null</argument>
      <argument>null</argument>
      <argument>true</argument>
      <argument>UTF-8</argument>
      <argument>null</argument>
    </service>
    <service id="validate_request_listener" class="Symfony\Component\HttpKernel\EventListener\ValidateRequestListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="resolve_controller_name_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\ResolveControllerNameSubscriber" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="controller_name_converter"/>
    </service>
    <service id="parameter_bag" class="Symfony\Component\DependencyInjection\ParameterBag\ContainerBag" public="false">
      <argument type="service" id="service_container"/>
    </service>
    <service id="event_dispatcher" class="Symfony\Component\EventDispatcher\EventDispatcher" public="true">
      <tag name="container.hot_path"/>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="http_exception_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.controller.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.converter.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.view.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.view</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.view.listener"/>
          <argument>onKernelView</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.cache.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.cache.listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service" id="sensio_framework_extra.security.listener"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service" id="framework_extra_bundle.event.is_granted"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service" id="monolog.handler.console"/>
          <argument>onCommand</argument>
        </argument>
        <argument>255</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service" id="monolog.handler.console"/>
          <argument>onTerminate</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="swiftmailer.email_sender.listener"/>
          <argument>onException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.terminate</argument>
        <argument type="collection">
          <argument type="service" id="swiftmailer.email_sender.listener"/>
          <argument>onTerminate</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service" id="swiftmailer.email_sender.listener"/>
          <argument>onException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service" id="swiftmailer.email_sender.listener"/>
          <argument>onTerminate</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="streamed_response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1024</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="locale_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="locale_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="validate_request_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="resolve_controller_name_subscriber"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>24</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service" id="console.error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service" id="console.error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="test.session.listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>192</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="test.session.listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="session_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="session_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1000</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="session_listener"/>
          <argument>onFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="fragment.listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>48</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="translator_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>10</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="translator_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>32</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-64</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="twig.exception_listener"/>
          <argument>logKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="twig.exception_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="security.rememberme.response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>debug.security.authorization.vote</argument>
        <argument type="collection">
          <argument type="service" id="debug.security.voter.vote_listener"/>
          <argument>onVoterVote</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="debug.security.firewall"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>8</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="debug.security.firewall"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\HttpKernel" public="true">
      <tag name="container.hot_path"/>
      <argument type="service" id="event_dispatcher"/>
      <argument type="service" id="controller_resolver"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="argument_resolver"/>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack" public="true"/>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate" public="true">
      <argument type="tagged" tag="kernel.cache_warmer"/>
      <argument>true</argument>
      <argument>/programming/prod-yourneeds/var/cache/dev/srcApp_KernelDevDebugContainerDeprecations.log</argument>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer" public="true">
      <argument type="tagged" tag="kernel.cache_clearer"/>
    </service>
    <service id="kernel" public="true" synthetic="true"/>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem" public="true"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator" public="false">
      <argument type="service" id="kernel"/>
      <argument>/programming/prod-yourneeds/src/Resources</argument>
      <argument type="collection">
        <argument>/programming/prod-yourneeds/src</argument>
      </argument>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpKernel\UriSigner" public="false">
      <argument>%env(APP_SECRET)%</argument>
    </service>
    <service id="config_cache_factory" class="Symfony\Component\Config\ResourceCheckerConfigCacheFactory" public="false">
      <argument type="tagged" tag="config_cache.resource_checker"/>
    </service>
    <service id="dependency_injection.config.container_parameters_resource_checker" class="Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker" public="false">
      <tag name="config_cache.resource_checker" priority="-980"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="config.resource.self_checking_resource_checker" class="Symfony\Component\Config\Resource\SelfCheckingResourceChecker" public="false">
      <tag name="config_cache.resource_checker" priority="-990"/>
    </service>
    <service id="services_resetter" class="Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter" public="true">
      <argument type="iterator">
        <argument key="form.type.entity" type="service" id="form.type.entity" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.email_sender.listener" type="service" id="swiftmailer.email_sender.listener" on-invalid="ignore_uninitialized"/>
        <argument key="http_exception_listener" type="service" id="http_exception_listener" on-invalid="ignore_uninitialized"/>
        <argument key="security.token_storage" type="service" id="security.token_storage" on-invalid="ignore_uninitialized"/>
      </argument>
      <argument type="collection">
        <argument key="form.type.entity">reset</argument>
        <argument key="swiftmailer.email_sender.listener">reset</argument>
        <argument key="http_exception_listener">reset</argument>
        <argument key="security.token_storage">setToken</argument>
      </argument>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler" public="false">
      <argument type="service" id=".service_locator.gmwRZ3h"/>
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer" public="false">
      <tag name="kernel.fragment_renderer" alias="inline"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="fragment.renderer.hinclude" class="Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer" public="false">
      <tag name="kernel.fragment_renderer" alias="hinclude"/>
      <argument type="service" id="twig"/>
      <argument type="service" id="uri_signer"/>
      <argument></argument>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="console.error_listener" class="Symfony\Component\Console\EventListener\ErrorListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="console"/>
      <argument type="service" id="monolog.logger.console" on-invalid="null"/>
    </service>
    <service id="console.command.about" class="Symfony\Bundle\FrameworkBundle\Command\AboutCommand" public="false">
      <tag name="console.command" command="about"/>
      <call method="setName">
        <argument>about</argument>
      </call>
    </service>
    <service id="console.command.assets_install" class="Symfony\Bundle\FrameworkBundle\Command\AssetsInstallCommand" public="false">
      <tag name="console.command" command="assets:install"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>assets:install</argument>
      </call>
    </service>
    <service id="console.command.cache_clear" class="Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand" public="false">
      <tag name="console.command" command="cache:clear"/>
      <argument type="service" id="cache_clearer"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>cache:clear</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_clear" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand" public="false">
      <tag name="console.command" command="cache:pool:clear"/>
      <argument type="service" id="cache.global_clearer"/>
      <call method="setName">
        <argument>cache:pool:clear</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_prune" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand" public="false">
      <tag name="console.command" command="cache:pool:prune"/>
      <argument type="iterator"/>
      <call method="setName">
        <argument>cache:pool:prune</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_delete" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand" public="false">
      <tag name="console.command" command="cache:pool:delete"/>
      <argument type="service" id="cache.global_clearer"/>
      <call method="setName">
        <argument>cache:pool:delete</argument>
      </call>
    </service>
    <service id="console.command.cache_warmup" class="Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand" public="false">
      <tag name="console.command" command="cache:warmup"/>
      <argument type="service" id="cache_warmer"/>
      <call method="setName">
        <argument>cache:warmup</argument>
      </call>
    </service>
    <service id="console.command.config_debug" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand" public="false">
      <tag name="console.command" command="debug:config"/>
      <call method="setName">
        <argument>debug:config</argument>
      </call>
    </service>
    <service id="console.command.config_dump_reference" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand" public="false">
      <tag name="console.command" command="config:dump-reference"/>
      <call method="setName">
        <argument>config:dump-reference</argument>
      </call>
    </service>
    <service id="console.command.container_debug" class="Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand" public="false">
      <tag name="console.command" command="debug:container"/>
      <call method="setName">
        <argument>debug:container</argument>
      </call>
    </service>
    <service id="console.command.debug_autowiring" class="Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand" public="false">
      <tag name="console.command" command="debug:autowiring"/>
      <call method="setName">
        <argument>debug:autowiring</argument>
      </call>
    </service>
    <service id="console.command.event_dispatcher_debug" class="Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand" public="false">
      <tag name="console.command" command="debug:event-dispatcher"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setName">
        <argument>debug:event-dispatcher</argument>
      </call>
    </service>
    <service id="console.command.router_debug" class="Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand" public="false">
      <tag name="console.command" command="debug:router"/>
      <argument type="service" id="router.default"/>
      <call method="setName">
        <argument>debug:router</argument>
      </call>
    </service>
    <service id="console.command.router_match" class="Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand" public="false">
      <tag name="console.command" command="router:match"/>
      <argument type="service" id="router.default"/>
      <call method="setName">
        <argument>router:match</argument>
      </call>
    </service>
    <service id="console.command.translation_debug" class="Symfony\Bundle\FrameworkBundle\Command\TranslationDebugCommand" public="false">
      <tag name="console.command" command="debug:translation"/>
      <argument type="service" id="translator.default"/>
      <argument type="service" id="translation.reader"/>
      <argument type="service" id="translation.extractor"/>
      <argument>/programming/prod-yourneeds/translations</argument>
      <argument>/programming/prod-yourneeds/templates</argument>
      <call method="setName">
        <argument>debug:translation</argument>
      </call>
    </service>
    <service id="console.command.translation_update" class="Symfony\Bundle\FrameworkBundle\Command\TranslationUpdateCommand" public="false">
      <tag name="console.command" command="translation:update"/>
      <argument type="service" id="translation.writer"/>
      <argument type="service" id="translation.reader"/>
      <argument type="service" id="translation.extractor"/>
      <argument>de</argument>
      <argument>/programming/prod-yourneeds/translations</argument>
      <argument>/programming/prod-yourneeds/templates</argument>
      <call method="setName">
        <argument>translation:update</argument>
      </call>
    </service>
    <service id="console.command.xliff_lint" class="Symfony\Bundle\FrameworkBundle\Command\XliffLintCommand" public="false">
      <tag name="console.command" command="lint:xliff"/>
      <call method="setName">
        <argument>lint:xliff</argument>
      </call>
    </service>
    <service id="console.command.yaml_lint" class="Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand" public="false">
      <tag name="console.command" command="lint:yaml"/>
      <call method="setName">
        <argument>lint:yaml</argument>
      </call>
    </service>
    <service id="console.command.form_debug" class="Symfony\Component\Form\Command\DebugCommand" public="false">
      <tag name="console.command" command="debug:form"/>
      <argument type="service" id="form.registry"/>
      <argument type="collection">
        <argument>Symfony\Component\Form\Extension\Core\Type</argument>
        <argument>AppBundle\Form\Message</argument>
        <argument>AppBundle\Form\Project</argument>
        <argument>AppBundle\Form\Type</argument>
        <argument>Main\UserBundle\Form\Address\Admin</argument>
        <argument>Main\UserBundle\Form\Bank\Admin</argument>
        <argument>Main\UserBundle\Form</argument>
        <argument>Main\UserBundle\Form\User\Admin</argument>
        <argument>Main\InsuranceBundle\Form\Company\Admin</argument>
        <argument>Main\InsuranceBundle\Form\Contract</argument>
        <argument>Main\InsuranceBundle\Form\Tariff\Admin</argument>
        <argument>Symfony\Bridge\Doctrine\Form\Type</argument>
      </argument>
      <argument type="collection">
        <argument>AppBundle\Form\Message\EditMessageFormType</argument>
        <argument>AppBundle\Form\Project\EditProjectFormType</argument>
        <argument>AppBundle\Form\Type\TagFormType</argument>
        <argument>Main\UserBundle\Form\Address\Admin\EditAddressFormType</argument>
        <argument>Main\UserBundle\Form\Address\Admin\NewAddressFormType</argument>
        <argument>Main\UserBundle\Form\Bank\Admin\EditBankFormType</argument>
        <argument>Main\UserBundle\Form\Bank\Admin\NewBankFormType</argument>
        <argument>Main\UserBundle\Form\LoginForm</argument>
        <argument>Main\UserBundle\Form\NewsletterFormType</argument>
        <argument>Main\UserBundle\Form\RegistrationForm</argument>
        <argument>Main\UserBundle\Form\User\Admin\EditUserFormType</argument>
        <argument>Main\UserBundle\Form\User\Admin\NewUserFormType</argument>
        <argument>Main\UserBundle\Form\UserRegistrationForm</argument>
        <argument>Main\InsuranceBundle\Form\Company\Admin\EditCompanyFormType</argument>
        <argument>Main\InsuranceBundle\Form\Company\Admin\NewCompanyFormType</argument>
        <argument>Main\InsuranceBundle\Form\Contract\EditContractFormType</argument>
        <argument>Main\InsuranceBundle\Form\Tariff\Admin\EditTariffFormType</argument>
        <argument>Main\InsuranceBundle\Form\Tariff\Admin\NewTariffFormType</argument>
        <argument>Symfony\Bridge\Doctrine\Form\Type\EntityType</argument>
        <argument>Symfony\Component\Form\Extension\Core\Type\FormType</argument>
        <argument>Symfony\Component\Form\Extension\Core\Type\ChoiceType</argument>
      </argument>
      <argument type="collection">
        <argument>AppBundle\Form\TypeExtension\HelpFormExtension</argument>
        <argument>Symfony\Component\Form\Extension\Core\Type\TransformationFailureExtension</argument>
        <argument>Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension</argument>
        <argument>Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension</argument>
      </argument>
      <argument type="collection">
        <argument>Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser</argument>
        <argument>Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser</argument>
      </argument>
      <call method="setName">
        <argument>debug:form</argument>
      </call>
    </service>
    <service id="cache.app" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="true">
      <tag name="cache.pool"/>
      <argument>Y0vSc4UAQn</argument>
      <argument>0</argument>
      <argument>/programming/prod-yourneeds/var/cache/dev/pools</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.app.simple" class="Symfony\Component\Cache\Simple\Psr6Cache" public="false">
      <argument type="service" id="cache.app"/>
    </service>
    <service id="cache.app.taggable" class="Symfony\Component\Cache\Adapter\TagAwareAdapter" public="false">
      <argument type="service" id="cache.app"/>
    </service>
    <service id="cache.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="true">
      <tag name="cache.pool"/>
      <argument>08zCRht+Lz</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/programming/prod-yourneeds/var/cache/dev/pools</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.validator" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <argument>ljRi-b7nvK</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/programming/prod-yourneeds/var/cache/dev/pools</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.serializer" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <argument>c2TJeHLvl8</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/programming/prod-yourneeds/var/cache/dev/pools</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.annotations" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <argument>NlCrG1yAW1</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/programming/prod-yourneeds/var/cache/dev/pools</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.system_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/programming/prod-yourneeds/var/cache/dev/pools</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.apcu" class="Symfony\Component\Cache\Adapter\ApcuAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.doctrine" class="Symfony\Component\Cache\Adapter\DoctrineAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_doctrine_provider" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.filesystem" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>/programming/prod-yourneeds/var/cache/dev/pools</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.psr6" class="Symfony\Component\Cache\Adapter\ProxyAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_psr6_provider" clearer="cache.default_clearer"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
    </service>
    <service id="cache.adapter.redis" class="Symfony\Component\Cache\Adapter\RedisAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.memcached" class="Symfony\Component\Cache\Adapter\MemcachedAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_memcached_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.pdo" class="Symfony\Component\Cache\Adapter\PdoAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_pdo_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.array" class="Symfony\Component\Cache\Adapter\ArrayAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.default_marshaller" class="Symfony\Component\Cache\Marshaller\DefaultMarshaller" public="false">
      <argument>null</argument>
    </service>
    <service id="cache.default_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="false">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.system_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <tag name="kernel.cache_clearer"/>
      <argument type="collection">
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_expression_language" type="service" id="cache.security_expression_language" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.global_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_expression_language" type="service" id="cache.security_expression_language" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="identity_translator" class="Symfony\Component\Translation\IdentityTranslator" public="false"/>
    <service id="translator.selector" class="Symfony\Component\Translation\MessageSelector" public="false">
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.2, use "identity_translator" instead.</deprecated>
    </service>
    <service id="test.client.history" class="Symfony\Component\BrowserKit\History" shared="false" public="false"/>
    <service id="test.client.cookiejar" class="Symfony\Component\BrowserKit\CookieJar" shared="false" public="false"/>
    <service id="test.session.listener" class="Symfony\Component\HttpKernel\EventListener\TestSessionListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id=".service_locator.XzhyEv6"/>
      <argument>%session.storage.options%</argument>
    </service>
    <service id="test.service_container" class="Symfony\Bundle\FrameworkBundle\Test\TestContainer" public="true">
      <argument type="service" id="kernel"/>
      <argument>test.private_services_locator</argument>
    </service>
    <service id="test.private_services_locator" class="Symfony\Component\DependencyInjection\ServiceLocator" public="true">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="AppBundle\AppBundle" type="service" id="AppBundle\AppBundle" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Form\Message\EditMessageFormType" type="service" id="AppBundle\Form\Message\EditMessageFormType" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Form\Project\EditProjectFormType" type="service" id="AppBundle\Form\Project\EditProjectFormType" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Form\TypeExtension\HelpFormExtension" type="service" id="AppBundle\Form\TypeExtension\HelpFormExtension" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Form\Type\TagFormType" type="service" id="AppBundle\Form\Type\TagFormType" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Helper\ConstantHelper" type="service" id="AppBundle\Helper\ConstantHelper" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Helper\DateHelper" type="service" id="AppBundle\Helper\DateHelper" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Helper\DocumentHelper" type="service" id="AppBundle\Helper\DocumentHelper" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Helper\DocumentStructureHelper" type="service" id="AppBundle\Helper\DocumentStructureHelper" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Helper\MediaHelper" type="service" id="AppBundle\Helper\MediaHelper" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Helper\StringHelper" type="service" id="AppBundle\Helper\StringHelper" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Repository\DocumentRepository" type="service" id="AppBundle\Repository\DocumentRepository" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Repository\DocumentTypeRepository" type="service" id="AppBundle\Repository\DocumentTypeRepository" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Repository\FaqQuestionRepository" type="service" id="AppBundle\Repository\FaqQuestionRepository" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Repository\MediaRepository" type="service" id="AppBundle\Repository\MediaRepository" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Repository\MediaTypeRepository" type="service" id="AppBundle\Repository\MediaTypeRepository" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Repository\MessageRepository" type="service" id="AppBundle\Repository\MessageRepository" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Repository\MessageTypeRepository" type="service" id="AppBundle\Repository\MessageTypeRepository" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Repository\ProjectRepository" type="service" id="AppBundle\Repository\ProjectRepository" on-invalid="ignore_uninitialized"/>
        <argument key="AppBundle\Service\UploadService" type="service" id="AppBundle\Service\UploadService" on-invalid="ignore_uninitialized"/>
        <argument key="Doctrine\Common\Annotations\Reader" type="service" id="annotations.cached_reader" on-invalid="ignore_uninitialized"/>
        <argument key="Doctrine\Common\Persistence\ManagerRegistry" type="service" id="doctrine" on-invalid="ignore_uninitialized"/>
        <argument key="Doctrine\Common\Persistence\ObjectManager" type="service" id="doctrine.orm.default_entity_manager" on-invalid="ignore_uninitialized"/>
        <argument key="Doctrine\DBAL\Connection" type="service" id="doctrine.dbal.default_connection" on-invalid="ignore_uninitialized"/>
        <argument key="Doctrine\DBAL\Driver\Connection" type="service" id="doctrine.dbal.default_connection" on-invalid="ignore_uninitialized"/>
        <argument key="Doctrine\ORM\EntityManagerInterface" type="service" id="doctrine.orm.default_entity_manager" on-invalid="ignore_uninitialized"/>
        <argument key="JMS\Serializer\ArrayTransformerInterface" type="service" id="jms_serializer.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="JMS\Serializer\SerializerInterface" type="service" id="jms_serializer.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="Knp\Bundle\MarkdownBundle\MarkdownParserInterface" type="service" id="markdown.parser.max" on-invalid="ignore_uninitialized"/>
        <argument key="Knp\Snappy\Image" type="service" id="knp_snappy.image" on-invalid="ignore_uninitialized"/>
        <argument key="Knp\Snappy\Pdf" type="service" id="knp_snappy.pdf" on-invalid="ignore_uninitialized"/>
        <argument key="Main\AdminBundle\DependencyInjection\Configuration" type="service" id="Main\AdminBundle\DependencyInjection\Configuration" on-invalid="ignore_uninitialized"/>
        <argument key="Main\AdminBundle\DependencyInjection\MainAdminExtension" type="service" id="Main\AdminBundle\DependencyInjection\MainAdminExtension" on-invalid="ignore_uninitialized"/>
        <argument key="Main\AdminBundle\Helper\CurlConnector" type="service" id="Main\AdminBundle\Helper\CurlConnector" on-invalid="ignore_uninitialized"/>
        <argument key="Main\AdminBundle\Helper\MM\AddressImportHelper" type="service" id="Main\AdminBundle\Helper\MM\AddressImportHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\AdminBundle\Helper\MM\AnimalDogBreedImportHelper" type="service" id="Main\AdminBundle\Helper\MM\AnimalDogBreedImportHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\AdminBundle\Helper\MM\JobImportHelper" type="service" id="Main\AdminBundle\Helper\MM\JobImportHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\AdminBundle\Helper\MM\TariffImportHelper" type="service" id="Main\AdminBundle\Helper\MM\TariffImportHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\AdminBundle\MainAdminBundle" type="service" id="Main\AdminBundle\MainAdminBundle" on-invalid="ignore_uninitialized"/>
        <argument key="Main\AdminBundle\Repository\AnimalDogBreedRepository" type="service" id="Main\AdminBundle\Repository\AnimalDogBreedRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\DependencyInjection\Configuration" type="service" id="Main\InsuranceBundle\DependencyInjection\Configuration" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\DependencyInjection\MainInsuranceExtension" type="service" id="Main\InsuranceBundle\DependencyInjection\MainInsuranceExtension" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Form\Company\Admin\EditCompanyFormType" type="service" id="Main\InsuranceBundle\Form\Company\Admin\EditCompanyFormType" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Form\Company\Admin\NewCompanyFormType" type="service" id="Main\InsuranceBundle\Form\Company\Admin\NewCompanyFormType" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Form\Contract\EditContractFormType" type="service" id="Main\InsuranceBundle\Form\Contract\EditContractFormType" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Form\Tariff\Admin\EditTariffFormType" type="service" id="Main\InsuranceBundle\Form\Tariff\Admin\EditTariffFormType" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Form\Tariff\Admin\NewTariffFormType" type="service" id="Main\InsuranceBundle\Form\Tariff\Admin\NewTariffFormType" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\ApiResultHelper" type="service" id="Main\InsuranceBundle\Helper\Api\MM\ApiResultHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Map\AbstractApiToTariffMap" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Map\AbstractApiToTariffMap" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Map\AciApiToTariffMap" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Map\AciApiToTariffMap" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Map\AliApiToTariffMap" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Map\AliApiToTariffMap" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Map\HciApiToTariffMap" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Map\HciApiToTariffMap" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Map\LpiApiToTariffMap" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Map\LpiApiToTariffMap" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Map\PliApiToTariffMap" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Map\PliApiToTariffMap" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Map\RbiApiToTariffMap" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Map\RbiApiToTariffMap" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Structure\AbstractApiStructure" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Structure\AbstractApiStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Structure\AciApiStructure" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Structure\AciApiStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Structure\AliApiStructure" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Structure\AliApiStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Structure\HciApiStructure" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Structure\HciApiStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Structure\LpiApiStructure" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Structure\LpiApiStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Structure\PliApiStructure" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Structure\PliApiStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Api\MM\Structure\RbiApiStructure" type="service" id="Main\InsuranceBundle\Helper\Api\MM\Structure\RbiApiStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Company\CompanyHelper" type="service" id="Main\InsuranceBundle\Helper\Company\CompanyHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Damage\AbstractDamageReportHelper" type="service" id="Main\InsuranceBundle\Helper\Damage\AbstractDamageReportHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Damage\AciDamageReportHelper" type="service" id="Main\InsuranceBundle\Helper\Damage\AciDamageReportHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Damage\AliDamageReportHelper" type="service" id="Main\InsuranceBundle\Helper\Damage\AliDamageReportHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Damage\HciDamageReportHelper" type="service" id="Main\InsuranceBundle\Helper\Damage\HciDamageReportHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Damage\LpiDamageReportHelper" type="service" id="Main\InsuranceBundle\Helper\Damage\LpiDamageReportHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Damage\PliDamageReportHelper" type="service" id="Main\InsuranceBundle\Helper\Damage\PliDamageReportHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Damage\RbiDamageReportHelper" type="service" id="Main\InsuranceBundle\Helper\Damage\RbiDamageReportHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Entity\TariffTypeHelper" type="service" id="Main\InsuranceBundle\Helper\Entity\TariffTypeHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\FileParserHelper" type="service" id="Main\InsuranceBundle\Helper\FileParserHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Filter\HciResponseFilter" type="service" id="Main\InsuranceBundle\Helper\Filter\HciResponseFilter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Filter\PliResponseFilter" type="service" id="Main\InsuranceBundle\Helper\Filter\PliResponseFilter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Mapping\Companies\LogoNameMapping" type="service" id="Main\InsuranceBundle\Helper\Mapping\Companies\LogoNameMapping" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Mapping\Tariff\AciTariffStructure" type="service" id="Main\InsuranceBundle\Helper\Mapping\Tariff\AciTariffStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Mapping\Tariff\AliTariffStructure" type="service" id="Main\InsuranceBundle\Helper\Mapping\Tariff\AliTariffStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Mapping\Tariff\HciTariffStructure" type="service" id="Main\InsuranceBundle\Helper\Mapping\Tariff\HciTariffStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Mapping\Tariff\LpiTariffStructure" type="service" id="Main\InsuranceBundle\Helper\Mapping\Tariff\LpiTariffStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Mapping\Tariff\PliTariffStructure" type="service" id="Main\InsuranceBundle\Helper\Mapping\Tariff\PliTariffStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Mapping\Tariff\RbiTariffStructure" type="service" id="Main\InsuranceBundle\Helper\Mapping\Tariff\RbiTariffStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Parser\Map\TariffMapStructure" type="service" id="Main\InsuranceBundle\Helper\Parser\Map\TariffMapStructure" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Parser\Map\TariffMapStructurePli" type="service" id="Main\InsuranceBundle\Helper\Parser\Map\TariffMapStructurePli" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Parser\Map\TariffMapStructureRate" type="service" id="Main\InsuranceBundle\Helper\Parser\Map\TariffMapStructureRate" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Parser\Result\TariffToResultParser" type="service" id="Main\InsuranceBundle\Helper\Parser\Result\TariffToResultParser" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Parser\SurveyToTariffNewParser" type="service" id="Main\InsuranceBundle\Helper\Parser\SurveyToTariffNewParser" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Parser\SurveyToTariffParser" type="service" id="Main\InsuranceBundle\Helper\Parser\SurveyToTariffParser" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Parser\TariffSurveyParser" type="service" id="Main\InsuranceBundle\Helper\Parser\TariffSurveyParser" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Parser\TariffSurveyParserHelper" type="service" id="Main\InsuranceBundle\Helper\Parser\TariffSurveyParserHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Parser\TariffToSurveyParser" type="service" id="Main\InsuranceBundle\Helper\Parser\TariffToSurveyParser" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Structure\DamageStructureHelper" type="service" id="Main\InsuranceBundle\Helper\Structure\DamageStructureHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Structure\SurveyStructureHelper" type="service" id="Main\InsuranceBundle\Helper\Structure\SurveyStructureHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\TariffParserHelper" type="service" id="Main\InsuranceBundle\Helper\TariffParserHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Tariff\TariffHelper" type="service" id="Main\InsuranceBundle\Helper\Tariff\TariffHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Url\AciUrlBuilder" type="service" id="Main\InsuranceBundle\Helper\Url\AciUrlBuilder" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Url\AliUrlBuilder" type="service" id="Main\InsuranceBundle\Helper\Url\AliUrlBuilder" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Url\Application\AciApplicationUrlBuilder" type="service" id="Main\InsuranceBundle\Helper\Url\Application\AciApplicationUrlBuilder" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Url\Application\AliApplicationUrlBuilder" type="service" id="Main\InsuranceBundle\Helper\Url\Application\AliApplicationUrlBuilder" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Url\Application\HciApplicationUrlBuilder" type="service" id="Main\InsuranceBundle\Helper\Url\Application\HciApplicationUrlBuilder" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Url\Application\LpiApplicationUrlBuilder" type="service" id="Main\InsuranceBundle\Helper\Url\Application\LpiApplicationUrlBuilder" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Url\Application\PliApplicationUrlBuilder" type="service" id="Main\InsuranceBundle\Helper\Url\Application\PliApplicationUrlBuilder" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Url\Application\RbiApplicationUrlBuilder" type="service" id="Main\InsuranceBundle\Helper\Url\Application\RbiApplicationUrlBuilder" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Url\HciUrlBuilder" type="service" id="Main\InsuranceBundle\Helper\Url\HciUrlBuilder" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Url\LpiUrlBuilder" type="service" id="Main\InsuranceBundle\Helper\Url\LpiUrlBuilder" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Url\PliUrlBuilder" type="service" id="Main\InsuranceBundle\Helper\Url\PliUrlBuilder" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Helper\Url\RbiUrlBuilder" type="service" id="Main\InsuranceBundle\Helper\Url\RbiUrlBuilder" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\MainInsuranceBundle" type="service" id="Main\InsuranceBundle\MainInsuranceBundle" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\CompanyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\ContractRepository" type="service" id="Main\InsuranceBundle\Repository\ContractRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\DamageDocumentRepository" type="service" id="Main\InsuranceBundle\Repository\DamageDocumentRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\DamageMediaRepository" type="service" id="Main\InsuranceBundle\Repository\DamageMediaRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\DamageRepository" type="service" id="Main\InsuranceBundle\Repository\DamageRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\MMContractRepository" type="service" id="Main\InsuranceBundle\Repository\MMContractRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\ProcessActivityRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessActivityRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\ProcessRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\ProcessStatusRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessStatusRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\ProcessTypeRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessTypeRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\StructureRepository" type="service" id="Main\InsuranceBundle\Repository\StructureRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\SurveyQuestionRepository" type="service" id="Main\InsuranceBundle\Repository\SurveyQuestionRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\TargetGroupRepository" type="service" id="Main\InsuranceBundle\Repository\TargetGroupRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\TariffRateRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRateRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\TariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\TariffTargetGroupRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTargetGroupRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\TariffTypeRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTypeRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\InsuranceBundle\Repository\TypeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\DependencyInjection\Configuration" type="service" id="Main\UserBundle\DependencyInjection\Configuration" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\DependencyInjection\MainUserExtension" type="service" id="Main\UserBundle\DependencyInjection\MainUserExtension" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Doctrine\HashPasswordListener" type="service" id="Main\UserBundle\Doctrine\HashPasswordListener" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Form\Address\Admin\EditAddressFormType" type="service" id="Main\UserBundle\Form\Address\Admin\EditAddressFormType" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Form\Address\Admin\NewAddressFormType" type="service" id="Main\UserBundle\Form\Address\Admin\NewAddressFormType" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Form\Bank\Admin\EditBankFormType" type="service" id="Main\UserBundle\Form\Bank\Admin\EditBankFormType" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Form\Bank\Admin\NewBankFormType" type="service" id="Main\UserBundle\Form\Bank\Admin\NewBankFormType" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Form\LoginForm" type="service" id="Main\UserBundle\Form\LoginForm" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Form\NewsletterFormType" type="service" id="Main\UserBundle\Form\NewsletterFormType" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Form\RegistrationForm" type="service" id="Main\UserBundle\Form\RegistrationForm" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Form\UserRegistrationForm" type="service" id="Main\UserBundle\Form\UserRegistrationForm" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Form\User\Admin\EditUserFormType" type="service" id="Main\UserBundle\Form\User\Admin\EditUserFormType" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Form\User\Admin\NewUserFormType" type="service" id="Main\UserBundle\Form\User\Admin\NewUserFormType" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Helper\AddressHelper" type="service" id="Main\UserBundle\Helper\AddressHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Helper\BankAccountHelper" type="service" id="Main\UserBundle\Helper\BankAccountHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Helper\ManagerHelper" type="service" id="Main\UserBundle\Helper\ManagerHelper" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\MainUserBundle" type="service" id="Main\UserBundle\MainUserBundle" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\AchievementRepository" type="service" id="Main\UserBundle\Repository\AchievementRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\ActivityRepository" type="service" id="Main\UserBundle\Repository\ActivityRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\AddressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\AddressTypeRepository" type="service" id="Main\UserBundle\Repository\AddressTypeRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\BankAccountRepository" type="service" id="Main\UserBundle\Repository\BankAccountRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\BenefitPartnerRepository" type="service" id="Main\UserBundle\Repository\BenefitPartnerRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\CityRepository" type="service" id="Main\UserBundle\Repository\CityRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\CountryRepository" type="service" id="Main\UserBundle\Repository\CountryRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\FamilyStatusRepository" type="service" id="Main\UserBundle\Repository\FamilyStatusRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\JobGroupRepository" type="service" id="Main\UserBundle\Repository\JobGroupRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\TitleRepository" type="service" id="Main\UserBundle\Repository\TitleRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\UserActivityRepository" type="service" id="Main\UserBundle\Repository\UserActivityRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\UserMediaRepository" type="service" id="Main\UserBundle\Repository\UserMediaRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\UserProjectRepository" type="service" id="Main\UserBundle\Repository\UserProjectRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\UserRepository" type="service" id="Main\UserBundle\Repository\UserRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Repository\UserSecurityLogRepository" type="service" id="Main\UserBundle\Repository\UserSecurityLogRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\LoginFormAuthentificator" type="service" id="Main\UserBundle\Security\LoginFormAuthentificator" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" type="service" id="Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\CanSendMessageVoter" type="service" id="Main\UserBundle\Security\Voter\CanSendMessageVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\ChoosePaymentVoter" type="service" id="Main\UserBundle\Security\Voter\ChoosePaymentVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\DoAdminImportVoter" type="service" id="Main\UserBundle\Security\Voter\DoAdminImportVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\DoApplicationVoter" type="service" id="Main\UserBundle\Security\Voter\DoApplicationVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\DoNewContractVoter" type="service" id="Main\UserBundle\Security\Voter\DoNewContractVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\DoUseBuilderVoter" type="service" id="Main\UserBundle\Security\Voter\DoUseBuilderVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\EditBenefitVoter" type="service" id="Main\UserBundle\Security\Voter\EditBenefitVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\SaveSurveyVoter" type="service" id="Main\UserBundle\Security\Voter\SaveSurveyVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\UseBenefitVoter" type="service" id="Main\UserBundle\Security\Voter\UseBenefitVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" type="service" id="Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\ViewDoSurveyVoter" type="service" id="Main\UserBundle\Security\Voter\ViewDoSurveyVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\ViewOwnContractsVoter" type="service" id="Main\UserBundle\Security\Voter\ViewOwnContractsVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\ViewProfileVoter" type="service" id="Main\UserBundle\Security\Voter\ViewProfileVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Main\UserBundle\Security\Voter\ViewSurveyResultVoter" type="service" id="Main\UserBundle\Security\Voter\ViewSurveyResultVoter" on-invalid="ignore_uninitialized"/>
        <argument key="Michelf\MarkdownInterface" type="service" id="markdown.parser.max" on-invalid="ignore_uninitialized"/>
        <argument key="Psr\Cache\CacheItemPoolInterface" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="Psr\Container\ContainerInterface" type="service" id="service_container" on-invalid="ignore_uninitialized"/>
        <argument key="Psr\Container\ContainerInterface $parameterBag" type="service" id="parameter_bag" on-invalid="ignore_uninitialized"/>
        <argument key="Psr\Log\LoggerInterface" type="service" id="monolog.logger" on-invalid="ignore_uninitialized"/>
        <argument key="Psr\SimpleCache\CacheInterface" type="service" id="cache.app.simple" on-invalid="ignore_uninitialized"/>
        <argument key="Swift_Mailer" type="service" id="swiftmailer.mailer.default" on-invalid="ignore_uninitialized"/>
        <argument key="Swift_Spool" type="service" id="swiftmailer.mailer.default.spool.memory" on-invalid="ignore_uninitialized"/>
        <argument key="Swift_Transport" type="service" id="swiftmailer.mailer.default.transport.spool" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Bridge\Doctrine\RegistryInterface" type="service" id="doctrine" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Asset\Packages" type="service" id="assets.packages" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Cache\Adapter\AdapterInterface" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\DependencyInjection\ContainerInterface" type="service" id="service_container" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface" type="service" id="parameter_bag" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface" type="service" id="parameter_bag" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\EventDispatcher\EventDispatcherInterface" type="service" id="event_dispatcher" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Filesystem\Filesystem" type="service" id="filesystem" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Form\FormFactoryInterface" type="service" id="form.factory" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Form\FormRegistryInterface" type="service" id="form.registry" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Form\ResolvedFormTypeFactoryInterface" type="service" id="form.resolved_type_factory" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpFoundation\RequestStack" type="service" id="request_stack" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface" type="service" id="session.flash_bag" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpFoundation\Session\SessionInterface" type="service" id="session" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface" type="service" id="session.storage.mock_file" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpKernel\Config\FileLocator" type="service" id="file_locator" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" type="service" id="debug.file_link_formatter" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpKernel\HttpKernelInterface" type="service" id="http_kernel" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpKernel\KernelInterface" type="service" id="kernel" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\PropertyAccess\PropertyAccessorInterface" type="service" id="property_accessor" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Routing\Generator\UrlGeneratorInterface" type="service" id="router.default" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Routing\Matcher\UrlMatcherInterface" type="service" id="router.default" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Routing\RequestContext" type="service" id="router.request_context" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Routing\RequestContextAwareInterface" type="service" id="router.default" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Routing\RouterInterface" type="service" id="router.default" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Core\Authentication\AuthenticationManagerInterface" type="service" id="security.authentication.manager" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface" type="service" id="security.token_storage" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Core\Authorization\AccessDecisionManagerInterface" type="service" id="debug.security.access.decision_manager" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface" type="service" id="security.authorization_checker" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Core\Encoder\EncoderFactoryInterface" type="service" id="security.encoder_factory.generic" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface" type="service" id="security.user_password_encoder.generic" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Core\Role\RoleHierarchyInterface" type="service" id="security.role_hierarchy" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Core\Security" type="service" id="security.helper" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Core\User\UserCheckerInterface" type="service" id="security.user_checker" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Core\User\UserProviderInterface" type="service" id="security.user.provider.concrete.our_users" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Csrf\CsrfTokenManagerInterface" type="service" id="security.csrf.token_manager" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Csrf\TokenGenerator\TokenGeneratorInterface" type="service" id="security.csrf.token_generator" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Csrf\TokenStorage\TokenStorageInterface" type="service" id="security.csrf.token_storage" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Guard\GuardAuthenticatorHandler" type="service" id="security.authentication.guard_handler" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Http\Authentication\AuthenticationUtils" type="service" id="security.authentication_utils" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Http\Firewall" type="service" id="debug.security.firewall" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Http\HttpUtils" type="service" id="security.http_utils" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategyInterface" type="service" id="security.authentication.session_strategy" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Translation\Extractor\ExtractorInterface" type="service" id="translation.extractor" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Translation\Reader\TranslationReaderInterface" type="service" id="translation.reader" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Translation\TranslatorInterface" type="service" id="translator.default" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Translation\Writer\TranslationWriterInterface" type="service" id="translation.writer" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Validator\Validator\ValidatorInterface" type="service" id="validator" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Contracts\Cache\CacheInterface" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Contracts\Cache\TagAwareCacheInterface" type="service" id="cache.app.taggable" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Contracts\Translation\TranslatorInterface" type="service" id="translator.default" on-invalid="ignore_uninitialized"/>
        <argument key="Twig\Environment" type="service" id="twig" on-invalid="ignore_uninitialized"/>
        <argument key="Twig_Environment" type="service" id="twig" on-invalid="ignore_uninitialized"/>
        <argument key="annotation_reader" type="service" id="annotations.cached_reader" on-invalid="ignore_uninitialized"/>
        <argument key="annotations.cache" type="service" id="annotations.cache" on-invalid="ignore_uninitialized"/>
        <argument key="annotations.cache_warmer" type="service" id="annotations.cache_warmer" on-invalid="ignore_uninitialized"/>
        <argument key="annotations.cached_reader" type="service" id="annotations.cached_reader" on-invalid="ignore_uninitialized"/>
        <argument key="annotations.dummy_registry" type="service" id="annotations.dummy_registry" on-invalid="ignore_uninitialized"/>
        <argument key="annotations.filesystem_cache" type="service" id="annotations.filesystem_cache" on-invalid="ignore_uninitialized"/>
        <argument key="annotations.reader" type="service" id="annotations.reader" on-invalid="ignore_uninitialized"/>
        <argument key="app.security.voter.can_upload_document" type="service" id="app.security.voter.can_upload_document" on-invalid="ignore_uninitialized"/>
        <argument key="app.security.voter.choose_payment" type="service" id="app.security.voter.choose_payment" on-invalid="ignore_uninitialized"/>
        <argument key="app.security.voter.do_admin_import" type="service" id="app.security.voter.do_admin_import" on-invalid="ignore_uninitialized"/>
        <argument key="app.security.voter.do_application" type="service" id="app.security.voter.do_application" on-invalid="ignore_uninitialized"/>
        <argument key="app.security.voter.do_use_builder" type="service" id="app.security.voter.do_use_builder" on-invalid="ignore_uninitialized"/>
        <argument key="app.security.voter.edit_benefit" type="service" id="app.security.voter.edit_benefit" on-invalid="ignore_uninitialized"/>
        <argument key="app.security.voter.save_survey" type="service" id="app.security.voter.save_survey" on-invalid="ignore_uninitialized"/>
        <argument key="app.security.voter.use_benefit" type="service" id="app.security.voter.use_benefit" on-invalid="ignore_uninitialized"/>
        <argument key="app.security.voter.view_choose_survey" type="service" id="app.security.voter.view_choose_survey" on-invalid="ignore_uninitialized"/>
        <argument key="app.security.voter.view_do_survey" type="service" id="app.security.voter.view_do_survey" on-invalid="ignore_uninitialized"/>
        <argument key="app.security.voter.view_profile" type="service" id="app.security.voter.view_profile" on-invalid="ignore_uninitialized"/>
        <argument key="app.security.voter.view_survey_result" type="service" id="app.security.voter.view_survey_result" on-invalid="ignore_uninitialized"/>
        <argument key="argument_metadata_factory" type="service" id="argument_metadata_factory" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver" type="service" id="argument_resolver" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.controller_locator" type="service" id=".service_locator.MzWCiiK" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.default" type="service" id="argument_resolver.default" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.request" type="service" id="argument_resolver.request" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.request_attribute" type="service" id="argument_resolver.request_attribute" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.service" type="service" id="argument_resolver.service" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.session" type="service" id="argument_resolver.session" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.variadic" type="service" id="argument_resolver.variadic" on-invalid="ignore_uninitialized"/>
        <argument key="assets._default_package" type="service" id="assets._default_package" on-invalid="ignore_uninitialized"/>
        <argument key="assets._version__default" type="service" id="assets._version__default" on-invalid="ignore_uninitialized"/>
        <argument key="assets.context" type="service" id="assets.context" on-invalid="ignore_uninitialized"/>
        <argument key="assets.empty_package" type="service" id="assets.empty_package" on-invalid="ignore_uninitialized"/>
        <argument key="assets.empty_version_strategy" type="service" id="assets.empty_version_strategy" on-invalid="ignore_uninitialized"/>
        <argument key="assets.packages" type="service" id="assets.packages" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.app.simple" type="service" id="cache.app.simple" on-invalid="ignore_uninitialized"/>
        <argument key="cache.app.taggable" type="service" id="cache.app.taggable" on-invalid="ignore_uninitialized"/>
        <argument key="cache.default_clearer" type="service" id="cache.default_clearer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.default_marshaller" type="service" id="cache.default_marshaller" on-invalid="ignore_uninitialized"/>
        <argument key="cache.default_memcached_provider" type="service" id=".cache_connection.JKE6keX" on-invalid="ignore_uninitialized"/>
        <argument key="cache.default_pdo_provider" type="service" id="doctrine.dbal.default_connection" on-invalid="ignore_uninitialized"/>
        <argument key="cache.default_redis_provider" type="service" id=".cache_connection.GD_MSZC" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_access" type="service" id="cache.property_access" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_expression_language" type="service" id="cache.security_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="config.resource.self_checking_resource_checker" type="service" id="config.resource.self_checking_resource_checker" on-invalid="ignore_uninitialized"/>
        <argument key="config_cache_factory" type="service" id="config_cache_factory" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.about" type="service" id="console.command.about" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.assets_install" type="service" id="console.command.assets_install" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.cache_clear" type="service" id="console.command.cache_clear" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.cache_pool_clear" type="service" id="console.command.cache_pool_clear" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.cache_pool_delete" type="service" id="console.command.cache_pool_delete" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.cache_pool_prune" type="service" id="console.command.cache_pool_prune" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.cache_warmup" type="service" id="console.command.cache_warmup" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.config_debug" type="service" id="console.command.config_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.config_dump_reference" type="service" id="console.command.config_dump_reference" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.container_debug" type="service" id="console.command.container_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.debug_autowiring" type="service" id="console.command.debug_autowiring" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.event_dispatcher_debug" type="service" id="console.command.event_dispatcher_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.form_debug" type="service" id="console.command.form_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.router_debug" type="service" id="console.command.router_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.router_match" type="service" id="console.command.router_match" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.translation_debug" type="service" id="console.command.translation_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.translation_update" type="service" id="console.command.translation_update" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.xliff_lint" type="service" id="console.command.xliff_lint" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.yaml_lint" type="service" id="console.command.yaml_lint" on-invalid="ignore_uninitialized"/>
        <argument key="console.error_listener" type="service" id="console.error_listener" on-invalid="ignore_uninitialized"/>
        <argument key="controller_name_converter" type="service" id="controller_name_converter" on-invalid="ignore_uninitialized"/>
        <argument key="controller_resolver" type="service" id="controller_resolver" on-invalid="ignore_uninitialized"/>
        <argument key="data_collector.doctrine" type="service" id="data_collector.doctrine" on-invalid="ignore_uninitialized"/>
        <argument key="data_collector.security" type="service" id="data_collector.security" on-invalid="ignore_uninitialized"/>
        <argument key="data_collector.twig" type="service" id="data_collector.twig" on-invalid="ignore_uninitialized"/>
        <argument key="debug.debug_handlers_listener" type="service" id="debug.debug_handlers_listener" on-invalid="ignore_uninitialized"/>
        <argument key="debug.file_link_formatter" type="service" id="debug.file_link_formatter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.log_processor" type="service" id="debug.log_processor" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.access.decision_manager" type="service" id="debug.security.access.decision_manager" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.access.decision_manager.inner" type="service" id="debug.security.access.decision_manager.inner" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.firewall" type="service" id="debug.security.firewall" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\CanSendMessageVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\CanSendMessageVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\ChoosePaymentVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\ChoosePaymentVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\DoAdminImportVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\DoAdminImportVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\DoApplicationVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\DoApplicationVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\DoNewContractVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\DoNewContractVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\DoUseBuilderVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\DoUseBuilderVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\EditBenefitVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\EditBenefitVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\SaveSurveyVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\SaveSurveyVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\UseBenefitVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\UseBenefitVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\ViewDoSurveyVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\ViewDoSurveyVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\ViewOwnContractsVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\ViewOwnContractsVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\ViewProfileVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\ViewProfileVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.Main\UserBundle\Security\Voter\ViewSurveyResultVoter" type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\ViewSurveyResultVoter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.app.security.voter.can_upload_document" type="service" id="debug.security.voter.app.security.voter.can_upload_document" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.app.security.voter.choose_payment" type="service" id="debug.security.voter.app.security.voter.choose_payment" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.app.security.voter.do_admin_import" type="service" id="debug.security.voter.app.security.voter.do_admin_import" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.app.security.voter.do_application" type="service" id="debug.security.voter.app.security.voter.do_application" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.app.security.voter.do_use_builder" type="service" id="debug.security.voter.app.security.voter.do_use_builder" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.app.security.voter.edit_benefit" type="service" id="debug.security.voter.app.security.voter.edit_benefit" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.app.security.voter.save_survey" type="service" id="debug.security.voter.app.security.voter.save_survey" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.app.security.voter.use_benefit" type="service" id="debug.security.voter.app.security.voter.use_benefit" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.app.security.voter.view_choose_survey" type="service" id="debug.security.voter.app.security.voter.view_choose_survey" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.app.security.voter.view_do_survey" type="service" id="debug.security.voter.app.security.voter.view_do_survey" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.app.security.voter.view_profile" type="service" id="debug.security.voter.app.security.voter.view_profile" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.app.security.voter.view_survey_result" type="service" id="debug.security.voter.app.security.voter.view_survey_result" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.security.access.authenticated_voter" type="service" id="debug.security.voter.security.access.authenticated_voter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.security.access.expression_voter" type="service" id="debug.security.voter.security.access.expression_voter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.security.access.role_hierarchy_voter" type="service" id="debug.security.voter.security.access.role_hierarchy_voter" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.voter.vote_listener" type="service" id="debug.security.voter.vote_listener" on-invalid="ignore_uninitialized"/>
        <argument key="dependency_injection.config.container_parameters_resource_checker" type="service" id="dependency_injection.config.container_parameters_resource_checker" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.cache_clear_metadata_command" type="service" id="doctrine.cache_clear_metadata_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.cache_clear_query_cache_command" type="service" id="doctrine.cache_clear_query_cache_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.cache_clear_result_command" type="service" id="doctrine.cache_clear_result_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.cache_collection_region_command" type="service" id="doctrine.cache_collection_region_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.clear_entity_region_command" type="service" id="doctrine.clear_entity_region_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.clear_query_region_command" type="service" id="doctrine.clear_query_region_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.database_create_command" type="service" id="doctrine.database_create_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.database_drop_command" type="service" id="doctrine.database_drop_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.database_import_command" type="service" id="doctrine.database_import_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.dbal.connection_factory" type="service" id="doctrine.dbal.connection_factory" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.dbal.default_connection.configuration" type="service" id="doctrine.dbal.default_connection.configuration" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.dbal.default_connection.event_manager" type="service" id="doctrine.dbal.default_connection.event_manager" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.dbal.event_manager" type="service" id="doctrine.dbal.default_connection.event_manager" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.dbal.logger" type="service" id="doctrine.dbal.logger" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.dbal.logger.chain.default" type="service" id="doctrine.dbal.logger.chain.default" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.dbal.logger.profiling.default" type="service" id="doctrine.dbal.logger.profiling.default" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.ensure_production_settings_command" type="service" id="doctrine.ensure_production_settings_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.generate_entities_command" type="service" id="doctrine.generate_entities_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.mapping_convert_command" type="service" id="doctrine.mapping_convert_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.mapping_import_command" type="service" id="doctrine.mapping_import_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.mapping_info_command" type="service" id="doctrine.mapping_info_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.container_repository_factory" type="service" id="doctrine.orm.container_repository_factory" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.default_annotation_metadata_driver" type="service" id="doctrine.orm.default_annotation_metadata_driver" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.default_configuration" type="service" id="doctrine.orm.default_configuration" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.default_entity_listener_resolver" type="service" id="doctrine.orm.default_entity_listener_resolver" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.default_entity_manager.event_manager" type="service" id="doctrine.dbal.default_connection.event_manager" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.default_listeners.attach_entity_listeners" type="service" id="doctrine.orm.default_listeners.attach_entity_listeners" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.default_manager_configurator" type="service" id="doctrine.orm.default_manager_configurator" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.default_metadata_driver" type="service" id="doctrine.orm.default_metadata_driver" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.listeners.resolve_target_entity" type="service" id="doctrine.orm.listeners.resolve_target_entity" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.metadata.annotation_reader" type="service" id="annotations.cached_reader" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.naming_strategy.default" type="service" id="doctrine.orm.naming_strategy.default" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.naming_strategy.underscore" type="service" id="doctrine.orm.naming_strategy.underscore" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.proxy_cache_warmer" type="service" id="doctrine.orm.proxy_cache_warmer" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.quote_strategy.ansi" type="service" id="doctrine.orm.quote_strategy.ansi" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.quote_strategy.default" type="service" id="doctrine.orm.quote_strategy.default" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.validator.unique" type="service" id="doctrine.orm.validator.unique" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.orm.validator_initializer" type="service" id="doctrine.orm.validator_initializer" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.query_dql_command" type="service" id="doctrine.query_dql_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.query_sql_command" type="service" id="doctrine.query_sql_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.schema_create_command" type="service" id="doctrine.schema_create_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.schema_drop_command" type="service" id="doctrine.schema_drop_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.schema_update_command" type="service" id="doctrine.schema_update_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.schema_validate_command" type="service" id="doctrine.schema_validate_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.twig.doctrine_extension" type="service" id="doctrine.twig.doctrine_extension" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine_cache.contains_command" type="service" id="doctrine_cache.contains_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine_cache.delete_command" type="service" id="doctrine_cache.delete_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine_cache.flush_command" type="service" id="doctrine_cache.flush_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine_cache.stats_command" type="service" id="doctrine_cache.stats_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine_migrations.diff_command" type="service" id="doctrine_migrations.diff_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine_migrations.execute_command" type="service" id="doctrine_migrations.execute_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine_migrations.generate_command" type="service" id="doctrine_migrations.generate_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine_migrations.latest_command" type="service" id="doctrine_migrations.latest_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine_migrations.migrate_command" type="service" id="doctrine_migrations.migrate_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine_migrations.status_command" type="service" id="doctrine_migrations.status_command" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine_migrations.version_command" type="service" id="doctrine_migrations.version_command" on-invalid="ignore_uninitialized"/>
        <argument key="file_locator" type="service" id="file_locator" on-invalid="ignore_uninitialized"/>
        <argument key="form.choice_list_factory" type="service" id="form.choice_list_factory.cached" on-invalid="ignore_uninitialized"/>
        <argument key="form.choice_list_factory.cached" type="service" id="form.choice_list_factory.cached" on-invalid="ignore_uninitialized"/>
        <argument key="form.choice_list_factory.default" type="service" id="form.choice_list_factory.default" on-invalid="ignore_uninitialized"/>
        <argument key="form.choice_list_factory.property_access" type="service" id="form.choice_list_factory.property_access" on-invalid="ignore_uninitialized"/>
        <argument key="form.extension" type="service" id="form.extension" on-invalid="ignore_uninitialized"/>
        <argument key="form.property_accessor" type="service" id="property_accessor" on-invalid="ignore_uninitialized"/>
        <argument key="form.registry" type="service" id="form.registry" on-invalid="ignore_uninitialized"/>
        <argument key="form.resolved_type_factory" type="service" id="form.resolved_type_factory" on-invalid="ignore_uninitialized"/>
        <argument key="form.server_params" type="service" id="form.server_params" on-invalid="ignore_uninitialized"/>
        <argument key="form.type.choice" type="service" id="form.type.choice" on-invalid="ignore_uninitialized"/>
        <argument key="form.type.entity" type="service" id="form.type.entity" on-invalid="ignore_uninitialized"/>
        <argument key="form.type.form" type="service" id="form.type.form" on-invalid="ignore_uninitialized"/>
        <argument key="form.type_extension.csrf" type="service" id="form.type_extension.csrf" on-invalid="ignore_uninitialized"/>
        <argument key="form.type_extension.form.http_foundation" type="service" id="form.type_extension.form.http_foundation" on-invalid="ignore_uninitialized"/>
        <argument key="form.type_extension.form.request_handler" type="service" id="form.type_extension.form.request_handler" on-invalid="ignore_uninitialized"/>
        <argument key="form.type_extension.form.transformation_failure_handling" type="service" id="form.type_extension.form.transformation_failure_handling" on-invalid="ignore_uninitialized"/>
        <argument key="form.type_extension.form.validator" type="service" id="form.type_extension.form.validator" on-invalid="ignore_uninitialized"/>
        <argument key="form.type_extension.repeated.validator" type="service" id="form.type_extension.repeated.validator" on-invalid="ignore_uninitialized"/>
        <argument key="form.type_extension.submit.validator" type="service" id="form.type_extension.submit.validator" on-invalid="ignore_uninitialized"/>
        <argument key="form.type_extension.upload.validator" type="service" id="form.type_extension.upload.validator" on-invalid="ignore_uninitialized"/>
        <argument key="form.type_guesser.doctrine" type="service" id="form.type_guesser.doctrine" on-invalid="ignore_uninitialized"/>
        <argument key="form.type_guesser.validator" type="service" id="form.type_guesser.validator" on-invalid="ignore_uninitialized"/>
        <argument key="fragment.handler" type="service" id="fragment.handler" on-invalid="ignore_uninitialized"/>
        <argument key="fragment.listener" type="service" id="fragment.listener" on-invalid="ignore_uninitialized"/>
        <argument key="fragment.renderer.hinclude" type="service" id="fragment.renderer.hinclude" on-invalid="ignore_uninitialized"/>
        <argument key="fragment.renderer.inline" type="service" id="fragment.renderer.inline" on-invalid="ignore_uninitialized"/>
        <argument key="framework_extra_bundle.argument_name_convertor" type="service" id="framework_extra_bundle.argument_name_convertor" on-invalid="ignore_uninitialized"/>
        <argument key="framework_extra_bundle.date_time_param_converter" type="service" id="framework_extra_bundle.date_time_param_converter" on-invalid="ignore_uninitialized"/>
        <argument key="framework_extra_bundle.event.is_granted" type="service" id="framework_extra_bundle.event.is_granted" on-invalid="ignore_uninitialized"/>
        <argument key="http_exception_listener" type="service" id="http_exception_listener" on-invalid="ignore_uninitialized"/>
        <argument key="identity_translator" type="service" id="identity_translator" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.accessor_strategy" type="service" id="jms_serializer.accessor_strategy.expression" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.accessor_strategy.default" type="service" id="jms_serializer.accessor_strategy.default" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.accessor_strategy.expression" type="service" id="jms_serializer.accessor_strategy.expression" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.cache_naming_strategy" type="service" id="jms_serializer.cache_naming_strategy" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.camel_case_naming_strategy" type="service" id="jms_serializer.camel_case_naming_strategy" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.configured_deserialization_context_factory" type="service" id="jms_serializer.configured_deserialization_context_factory" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.configured_serialization_context_factory" type="service" id="jms_serializer.configured_serialization_context_factory" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.doctrine_object_constructor" type="service" id="jms_serializer.doctrine_object_constructor" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.doctrine_phpcr_object_constructor" type="service" id="jms_serializer.doctrine_phpcr_object_constructor" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.event_dispatcher" type="service" id="jms_serializer.event_dispatcher" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.expression_evaluator" type="service" id="jms_serializer.expression_evaluator" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.expression_language" type="service" id="jms_serializer.expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.expression_language.function_provider" type="service" id="jms_serializer.expression_language.function_provider" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.handler_registry" type="service" id="jms_serializer.handler_registry" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.identical_property_naming_strategy" type="service" id="jms_serializer.identical_property_naming_strategy" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.metadata.annotation_driver" type="service" id="jms_serializer.metadata.annotation_driver" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.metadata.cache" type="service" id="jms_serializer.metadata.cache.file_cache" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.metadata.cache.file_cache" type="service" id="jms_serializer.metadata.cache.file_cache" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.metadata.chain_driver" type="service" id="jms_serializer.metadata.chain_driver" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.metadata.doctrine_phpcr_type_driver" type="service" id="jms_serializer.metadata.doctrine_phpcr_type_driver" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.metadata.doctrine_type_driver" type="service" id="jms_serializer.metadata.doctrine_type_driver" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.metadata.file_locator" type="service" id="jms_serializer.metadata.file_locator" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.metadata.lazy_loading_driver" type="service" id="jms_serializer.metadata.lazy_loading_driver" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.metadata.php_driver" type="service" id="jms_serializer.metadata.php_driver" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.metadata.xml_driver" type="service" id="jms_serializer.metadata.xml_driver" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.metadata.yaml_driver" type="service" id="jms_serializer.metadata.yaml_driver" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.metadata_factory" type="service" id="jms_serializer.metadata_factory" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.naming_strategy" type="service" id="jms_serializer.cache_naming_strategy" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.serialized_name_annotation_strategy" type="service" id="jms_serializer.serialized_name_annotation_strategy" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.serializer" type="service" id="jms_serializer.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.templating.helper.serializer" type="service" id="jms_serializer.templating.helper.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.twig_extension.serializer" type="service" id="jms_serializer.twig_extension.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="jms_serializer.unserialize_object_constructor" type="service" id="jms_serializer.unserialize_object_constructor" on-invalid="ignore_uninitialized"/>
        <argument key="locale_listener" type="service" id="locale_listener" on-invalid="ignore_uninitialized"/>
        <argument key="logger" type="service" id="monolog.logger" on-invalid="ignore_uninitialized"/>
        <argument key="markdown.parser.flavored" type="service" id="markdown.parser.flavored" on-invalid="ignore_uninitialized"/>
        <argument key="markdown.parser.light" type="service" id="markdown.parser.light" on-invalid="ignore_uninitialized"/>
        <argument key="markdown.parser.max" type="service" id="markdown.parser.max" on-invalid="ignore_uninitialized"/>
        <argument key="markdown.parser.medium" type="service" id="markdown.parser.medium" on-invalid="ignore_uninitialized"/>
        <argument key="markdown.parser.min" type="service" id="markdown.parser.min" on-invalid="ignore_uninitialized"/>
        <argument key="markdown.parser.parser_manager" type="service" id="markdown.parser.parser_manager" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.formatter.chrome_php" type="service" id="monolog.formatter.chrome_php" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.formatter.gelf_message" type="service" id="monolog.formatter.gelf_message" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.formatter.html" type="service" id="monolog.formatter.html" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.formatter.json" type="service" id="monolog.formatter.json" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.formatter.line" type="service" id="monolog.formatter.line" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.formatter.loggly" type="service" id="monolog.formatter.loggly" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.formatter.logstash" type="service" id="monolog.formatter.logstash" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.formatter.normalizer" type="service" id="monolog.formatter.normalizer" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.formatter.scalar" type="service" id="monolog.formatter.scalar" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.formatter.wildfire" type="service" id="monolog.formatter.wildfire" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.handler.console" type="service" id="monolog.handler.console" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.handler.main" type="service" id="monolog.handler.main" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.handler.my_logger" type="service" id="monolog.handler.my_logger" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.handler.null_internal" type="service" id="monolog.handler.null_internal" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.logger" type="service" id="monolog.logger" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.logger.cache" type="service" id="monolog.logger.cache" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.logger.console" type="service" id="monolog.logger.console" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.logger.doctrine" type="service" id="monolog.logger.doctrine" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.logger.php" type="service" id="monolog.logger.php" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.logger.request" type="service" id="monolog.logger.request" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.logger.router" type="service" id="monolog.logger.router" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.logger.security" type="service" id="monolog.logger.security" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.logger.snappy" type="service" id="monolog.logger.snappy" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.logger.translation" type="service" id="monolog.logger.translation" on-invalid="ignore_uninitialized"/>
        <argument key="monolog.processor.psr_log_message" type="service" id="monolog.processor.psr_log_message" on-invalid="ignore_uninitialized"/>
        <argument key="parameter_bag" type="service" id="parameter_bag" on-invalid="ignore_uninitialized"/>
        <argument key="property_accessor" type="service" id="property_accessor" on-invalid="ignore_uninitialized"/>
        <argument key="resolve_controller_name_subscriber" type="service" id="resolve_controller_name_subscriber" on-invalid="ignore_uninitialized"/>
        <argument key="response_listener" type="service" id="response_listener" on-invalid="ignore_uninitialized"/>
        <argument key="router.cache_warmer" type="service" id="router.cache_warmer" on-invalid="ignore_uninitialized"/>
        <argument key="router.default" type="service" id="router.default" on-invalid="ignore_uninitialized"/>
        <argument key="router.request_context" type="service" id="router.request_context" on-invalid="ignore_uninitialized"/>
        <argument key="router_listener" type="service" id="router_listener" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.annotation" type="service" id="routing.loader.annotation" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.annotation.directory" type="service" id="routing.loader.annotation.directory" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.annotation.file" type="service" id="routing.loader.annotation.file" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.directory" type="service" id="routing.loader.directory" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.glob" type="service" id="routing.loader.glob" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.php" type="service" id="routing.loader.php" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.service" type="service" id="routing.loader.service" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.xml" type="service" id="routing.loader.xml" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.yml" type="service" id="routing.loader.yml" on-invalid="ignore_uninitialized"/>
        <argument key="routing.resolver" type="service" id="routing.resolver" on-invalid="ignore_uninitialized"/>
        <argument key="security.access.authenticated_voter" type="service" id="security.access.authenticated_voter" on-invalid="ignore_uninitialized"/>
        <argument key="security.access.decision_manager" type="service" id="debug.security.access.decision_manager" on-invalid="ignore_uninitialized"/>
        <argument key="security.access.expression_voter" type="service" id="security.access.expression_voter" on-invalid="ignore_uninitialized"/>
        <argument key="security.access.role_hierarchy_voter" type="service" id="security.access.role_hierarchy_voter" on-invalid="ignore_uninitialized"/>
        <argument key="security.access_listener" type="service" id="security.access_listener" on-invalid="ignore_uninitialized"/>
        <argument key="security.access_map" type="service" id="security.access_map" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.basic_entry_point" type="service" id="security.authentication.basic_entry_point" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.guard_handler" type="service" id="security.authentication.guard_handler" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.listener.anonymous" type="service" id="security.authentication.listener.anonymous" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.listener.anonymous.main" type="service" id="security.authentication.listener.anonymous.main" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.listener.guard.main" type="service" id="security.authentication.listener.guard.main" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.manager" type="service" id="security.authentication.manager" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.provider.anonymous" type="service" id="security.authentication.provider.anonymous" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.provider.anonymous.main" type="service" id="security.authentication.provider.anonymous.main" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.provider.guard.main" type="service" id="security.authentication.provider.guard.main" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.retry_entry_point" type="service" id="security.authentication.retry_entry_point" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.session_strategy" type="service" id="security.authentication.session_strategy" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.session_strategy.main" type="service" id="security.authentication.session_strategy" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.session_strategy_noop" type="service" id="security.authentication.session_strategy_noop" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.switchuser_listener.main" type="service" id="security.authentication.switchuser_listener.main" on-invalid="ignore_uninitialized"/>
        <argument key="security.authentication.trust_resolver" type="service" id="security.authentication.trust_resolver" on-invalid="ignore_uninitialized"/>
        <argument key="security.channel_listener" type="service" id="security.channel_listener" on-invalid="ignore_uninitialized"/>
        <argument key="security.command.user_password_encoder" type="service" id="security.command.user_password_encoder" on-invalid="ignore_uninitialized"/>
        <argument key="security.context_listener" type="service" id="security.context_listener" on-invalid="ignore_uninitialized"/>
        <argument key="security.context_listener.0" type="service" id="security.context_listener.0" on-invalid="ignore_uninitialized"/>
        <argument key="security.csrf.token_generator" type="service" id="security.csrf.token_generator" on-invalid="ignore_uninitialized"/>
        <argument key="security.csrf.token_storage" type="service" id="security.csrf.token_storage" on-invalid="ignore_uninitialized"/>
        <argument key="security.encoder_factory" type="service" id="security.encoder_factory.generic" on-invalid="ignore_uninitialized"/>
        <argument key="security.encoder_factory.generic" type="service" id="security.encoder_factory.generic" on-invalid="ignore_uninitialized"/>
        <argument key="security.exception_listener.main" type="service" id="security.exception_listener.main" on-invalid="ignore_uninitialized"/>
        <argument key="security.expression_language" type="service" id="security.expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="security.firewall" type="service" id="debug.security.firewall" on-invalid="ignore_uninitialized"/>
        <argument key="security.firewall.map" type="service" id="security.firewall.map" on-invalid="ignore_uninitialized"/>
        <argument key="security.firewall.map.config.dev" type="service" id="security.firewall.map.config.dev" on-invalid="ignore_uninitialized"/>
        <argument key="security.firewall.map.config.main" type="service" id="security.firewall.map.config.main" on-invalid="ignore_uninitialized"/>
        <argument key="security.firewall.map.context.dev" type="service" id="security.firewall.map.context.dev" on-invalid="ignore_uninitialized"/>
        <argument key="security.firewall.map.context.main" type="service" id="security.firewall.map.context.main" on-invalid="ignore_uninitialized"/>
        <argument key="security.helper" type="service" id="security.helper" on-invalid="ignore_uninitialized"/>
        <argument key="security.http_utils" type="service" id="security.http_utils" on-invalid="ignore_uninitialized"/>
        <argument key="security.logout.handler.csrf_token_clearing" type="service" id="security.logout.handler.csrf_token_clearing" on-invalid="ignore_uninitialized"/>
        <argument key="security.logout.handler.session" type="service" id="security.logout.handler.session" on-invalid="ignore_uninitialized"/>
        <argument key="security.logout.success_handler.main" type="service" id="security.logout.success_handler.main" on-invalid="ignore_uninitialized"/>
        <argument key="security.logout_listener.main" type="service" id="security.logout_listener.main" on-invalid="ignore_uninitialized"/>
        <argument key="security.logout_url_generator" type="service" id="security.logout_url_generator" on-invalid="ignore_uninitialized"/>
        <argument key="security.rememberme.response_listener" type="service" id="security.rememberme.response_listener" on-invalid="ignore_uninitialized"/>
        <argument key="security.rememberme.token.provider.in_memory" type="service" id="security.rememberme.token.provider.in_memory" on-invalid="ignore_uninitialized"/>
        <argument key="security.role_hierarchy" type="service" id="security.role_hierarchy" on-invalid="ignore_uninitialized"/>
        <argument key="security.user.provider.concrete.our_users" type="service" id="security.user.provider.concrete.our_users" on-invalid="ignore_uninitialized"/>
        <argument key="security.user_checker" type="service" id="security.user_checker" on-invalid="ignore_uninitialized"/>
        <argument key="security.user_checker.main" type="service" id="security.user_checker" on-invalid="ignore_uninitialized"/>
        <argument key="security.user_password_encoder.generic" type="service" id="security.user_password_encoder.generic" on-invalid="ignore_uninitialized"/>
        <argument key="security.user_value_resolver" type="service" id="security.user_value_resolver" on-invalid="ignore_uninitialized"/>
        <argument key="security.validator.user_password" type="service" id="security.validator.user_password" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.cache.listener" type="service" id="sensio_framework_extra.cache.listener" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.controller.listener" type="service" id="sensio_framework_extra.controller.listener" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.converter.doctrine.orm" type="service" id="sensio_framework_extra.converter.doctrine.orm" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.converter.doctrine.orm.expression_language" type="service" id="sensio_framework_extra.converter.doctrine.orm.expression_language.default" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.converter.doctrine.orm.expression_language.default" type="service" id="sensio_framework_extra.converter.doctrine.orm.expression_language.default" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.converter.listener" type="service" id="sensio_framework_extra.converter.listener" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.converter.manager" type="service" id="sensio_framework_extra.converter.manager" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.routing.loader.annot_class" type="service" id="sensio_framework_extra.routing.loader.annot_class" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.routing.loader.annot_dir" type="service" id="sensio_framework_extra.routing.loader.annot_dir" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.routing.loader.annot_file" type="service" id="sensio_framework_extra.routing.loader.annot_file" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.security.expression_language" type="service" id="sensio_framework_extra.security.expression_language.default" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.security.expression_language.default" type="service" id="sensio_framework_extra.security.expression_language.default" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.security.listener" type="service" id="sensio_framework_extra.security.listener" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.view.guesser" type="service" id="sensio_framework_extra.view.guesser" on-invalid="ignore_uninitialized"/>
        <argument key="sensio_framework_extra.view.listener" type="service" id="sensio_framework_extra.view.listener" on-invalid="ignore_uninitialized"/>
        <argument key="session.attribute_bag" type="service" id="session.attribute_bag" on-invalid="ignore_uninitialized"/>
        <argument key="session.flash_bag" type="service" id="session.flash_bag" on-invalid="ignore_uninitialized"/>
        <argument key="session.handler.native_file" type="service" id="session.handler.native_file" on-invalid="ignore_uninitialized"/>
        <argument key="session.save_listener" type="service" id="session.save_listener" on-invalid="ignore_uninitialized"/>
        <argument key="session.storage" type="service" id="session.storage.mock_file" on-invalid="ignore_uninitialized"/>
        <argument key="session.storage.filesystem" type="service" id="session.storage.mock_file" on-invalid="ignore_uninitialized"/>
        <argument key="session.storage.metadata_bag" type="service" id="session.storage.metadata_bag" on-invalid="ignore_uninitialized"/>
        <argument key="session.storage.mock_file" type="service" id="session.storage.mock_file" on-invalid="ignore_uninitialized"/>
        <argument key="session.storage.native" type="service" id="session.storage.native" on-invalid="ignore_uninitialized"/>
        <argument key="session.storage.php_bridge" type="service" id="session.storage.php_bridge" on-invalid="ignore_uninitialized"/>
        <argument key="session_listener" type="service" id="session_listener" on-invalid="ignore_uninitialized"/>
        <argument key="stof_doctrine_extensions.listener.sluggable" type="service" id="stof_doctrine_extensions.listener.sluggable" on-invalid="ignore_uninitialized"/>
        <argument key="streamed_response_listener" type="service" id="streamed_response_listener" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.command.debug" type="service" id="swiftmailer.command.debug" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.command.new_email" type="service" id="swiftmailer.command.new_email" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.command.send_email" type="service" id="swiftmailer.command.send_email" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.data_collector" type="service" id="swiftmailer.data_collector" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.email_sender.listener" type="service" id="swiftmailer.email_sender.listener" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.mailer" type="service" id="swiftmailer.mailer.default" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.mailer.default.spool" type="service" id="swiftmailer.mailer.default.spool.memory" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.mailer.default.spool.memory" type="service" id="swiftmailer.mailer.default.spool.memory" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.mailer.default.transport" type="service" id="swiftmailer.mailer.default.transport.spool" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.mailer.default.transport.dynamic" type="service" id="swiftmailer.mailer.default.transport.dynamic" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.mailer.default.transport.eventdispatcher" type="service" id="swiftmailer.mailer.default.transport.eventdispatcher" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.mailer.default.transport.spool" type="service" id="swiftmailer.mailer.default.transport.spool" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.plugin.messagelogger" type="service" id="swiftmailer.mailer.default.plugin.messagelogger" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.spool" type="service" id="swiftmailer.mailer.default.spool.memory" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.transport.failover" type="service" id="swiftmailer.transport.failover" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.transport.real" type="service" id="swiftmailer.mailer.default.transport.dynamic" on-invalid="ignore_uninitialized"/>
        <argument key="swiftmailer.transport.replacementfactory" type="service" id="swiftmailer.transport.replacementfactory" on-invalid="ignore_uninitialized"/>
        <argument key="templating.helper.logout_url" type="service" id="templating.helper.logout_url" on-invalid="ignore_uninitialized"/>
        <argument key="templating.helper.security" type="service" id="templating.helper.security" on-invalid="ignore_uninitialized"/>
        <argument key="test.client.cookiejar" type="service" id="test.client.cookiejar" on-invalid="ignore_uninitialized"/>
        <argument key="test.client.history" type="service" id="test.client.history" on-invalid="ignore_uninitialized"/>
        <argument key="test.session.listener" type="service" id="test.session.listener" on-invalid="ignore_uninitialized"/>
        <argument key="translation.dumper.csv" type="service" id="translation.dumper.csv" on-invalid="ignore_uninitialized"/>
        <argument key="translation.dumper.ini" type="service" id="translation.dumper.ini" on-invalid="ignore_uninitialized"/>
        <argument key="translation.dumper.json" type="service" id="translation.dumper.json" on-invalid="ignore_uninitialized"/>
        <argument key="translation.dumper.mo" type="service" id="translation.dumper.mo" on-invalid="ignore_uninitialized"/>
        <argument key="translation.dumper.php" type="service" id="translation.dumper.php" on-invalid="ignore_uninitialized"/>
        <argument key="translation.dumper.po" type="service" id="translation.dumper.po" on-invalid="ignore_uninitialized"/>
        <argument key="translation.dumper.qt" type="service" id="translation.dumper.qt" on-invalid="ignore_uninitialized"/>
        <argument key="translation.dumper.res" type="service" id="translation.dumper.res" on-invalid="ignore_uninitialized"/>
        <argument key="translation.dumper.xliff" type="service" id="translation.dumper.xliff" on-invalid="ignore_uninitialized"/>
        <argument key="translation.dumper.yaml" type="service" id="translation.dumper.yaml" on-invalid="ignore_uninitialized"/>
        <argument key="translation.dumper.yml" type="service" id="translation.dumper.yml" on-invalid="ignore_uninitialized"/>
        <argument key="translation.extractor" type="service" id="translation.extractor" on-invalid="ignore_uninitialized"/>
        <argument key="translation.extractor.php" type="service" id="translation.extractor.php" on-invalid="ignore_uninitialized"/>
        <argument key="translation.loader.csv" type="service" id="translation.loader.csv" on-invalid="ignore_uninitialized"/>
        <argument key="translation.loader.dat" type="service" id="translation.loader.dat" on-invalid="ignore_uninitialized"/>
        <argument key="translation.loader.ini" type="service" id="translation.loader.ini" on-invalid="ignore_uninitialized"/>
        <argument key="translation.loader.json" type="service" id="translation.loader.json" on-invalid="ignore_uninitialized"/>
        <argument key="translation.loader.mo" type="service" id="translation.loader.mo" on-invalid="ignore_uninitialized"/>
        <argument key="translation.loader.php" type="service" id="translation.loader.php" on-invalid="ignore_uninitialized"/>
        <argument key="translation.loader.po" type="service" id="translation.loader.po" on-invalid="ignore_uninitialized"/>
        <argument key="translation.loader.qt" type="service" id="translation.loader.qt" on-invalid="ignore_uninitialized"/>
        <argument key="translation.loader.res" type="service" id="translation.loader.res" on-invalid="ignore_uninitialized"/>
        <argument key="translation.loader.xliff" type="service" id="translation.loader.xliff" on-invalid="ignore_uninitialized"/>
        <argument key="translation.loader.yml" type="service" id="translation.loader.yml" on-invalid="ignore_uninitialized"/>
        <argument key="translation.reader" type="service" id="translation.reader" on-invalid="ignore_uninitialized"/>
        <argument key="translation.warmer" type="service" id="translation.warmer" on-invalid="ignore_uninitialized"/>
        <argument key="translation.writer" type="service" id="translation.writer" on-invalid="ignore_uninitialized"/>
        <argument key="translator.default" type="service" id="translator.default" on-invalid="ignore_uninitialized"/>
        <argument key="translator.formatter" type="service" id="translator.formatter.default" on-invalid="ignore_uninitialized"/>
        <argument key="translator.formatter.default" type="service" id="translator.formatter.default" on-invalid="ignore_uninitialized"/>
        <argument key="translator.logging" type="service" id="translator.logging" on-invalid="ignore_uninitialized"/>
        <argument key="translator.selector" type="service" id="translator.selector" on-invalid="ignore_uninitialized"/>
        <argument key="translator_listener" type="service" id="translator_listener" on-invalid="ignore_uninitialized"/>
        <argument key="twig.app_variable" type="service" id="twig.app_variable" on-invalid="ignore_uninitialized"/>
        <argument key="twig.command.debug" type="service" id="twig.command.debug" on-invalid="ignore_uninitialized"/>
        <argument key="twig.command.lint" type="service" id="twig.command.lint" on-invalid="ignore_uninitialized"/>
        <argument key="twig.configurator.environment" type="service" id="twig.configurator.environment" on-invalid="ignore_uninitialized"/>
        <argument key="twig.exception_listener" type="service" id="twig.exception_listener" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.assets" type="service" id="twig.extension.assets" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.code" type="service" id="twig.extension.code" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.debug" type="service" id="twig.extension.debug" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.debug.stopwatch" type="service" id="twig.extension.debug.stopwatch" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.exercise.twig" type="service" id="twig.extension.exercise.twig" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.expression" type="service" id="twig.extension.expression" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.form" type="service" id="twig.extension.form" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.httpfoundation" type="service" id="twig.extension.httpfoundation" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.httpkernel" type="service" id="twig.extension.httpkernel" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.logout_url" type="service" id="twig.extension.logout_url" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.profiler" type="service" id="twig.extension.profiler" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.routing" type="service" id="twig.extension.routing" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.security" type="service" id="twig.extension.security" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.security_csrf" type="service" id="twig.extension.security_csrf" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.trans" type="service" id="twig.extension.trans" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.weblink" type="service" id="twig.extension.weblink" on-invalid="ignore_uninitialized"/>
        <argument key="twig.extension.yaml" type="service" id="twig.extension.yaml" on-invalid="ignore_uninitialized"/>
        <argument key="twig.form.engine" type="service" id="twig.form.engine" on-invalid="ignore_uninitialized"/>
        <argument key="twig.form.renderer" type="service" id="twig.form.renderer" on-invalid="ignore_uninitialized"/>
        <argument key="twig.loader" type="service" id="twig.loader.native_filesystem" on-invalid="ignore_uninitialized"/>
        <argument key="twig.loader.chain" type="service" id="twig.loader.chain" on-invalid="ignore_uninitialized"/>
        <argument key="twig.loader.filesystem" type="service" id="twig.loader.native_filesystem" on-invalid="ignore_uninitialized"/>
        <argument key="twig.loader.native_filesystem" type="service" id="twig.loader.native_filesystem" on-invalid="ignore_uninitialized"/>
        <argument key="twig.profile" type="service" id="twig.profile" on-invalid="ignore_uninitialized"/>
        <argument key="twig.runtime.httpkernel" type="service" id="twig.runtime.httpkernel" on-invalid="ignore_uninitialized"/>
        <argument key="twig.runtime.security_csrf" type="service" id="twig.runtime.security_csrf" on-invalid="ignore_uninitialized"/>
        <argument key="twig.runtime_loader" type="service" id="twig.runtime_loader" on-invalid="ignore_uninitialized"/>
        <argument key="twig.template_iterator" type="service" id="twig.template_iterator" on-invalid="ignore_uninitialized"/>
        <argument key="twig.translation.extractor" type="service" id="twig.translation.extractor" on-invalid="ignore_uninitialized"/>
        <argument key="uri_signer" type="service" id="uri_signer" on-invalid="ignore_uninitialized"/>
        <argument key="validate_request_listener" type="service" id="validate_request_listener" on-invalid="ignore_uninitialized"/>
        <argument key="validator.builder" type="service" id="validator.builder" on-invalid="ignore_uninitialized"/>
        <argument key="validator.email" type="service" id="validator.email" on-invalid="ignore_uninitialized"/>
        <argument key="validator.expression" type="service" id="validator.expression" on-invalid="ignore_uninitialized"/>
        <argument key="validator.mapping.cache.symfony" type="service" id="validator.mapping.cache.symfony" on-invalid="ignore_uninitialized"/>
        <argument key="validator.mapping.cache_warmer" type="service" id="validator.mapping.cache_warmer" on-invalid="ignore_uninitialized"/>
        <argument key="validator.mapping.class_metadata_factory" type="service" id="validator" on-invalid="ignore_uninitialized"/>
        <argument key="validator.validator_factory" type="service" id="validator.validator_factory" on-invalid="ignore_uninitialized"/>
        <argument key="webpack_encore.entrypoint_lookup" type="service" id="webpack_encore.entrypoint_lookup" on-invalid="ignore_uninitialized"/>
        <argument key="webpack_encore.entrypoint_lookup[_default]" type="service" id="webpack_encore.entrypoint_lookup[_default]" on-invalid="ignore_uninitialized"/>
        <argument key="webpack_encore.entrypoint_lookup_collection" type="service" id="webpack_encore.entrypoint_lookup_collection" on-invalid="ignore_uninitialized"/>
        <argument key="webpack_encore.tag_renderer" type="service" id="webpack_encore.tag_renderer" on-invalid="ignore_uninitialized"/>
        <argument key="webpack_encore.twig_entry_files_extension" type="service" id="webpack_encore.twig_entry_files_extension" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id=".1_NativeFileSessionHandler~VLYaeFa" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler" public="false">
      <argument>/programming/prod-yourneeds/var/cache/dev/sessions</argument>
    </service>
    <service id="session" class="Symfony\Component\HttpFoundation\Session\Session" public="true">
      <argument type="service" id="session.storage.mock_file"/>
      <argument type="service" id="session.attribute_bag"/>
      <argument type="service" id="session.flash_bag"/>
    </service>
    <service id="session.storage.metadata_bag" class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag" public="false">
      <argument>_sf2_meta</argument>
      <argument>0</argument>
    </service>
    <service id="session.storage.native" class="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage" public="false">
      <argument>%session.storage.options%</argument>
      <argument>null</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.storage.php_bridge" class="Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage" public="false">
      <argument>null</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.flash_bag" class="Symfony\Component\HttpFoundation\Session\Flash\FlashBag" public="false"/>
    <service id="session.attribute_bag" class="Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag" public="false"/>
    <service id="session.storage.mock_file" class="Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage" public="false">
      <argument>/programming/prod-yourneeds/var/cache/dev/sessions</argument>
      <argument>MOCKSESSID</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.handler.native_file" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler" public="false">
      <argument type="service" id=".1_NativeFileSessionHandler~VLYaeFa"/>
    </service>
    <service id="session_listener" class="Symfony\Component\HttpKernel\EventListener\SessionListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id=".service_locator.AoifO_3"/>
    </service>
    <service id="session.save_listener" class="Symfony\Component\HttpKernel\EventListener\SaveSessionListener" public="false">
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.1. Use the "session_listener" service instead.</deprecated>
    </service>
    <service id="security.csrf.token_generator" class="Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator" public="false"/>
    <service id="security.csrf.token_storage" class="Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage" public="false">
      <argument type="service" id="session"/>
    </service>
    <service id="security.csrf.token_manager" class="Symfony\Component\Security\Csrf\CsrfTokenManager" public="true">
      <argument type="service" id="security.csrf.token_generator"/>
      <argument type="service" id="security.csrf.token_storage"/>
      <argument type="service" id="request_stack" on-invalid="ignore"/>
    </service>
    <service id="twig.runtime.security_csrf" class="Symfony\Bridge\Twig\Extension\CsrfRuntime" public="false">
      <tag name="twig.runtime"/>
      <argument type="service" id="security.csrf.token_manager"/>
    </service>
    <service id="twig.extension.security_csrf" class="Symfony\Bridge\Twig\Extension\CsrfExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="form.resolved_type_factory" class="Symfony\Component\Form\ResolvedFormTypeFactory" public="false"/>
    <service id="form.registry" class="Symfony\Component\Form\FormRegistry" public="false">
      <argument type="collection">
        <argument type="service" id="form.extension"/>
      </argument>
      <argument type="service" id="form.resolved_type_factory"/>
    </service>
    <service id="form.factory" class="Symfony\Component\Form\FormFactory" public="true">
      <argument type="service" id="form.registry"/>
    </service>
    <service id="form.extension" class="Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension" public="false">
      <argument type="service" id=".service_locator.a1.yqRI"/>
      <argument type="collection">
        <argument key="Symfony\Component\Form\Extension\Core\Type\FormType" type="iterator">
          <argument type="service" id="AppBundle\Form\TypeExtension\HelpFormExtension"/>
          <argument type="service" id="form.type_extension.form.transformation_failure_handling"/>
          <argument type="service" id="form.type_extension.form.http_foundation"/>
          <argument type="service" id="form.type_extension.form.validator"/>
          <argument type="service" id="form.type_extension.upload.validator"/>
          <argument type="service" id="form.type_extension.csrf"/>
        </argument>
        <argument key="Symfony\Component\Form\Extension\Core\Type\RepeatedType" type="iterator">
          <argument type="service" id="form.type_extension.repeated.validator"/>
        </argument>
        <argument key="Symfony\Component\Form\Extension\Core\Type\SubmitType" type="iterator">
          <argument type="service" id="form.type_extension.submit.validator"/>
        </argument>
      </argument>
      <argument type="iterator">
        <argument type="service" id="form.type_guesser.doctrine"/>
        <argument type="service" id="form.type_guesser.validator"/>
      </argument>
    </service>
    <service id="form.type_guesser.validator" class="Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser" public="false">
      <tag name="form.type_guesser"/>
      <argument type="service" id="validator"/>
    </service>
    <service id="form.choice_list_factory.default" class="Symfony\Component\Form\ChoiceList\Factory\DefaultChoiceListFactory" public="false"/>
    <service id="form.choice_list_factory.property_access" class="Symfony\Component\Form\ChoiceList\Factory\PropertyAccessDecorator" public="false">
      <argument type="service" id="form.choice_list_factory.default"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="form.choice_list_factory.cached" class="Symfony\Component\Form\ChoiceList\Factory\CachingFactoryDecorator" public="false">
      <argument type="service" id="form.choice_list_factory.property_access"/>
    </service>
    <service id="form.type.form" class="Symfony\Component\Form\Extension\Core\Type\FormType" public="false">
      <tag name="form.type"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="form.type.choice" class="Symfony\Component\Form\Extension\Core\Type\ChoiceType" public="false">
      <tag name="form.type"/>
      <argument type="service" id="form.choice_list_factory.cached"/>
    </service>
    <service id="form.type_extension.form.transformation_failure_handling" class="Symfony\Component\Form\Extension\Core\Type\TransformationFailureExtension" public="false">
      <tag name="form.type_extension" extended_type="Symfony\Component\Form\Extension\Core\Type\FormType" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument type="service" id="translator.default" on-invalid="ignore"/>
    </service>
    <service id="form.type_extension.form.http_foundation" class="Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension" public="false">
      <tag name="form.type_extension"/>
      <argument type="service" id="form.type_extension.form.request_handler"/>
    </service>
    <service id="form.type_extension.form.request_handler" class="Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationRequestHandler" public="false">
      <argument type="service" id="form.server_params"/>
    </service>
    <service id="form.server_params" class="Symfony\Component\Form\Util\ServerParams" public="false">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="form.type_extension.form.validator" class="Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension" public="false">
      <tag name="form.type_extension" extended_type="Symfony\Component\Form\Extension\Core\Type\FormType" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument type="service" id="validator"/>
    </service>
    <service id="form.type_extension.repeated.validator" class="Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension" public="false">
      <tag name="form.type_extension"/>
    </service>
    <service id="form.type_extension.submit.validator" class="Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension" public="false">
      <tag name="form.type_extension" extended_type="Symfony\Component\Form\Extension\Core\Type\SubmitType" extended-type="Symfony\Component\Form\Extension\Core\Type\SubmitType"/>
    </service>
    <service id="form.type_extension.upload.validator" class="Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension" public="false">
      <tag name="form.type_extension"/>
      <argument type="service" id="translator.default"/>
      <argument>validators</argument>
    </service>
    <service id="form.type_extension.csrf" class="Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension" public="false">
      <tag name="form.type_extension"/>
      <argument type="service" id="security.csrf.token_manager"/>
      <argument>true</argument>
      <argument>_token</argument>
      <argument type="service" id="translator.default" on-invalid="null"/>
      <argument>validators</argument>
      <argument type="service" id="form.server_params"/>
    </service>
    <service id="assets.packages" class="Symfony\Component\Asset\Packages" public="false">
      <argument type="service" id="assets._default_package"/>
      <argument type="collection"/>
    </service>
    <service id="assets.empty_package" class="Symfony\Component\Asset\Package" public="false">
      <argument type="service" id="assets.empty_version_strategy"/>
    </service>
    <service id="assets.context" class="Symfony\Component\Asset\Context\RequestStackContext" public="false">
      <argument type="service" id="request_stack"/>
      <argument></argument>
      <argument>false</argument>
    </service>
    <service id="assets.path_package" class="Symfony\Component\Asset\PathPackage" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="assets.context"/>
    </service>
    <service id="assets.url_package" class="Symfony\Component\Asset\UrlPackage" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument type="service" id="assets.context"/>
    </service>
    <service id="assets.static_version_strategy" class="Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
    </service>
    <service id="assets.empty_version_strategy" class="Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy" public="false"/>
    <service id="assets.json_manifest_version_strategy" class="Symfony\Component\Asset\VersionStrategy\JsonManifestVersionStrategy" public="false" abstract="true">
      <argument></argument>
    </service>
    <service id="assets._version__default" class="Symfony\Component\Asset\VersionStrategy\JsonManifestVersionStrategy" public="false">
      <argument>/programming/prod-yourneeds/public/build/manifest.json</argument>
    </service>
    <service id="assets._default_package" class="Symfony\Component\Asset\PathPackage" public="false">
      <argument></argument>
      <argument type="service" id="assets._version__default"/>
      <argument type="service" id="assets.context"/>
    </service>
    <service id=".1_PhpArrayAdapter~aT.Hokw" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" public="false">
      <argument>/programming/prod-yourneeds/var/cache/dev/validation.php</argument>
      <argument type="service" id="cache.validator"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id="validator" class="Symfony\Component\Validator\Validator\ValidatorInterface" public="true">
      <factory service="validator.builder" method="getValidator"/>
    </service>
    <service id="validator.builder" class="Symfony\Component\Validator\ValidatorBuilderInterface" public="false">
      <call method="setConstraintValidatorFactory">
        <argument type="service" id="validator.validator_factory"/>
      </call>
      <call method="setTranslator">
        <argument type="service" id="translator.default"/>
      </call>
      <call method="setTranslationDomain">
        <argument>validators</argument>
      </call>
      <call method="addXmlMappings">
        <argument type="collection">
          <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/config/validation.xml</argument>
        </argument>
      </call>
      <call method="enableAnnotationMapping">
        <argument type="service" id="annotations.cached_reader"/>
      </call>
      <call method="addMethodMapping">
        <argument>loadValidatorMetadata</argument>
      </call>
      <call method="addObjectInitializers">
        <argument type="collection">
          <argument type="service" id="doctrine.orm.validator_initializer"/>
        </argument>
      </call>
      <factory class="Symfony\Component\Validator\Validation" method="createValidatorBuilder"/>
    </service>
    <service id="validator.mapping.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="validator.builder"/>
      <argument>/programming/prod-yourneeds/var/cache/dev/validation.php</argument>
    </service>
    <service id="validator.mapping.cache.symfony" class="Symfony\Component\Validator\Mapping\Cache\Psr6Cache" public="false">
      <argument type="service" id=".1_PhpArrayAdapter~aT.Hokw"/>
    </service>
    <service id="validator.validator_factory" class="Symfony\Component\Validator\ContainerConstraintValidatorFactory" public="false">
      <argument type="service" id=".service_locator.HKoUR8q"/>
    </service>
    <service id="validator.expression" class="Symfony\Component\Validator\Constraints\ExpressionValidator" public="false">
      <tag name="validator.constraint_validator" alias="validator.expression"/>
    </service>
    <service id="validator.email" class="Symfony\Component\Validator\Constraints\EmailValidator" public="false">
      <tag name="validator.constraint_validator" alias="Symfony\Component\Validator\Constraints\EmailValidator"/>
      <argument>loose</argument>
    </service>
    <service id="fragment.listener" class="Symfony\Component\HttpKernel\EventListener\FragmentListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="uri_signer"/>
      <argument>/_fragment</argument>
    </service>
    <service id="translator.default" class="Symfony\Bundle\FrameworkBundle\Translation\Translator" public="false">
      <argument type="service" id=".service_locator.yQVjGlt"/>
      <argument type="service" id="translator.formatter.default"/>
      <argument>de</argument>
      <argument type="collection">
        <argument key="translation.loader.php" type="collection">
          <argument>php</argument>
        </argument>
        <argument key="translation.loader.yml" type="collection">
          <argument>yaml</argument>
          <argument>yml</argument>
        </argument>
        <argument key="translation.loader.xliff" type="collection">
          <argument>xlf</argument>
          <argument>xliff</argument>
        </argument>
        <argument key="translation.loader.po" type="collection">
          <argument>po</argument>
        </argument>
        <argument key="translation.loader.mo" type="collection">
          <argument>mo</argument>
        </argument>
        <argument key="translation.loader.qt" type="collection">
          <argument>ts</argument>
        </argument>
        <argument key="translation.loader.csv" type="collection">
          <argument>csv</argument>
        </argument>
        <argument key="translation.loader.res" type="collection">
          <argument>res</argument>
        </argument>
        <argument key="translation.loader.dat" type="collection">
          <argument>dat</argument>
        </argument>
        <argument key="translation.loader.ini" type="collection">
          <argument>ini</argument>
        </argument>
        <argument key="translation.loader.json" type="collection">
          <argument>json</argument>
        </argument>
      </argument>
      <argument type="collection">
        <argument key="cache_dir">/programming/prod-yourneeds/var/cache/dev/translations</argument>
        <argument key="debug">true</argument>
        <argument key="resource_files" type="collection">
          <argument key="af" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.af.xlf</argument>
          </argument>
          <argument key="ar" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.ar.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.ar.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.ar.xlf</argument>
          </argument>
          <argument key="az" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.az.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.az.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.az.xlf</argument>
          </argument>
          <argument key="bg" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.bg.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.bg.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.bg.xlf</argument>
          </argument>
          <argument key="ca" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.ca.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.ca.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.ca.xlf</argument>
          </argument>
          <argument key="cs" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.cs.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.cs.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.cs.xlf</argument>
          </argument>
          <argument key="cy" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.cy.xlf</argument>
          </argument>
          <argument key="da" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.da.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.da.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.da.xlf</argument>
          </argument>
          <argument key="de" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.de.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.de.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.de.xlf</argument>
          </argument>
          <argument key="el" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.el.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.el.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.el.xlf</argument>
          </argument>
          <argument key="en" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.en.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.en.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.en.xlf</argument>
            <argument>/programming/prod-yourneeds/translations/validators.en.yml</argument>
            <argument>/programming/prod-yourneeds/translations/validators.en.yml</argument>
          </argument>
          <argument key="es" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.es.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.es.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.es.xlf</argument>
          </argument>
          <argument key="et" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.et.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.et.xlf</argument>
          </argument>
          <argument key="eu" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.eu.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.eu.xlf</argument>
          </argument>
          <argument key="fa" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.fa.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.fa.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.fa.xlf</argument>
          </argument>
          <argument key="fi" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.fi.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.fi.xlf</argument>
          </argument>
          <argument key="fr" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.fr.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.fr.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.fr.xlf</argument>
          </argument>
          <argument key="gl" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.gl.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.gl.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.gl.xlf</argument>
          </argument>
          <argument key="he" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.he.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.he.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.he.xlf</argument>
          </argument>
          <argument key="hr" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.hr.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.hr.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.hr.xlf</argument>
          </argument>
          <argument key="hu" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.hu.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.hu.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.hu.xlf</argument>
          </argument>
          <argument key="hy" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.hy.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.hy.xlf</argument>
          </argument>
          <argument key="id" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.id.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.id.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.id.xlf</argument>
          </argument>
          <argument key="it" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.it.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.it.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.it.xlf</argument>
          </argument>
          <argument key="ja" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.ja.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.ja.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.ja.xlf</argument>
          </argument>
          <argument key="lb" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.lb.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.lb.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.lb.xlf</argument>
          </argument>
          <argument key="lt" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.lt.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.lt.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.lt.xlf</argument>
          </argument>
          <argument key="lv" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.lv.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.lv.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.lv.xlf</argument>
          </argument>
          <argument key="mn" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.mn.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.mn.xlf</argument>
          </argument>
          <argument key="nb" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.nb.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.nb.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.nb.xlf</argument>
          </argument>
          <argument key="nl" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.nl.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.nl.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.nl.xlf</argument>
          </argument>
          <argument key="nn" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.nn.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.nn.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.nn.xlf</argument>
          </argument>
          <argument key="no" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.no.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.no.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.no.xlf</argument>
          </argument>
          <argument key="pl" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.pl.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.pl.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.pl.xlf</argument>
          </argument>
          <argument key="pt" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.pt.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.pt.xlf</argument>
          </argument>
          <argument key="pt_BR" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.pt_BR.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.pt_BR.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.pt_BR.xlf</argument>
          </argument>
          <argument key="ro" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.ro.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.ro.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.ro.xlf</argument>
          </argument>
          <argument key="ru" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.ru.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.ru.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.ru.xlf</argument>
          </argument>
          <argument key="sk" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.sk.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.sk.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.sk.xlf</argument>
          </argument>
          <argument key="sl" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.sl.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.sl.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.sl.xlf</argument>
          </argument>
          <argument key="sq" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.sq.xlf</argument>
          </argument>
          <argument key="sr_Cyrl" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.sr_Cyrl.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.sr_Cyrl.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.sr_Cyrl.xlf</argument>
          </argument>
          <argument key="sr_Latn" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.sr_Latn.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.sr_Latn.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.sr_Latn.xlf</argument>
          </argument>
          <argument key="sv" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.sv.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.sv.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.sv.xlf</argument>
          </argument>
          <argument key="th" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.th.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.th.xlf</argument>
          </argument>
          <argument key="tl" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.tl.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.tl.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.tl.xlf</argument>
          </argument>
          <argument key="tr" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.tr.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.tr.xlf</argument>
          </argument>
          <argument key="uk" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.uk.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.uk.xlf</argument>
          </argument>
          <argument key="vi" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.vi.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.vi.xlf</argument>
          </argument>
          <argument key="zh_CN" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.zh_CN.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/form/Resources/translations/validators.zh_CN.xlf</argument>
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.zh_CN.xlf</argument>
          </argument>
          <argument key="zh_TW" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/validator/Resources/translations/validators.zh_TW.xlf</argument>
          </argument>
          <argument key="pt_PT" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.pt_PT.xlf</argument>
          </argument>
          <argument key="ua" type="collection">
            <argument>/programming/prod-yourneeds/vendor/symfony/security/Core/Resources/translations/security.ua.xlf</argument>
          </argument>
        </argument>
      </argument>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
      <call method="setFallbackLocales">
        <argument type="collection">
          <argument>de</argument>
        </argument>
      </call>
    </service>
    <service id="translator.logging" class="Symfony\Component\Translation\LoggingTranslator" public="false">
      <tag name="monolog.logger" channel="translation"/>
      <argument type="service" id="translator.logging.inner"/>
      <argument type="service" id="monolog.logger.translation"/>
    </service>
    <service id="translator.formatter.default" class="Symfony\Component\Translation\Formatter\MessageFormatter" public="false">
      <argument type="service" id="identity_translator"/>
    </service>
    <service id="translation.loader.php" class="Symfony\Component\Translation\Loader\PhpFileLoader" public="false">
      <tag name="translation.loader" alias="php"/>
    </service>
    <service id="translation.loader.yml" class="Symfony\Component\Translation\Loader\YamlFileLoader" public="false">
      <tag name="translation.loader" alias="yaml" legacy_alias="yml" legacy-alias="yml"/>
    </service>
    <service id="translation.loader.xliff" class="Symfony\Component\Translation\Loader\XliffFileLoader" public="false">
      <tag name="translation.loader" alias="xlf" legacy_alias="xliff" legacy-alias="xliff"/>
    </service>
    <service id="translation.loader.po" class="Symfony\Component\Translation\Loader\PoFileLoader" public="false">
      <tag name="translation.loader" alias="po"/>
    </service>
    <service id="translation.loader.mo" class="Symfony\Component\Translation\Loader\MoFileLoader" public="false">
      <tag name="translation.loader" alias="mo"/>
    </service>
    <service id="translation.loader.qt" class="Symfony\Component\Translation\Loader\QtFileLoader" public="false">
      <tag name="translation.loader" alias="ts"/>
    </service>
    <service id="translation.loader.csv" class="Symfony\Component\Translation\Loader\CsvFileLoader" public="false">
      <tag name="translation.loader" alias="csv"/>
    </service>
    <service id="translation.loader.res" class="Symfony\Component\Translation\Loader\IcuResFileLoader" public="false">
      <tag name="translation.loader" alias="res"/>
    </service>
    <service id="translation.loader.dat" class="Symfony\Component\Translation\Loader\IcuDatFileLoader" public="false">
      <tag name="translation.loader" alias="dat"/>
    </service>
    <service id="translation.loader.ini" class="Symfony\Component\Translation\Loader\IniFileLoader" public="false">
      <tag name="translation.loader" alias="ini"/>
    </service>
    <service id="translation.loader.json" class="Symfony\Component\Translation\Loader\JsonFileLoader" public="false">
      <tag name="translation.loader" alias="json"/>
    </service>
    <service id="translation.dumper.php" class="Symfony\Component\Translation\Dumper\PhpFileDumper" public="false">
      <tag name="translation.dumper" alias="php"/>
    </service>
    <service id="translation.dumper.xliff" class="Symfony\Component\Translation\Dumper\XliffFileDumper" public="false">
      <tag name="translation.dumper" alias="xlf"/>
    </service>
    <service id="translation.dumper.po" class="Symfony\Component\Translation\Dumper\PoFileDumper" public="false">
      <tag name="translation.dumper" alias="po"/>
    </service>
    <service id="translation.dumper.mo" class="Symfony\Component\Translation\Dumper\MoFileDumper" public="false">
      <tag name="translation.dumper" alias="mo"/>
    </service>
    <service id="translation.dumper.yml" class="Symfony\Component\Translation\Dumper\YamlFileDumper" public="false">
      <tag name="translation.dumper" alias="yml"/>
    </service>
    <service id="translation.dumper.yaml" class="Symfony\Component\Translation\Dumper\YamlFileDumper" public="false">
      <tag name="translation.dumper" alias="yaml"/>
      <argument>yaml</argument>
    </service>
    <service id="translation.dumper.qt" class="Symfony\Component\Translation\Dumper\QtFileDumper" public="false">
      <tag name="translation.dumper" alias="ts"/>
    </service>
    <service id="translation.dumper.csv" class="Symfony\Component\Translation\Dumper\CsvFileDumper" public="false">
      <tag name="translation.dumper" alias="csv"/>
    </service>
    <service id="translation.dumper.ini" class="Symfony\Component\Translation\Dumper\IniFileDumper" public="false">
      <tag name="translation.dumper" alias="ini"/>
    </service>
    <service id="translation.dumper.json" class="Symfony\Component\Translation\Dumper\JsonFileDumper" public="false">
      <tag name="translation.dumper" alias="json"/>
    </service>
    <service id="translation.dumper.res" class="Symfony\Component\Translation\Dumper\IcuResFileDumper" public="false">
      <tag name="translation.dumper" alias="res"/>
    </service>
    <service id="translation.extractor.php" class="Symfony\Component\Translation\Extractor\PhpExtractor" public="false">
      <tag name="translation.extractor" alias="php"/>
    </service>
    <service id="translation.reader" class="Symfony\Component\Translation\Reader\TranslationReader" public="false">
      <call method="addLoader">
        <argument>php</argument>
        <argument type="service" id="translation.loader.php"/>
      </call>
      <call method="addLoader">
        <argument>yaml</argument>
        <argument type="service" id="translation.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument>yml</argument>
        <argument type="service" id="translation.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument>xlf</argument>
        <argument type="service" id="translation.loader.xliff"/>
      </call>
      <call method="addLoader">
        <argument>xliff</argument>
        <argument type="service" id="translation.loader.xliff"/>
      </call>
      <call method="addLoader">
        <argument>po</argument>
        <argument type="service" id="translation.loader.po"/>
      </call>
      <call method="addLoader">
        <argument>mo</argument>
        <argument type="service" id="translation.loader.mo"/>
      </call>
      <call method="addLoader">
        <argument>ts</argument>
        <argument type="service" id="translation.loader.qt"/>
      </call>
      <call method="addLoader">
        <argument>csv</argument>
        <argument type="service" id="translation.loader.csv"/>
      </call>
      <call method="addLoader">
        <argument>res</argument>
        <argument type="service" id="translation.loader.res"/>
      </call>
      <call method="addLoader">
        <argument>dat</argument>
        <argument type="service" id="translation.loader.dat"/>
      </call>
      <call method="addLoader">
        <argument>ini</argument>
        <argument type="service" id="translation.loader.ini"/>
      </call>
      <call method="addLoader">
        <argument>json</argument>
        <argument type="service" id="translation.loader.json"/>
      </call>
    </service>
    <service id="translation.extractor" class="Symfony\Component\Translation\Extractor\ChainExtractor" public="false">
      <call method="addExtractor">
        <argument>php</argument>
        <argument type="service" id="translation.extractor.php"/>
      </call>
      <call method="addExtractor">
        <argument>twig</argument>
        <argument type="service" id="twig.translation.extractor"/>
      </call>
    </service>
    <service id="translation.writer" class="Symfony\Component\Translation\Writer\TranslationWriter" public="false">
      <call method="addDumper">
        <argument>php</argument>
        <argument type="service" id="translation.dumper.php"/>
      </call>
      <call method="addDumper">
        <argument>xlf</argument>
        <argument type="service" id="translation.dumper.xliff"/>
      </call>
      <call method="addDumper">
        <argument>po</argument>
        <argument type="service" id="translation.dumper.po"/>
      </call>
      <call method="addDumper">
        <argument>mo</argument>
        <argument type="service" id="translation.dumper.mo"/>
      </call>
      <call method="addDumper">
        <argument>yml</argument>
        <argument type="service" id="translation.dumper.yml"/>
      </call>
      <call method="addDumper">
        <argument>yaml</argument>
        <argument type="service" id="translation.dumper.yaml"/>
      </call>
      <call method="addDumper">
        <argument>ts</argument>
        <argument type="service" id="translation.dumper.qt"/>
      </call>
      <call method="addDumper">
        <argument>csv</argument>
        <argument type="service" id="translation.dumper.csv"/>
      </call>
      <call method="addDumper">
        <argument>ini</argument>
        <argument type="service" id="translation.dumper.ini"/>
      </call>
      <call method="addDumper">
        <argument>json</argument>
        <argument type="service" id="translation.dumper.json"/>
      </call>
      <call method="addDumper">
        <argument>res</argument>
        <argument type="service" id="translation.dumper.res"/>
      </call>
    </service>
    <service id="translation.warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer" public="false">
      <tag name="container.service_subscriber" id="translator"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator._pu.0Tb.translation.warmer"/>
    </service>
    <service id="translator_listener" class="Symfony\Component\HttpKernel\EventListener\TranslatorListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="translator.default"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id=".cache_connection.GD_MSZC" class="Symfony\Component\Cache\Adapter\AbstractAdapter" public="false">
      <argument>redis://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createConnection"/>
    </service>
    <service id=".cache_connection.JKE6keX" class="Symfony\Component\Cache\Adapter\AbstractAdapter" public="false">
      <argument>memcached://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createConnection"/>
    </service>
    <service id="cache.property_access" class="Symfony\Component\Cache\Adapter\ArrayAdapter" public="false">
      <argument>0</argument>
      <argument>false</argument>
    </service>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="php"/>
      <tag name="container.hot_path"/>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>-1</argument>
      <argument>true</argument>
      <argument type="service" id="debug.file_link_formatter"/>
      <argument>true</argument>
    </service>
    <service id="debug.file_link_formatter" class="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" public="false">
      <argument>null</argument>
    </service>
    <service id="debug.log_processor" class="Symfony\Bridge\Monolog\Processor\DebugProcessor" public="false">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="routing.resolver" class="Symfony\Component\Config\Loader\LoaderResolver" public="false">
      <call method="addLoader">
        <argument type="service" id="sensio_framework_extra.routing.loader.annot_class"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="sensio_framework_extra.routing.loader.annot_dir"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="sensio_framework_extra.routing.loader.annot_file"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.xml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.php"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.glob"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.service"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.file"/>
      </call>
    </service>
    <service id="routing.loader.xml" class="Symfony\Component\Routing\Loader\XmlFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.yml" class="Symfony\Component\Routing\Loader\YamlFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.php" class="Symfony\Component\Routing\Loader\PhpFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.glob" class="Symfony\Component\Routing\Loader\GlobFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.directory" class="Symfony\Component\Routing\Loader\DirectoryLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.service" class="Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader" public="true">
      <argument type="service" id="controller_name_converter"/>
      <argument type="service" id="routing.resolver"/>
      <argument type="collection"/>
    </service>
    <service id="router.default" class="Symfony\Bundle\FrameworkBundle\Routing\Router" public="false">
      <tag name="monolog.logger" channel="router"/>
      <tag name="container.service_subscriber" id="routing.loader"/>
      <argument type="service" id=".service_locator.MAfdX1A.router.default"/>
      <argument>kernel::loadRoutes</argument>
      <argument type="collection">
        <argument key="cache_dir">/programming/prod-yourneeds/var/cache/dev</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\UrlGenerator</argument>
        <argument key="generator_base_class">Symfony\Component\Routing\Generator\UrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\PhpGeneratorDumper</argument>
        <argument key="generator_cache_class">srcApp_KernelDevDebugContainerUrlGenerator</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</argument>
        <argument key="matcher_base_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper</argument>
        <argument key="matcher_cache_class">srcApp_KernelDevDebugContainerUrlMatcher</argument>
        <argument key="strict_requirements">true</argument>
        <argument key="resource_type">service</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="parameter_bag" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.router" on-invalid="ignore"/>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext" public="false">
      <argument></argument>
      <argument>GET</argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="router.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer" public="false">
      <tag name="container.service_subscriber" id="router"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator.m8PwGkX.router.cache_warmer"/>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.request" on-invalid="ignore"/>
      <argument>/programming/prod-yourneeds</argument>
      <argument>true</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" class="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" public="true">
      <argument type="service" id="router.default"/>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" class="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" public="true">
      <argument type="service" id="twig" on-invalid="ignore"/>
      <argument>null</argument>
    </service>
    <service id="routing.loader.annotation" class="Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="annotations.cached_reader"/>
    </service>
    <service id="routing.loader.annotation.directory" class="Symfony\Component\Routing\Loader\AnnotationDirectoryLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id="routing.loader.annotation.file" class="Symfony\Component\Routing\Loader\AnnotationFileLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id=".2_PhpArrayAdapter~TWl4S.r" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" public="false">
      <argument>/programming/prod-yourneeds/var/cache/dev/annotations.php</argument>
      <argument type="service" id="cache.annotations"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id=".1_ArrayCache~TWl4S.r" class="Doctrine\Common\Cache\ArrayCache" public="false"/>
    <service id="annotations.reader" class="Doctrine\Common\Annotations\AnnotationReader" public="false">
      <call method="addGlobalIgnoredName">
        <argument>required</argument>
        <argument type="service" id="annotations.dummy_registry"/>
      </call>
    </service>
    <service id="annotations.dummy_registry" class="Doctrine\Common\Annotations\AnnotationRegistry" public="false">
      <call method="registerUniqueLoader">
        <argument>class_exists</argument>
      </call>
    </service>
    <service id="annotations.cached_reader" class="Doctrine\Common\Annotations\CachedReader" public="false">
      <tag name="annotations.cached_reader"/>
      <argument type="service" id="annotations.reader"/>
      <argument type="service" id=".1_ArrayCache~TWl4S.r"/>
      <argument>true</argument>
      <property name="cacheProviderBackup" type="service" id="annotations.cache"/>
    </service>
    <service id="annotations.filesystem_cache" class="Doctrine\Common\Cache\FilesystemCache" public="false">
      <argument></argument>
    </service>
    <service id="annotations.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="annotations.reader"/>
      <argument>/programming/prod-yourneeds/var/cache/dev/annotations.php</argument>
      <argument>#^Symfony\\(?:Component\\HttpKernel\\|Bundle\\FrameworkBundle\\Controller\\(?!AbstractController$|Controller$))#</argument>
      <argument>true</argument>
    </service>
    <service id="annotations.cache" class="Symfony\Component\Cache\DoctrineProvider" public="false">
      <argument type="service" id=".2_PhpArrayAdapter~TWl4S.r"/>
    </service>
    <service id="property_accessor" class="Symfony\Component\PropertyAccess\PropertyAccessor" public="false">
      <argument>false</argument>
      <argument>false</argument>
      <argument type="service" id="cache.property_access" on-invalid="ignore"/>
    </service>
    <service id="twig" class="Twig\Environment" public="true">
      <argument type="service" id="twig.loader.native_filesystem"/>
      <argument type="collection">
        <argument key="paths" type="collection">
          <argument key="/programming/prod-yourneeds/templates">templates</argument>
          <argument key="/programming/prod-yourneeds/src/Main/AdminBundle/Resources/views">MainAdminBundle</argument>
          <argument key="/programming/prod-yourneeds/src/Main/InsuranceBundle/Resources/views">MainInsuranceBundle</argument>
          <argument key="/programming/prod-yourneeds/src/Main/UserBundle/Resources/views">MainUserBundle</argument>
          <argument key="/programming/prod-yourneeds/src/AppBundle/Resources/views">AppBundle</argument>
        </argument>
        <argument key="debug">true</argument>
        <argument key="strict_variables">true</argument>
        <argument key="cache">false</argument>
        <argument key="charset">UTF-8</argument>
        <argument key="number_format" type="collection">
          <argument key="thousands_separator">.</argument>
          <argument key="decimals">0</argument>
          <argument key="decimal_point">.</argument>
        </argument>
        <argument key="exception_controller">twig.controller.exception::showAction</argument>
        <argument key="form_themes" type="collection">
          <argument>form_div_layout.html.twig</argument>
        </argument>
        <argument key="autoescape">name</argument>
        <argument key="default_path">/programming/prod-yourneeds/templates</argument>
        <argument key="date" type="collection">
          <argument key="format">F j, Y H:i</argument>
          <argument key="interval_format">%d days</argument>
          <argument key="timezone">null</argument>
        </argument>
      </argument>
      <call method="addExtension">
        <argument type="service" id="twig.extension.security_csrf"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.profiler"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.trans"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.assets"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.code"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.routing"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.yaml"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.expression"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.httpkernel"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.httpfoundation"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.form"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.logout_url"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.security"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="doctrine.twig.doctrine_extension"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="jms_serializer.twig_extension.serializer"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.debug"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.exercise.twig"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="webpack_encore.twig_entry_files_extension"/>
      </call>
      <call method="addGlobal">
        <argument>app</argument>
        <argument type="service" id="twig.app_variable"/>
      </call>
      <call method="addRuntimeLoader">
        <argument type="service" id="twig.runtime_loader"/>
      </call>
      <configurator service="twig.configurator.environment" method="configure"/>
    </service>
    <service id="twig.app_variable" class="Symfony\Bridge\Twig\AppVariable" public="false">
      <call method="setEnvironment">
        <argument>dev</argument>
      </call>
      <call method="setDebug">
        <argument>true</argument>
      </call>
      <call method="setTokenStorage">
        <argument type="service" id="security.token_storage" on-invalid="ignore"/>
      </call>
      <call method="setRequestStack">
        <argument type="service" id="request_stack" on-invalid="ignore"/>
      </call>
    </service>
    <service id="twig.template_iterator" class="Symfony\Bundle\TwigBundle\TemplateIterator" public="false">
      <argument type="service" id="kernel"/>
      <argument>/programming/prod-yourneeds/src</argument>
      <argument type="collection">
        <argument key="/programming/prod-yourneeds/templates">templates</argument>
        <argument key="/programming/prod-yourneeds/src/Main/AdminBundle/Resources/views">MainAdminBundle</argument>
        <argument key="/programming/prod-yourneeds/src/Main/InsuranceBundle/Resources/views">MainInsuranceBundle</argument>
        <argument key="/programming/prod-yourneeds/src/Main/UserBundle/Resources/views">MainUserBundle</argument>
        <argument key="/programming/prod-yourneeds/src/AppBundle/Resources/views">AppBundle</argument>
        <argument key="/programming/prod-yourneeds/vendor/symfony/twig-bridge/Resources/views/Form">null</argument>
      </argument>
      <argument>/programming/prod-yourneeds/templates</argument>
    </service>
    <service id="twig.loader.native_filesystem" class="Symfony\Bundle\TwigBundle\Loader\NativeFilesystemLoader" public="false">
      <tag name="twig.loader"/>
      <argument type="collection"/>
      <argument>/programming/prod-yourneeds</argument>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/templates</argument>
        <argument>templates</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/src/Main/AdminBundle/Resources/views</argument>
        <argument>MainAdminBundle</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/src/Main/InsuranceBundle/Resources/views</argument>
        <argument>MainInsuranceBundle</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/src/Main/UserBundle/Resources/views</argument>
        <argument>MainUserBundle</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/src/AppBundle/Resources/views</argument>
        <argument>AppBundle</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/vendor/doctrine/doctrine-bundle/Resources/views</argument>
        <argument>Doctrine</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/vendor/doctrine/doctrine-bundle/Resources/views</argument>
        <argument>!Doctrine</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/vendor/symfony/swiftmailer-bundle/Resources/views</argument>
        <argument>Swiftmailer</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/vendor/symfony/swiftmailer-bundle/Resources/views</argument>
        <argument>!Swiftmailer</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/vendor/symfony/framework-bundle/Resources/views</argument>
        <argument>Framework</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/vendor/symfony/framework-bundle/Resources/views</argument>
        <argument>!Framework</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/templates/bundles/TwigBundle</argument>
        <argument>Twig</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/vendor/symfony/twig-bundle/Resources/views</argument>
        <argument>Twig</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/vendor/symfony/twig-bundle/Resources/views</argument>
        <argument>!Twig</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/vendor/symfony/security-bundle/Resources/views</argument>
        <argument>Security</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/vendor/symfony/security-bundle/Resources/views</argument>
        <argument>!Security</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/src/AppBundle/Resources/views</argument>
        <argument>App</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/src/AppBundle/Resources/views</argument>
        <argument>!App</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/src/Main/UserBundle/Resources/views</argument>
        <argument>MainUser</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/src/Main/UserBundle/Resources/views</argument>
        <argument>!MainUser</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/src/Main/InsuranceBundle/Resources/views</argument>
        <argument>MainInsurance</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/src/Main/InsuranceBundle/Resources/views</argument>
        <argument>!MainInsurance</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/src/Main/AdminBundle/Resources/views</argument>
        <argument>MainAdmin</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/src/Main/AdminBundle/Resources/views</argument>
        <argument>!MainAdmin</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/templates</argument>
      </call>
      <call method="addPath">
        <argument>/programming/prod-yourneeds/vendor/symfony/twig-bridge/Resources/views/Form</argument>
      </call>
    </service>
    <service id="twig.loader.chain" class="Twig\Loader\ChainLoader" public="false"/>
    <service id="twig.extension.profiler" class="Symfony\Bridge\Twig\Extension\ProfilerExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="twig.profile"/>
      <argument>null</argument>
    </service>
    <service id="twig.profile" class="Twig\Profiler\Profile" public="false"/>
    <service id="data_collector.twig" class="Symfony\Bridge\Twig\DataCollector\TwigDataCollector" public="false">
      <tag name="data_collector" template="@WebProfiler/Collector/twig.html.twig" id="twig" priority="257"/>
      <argument type="service" id="twig.profile"/>
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.extension.trans" class="Symfony\Bridge\Twig\Extension\TranslationExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="translator.default" on-invalid="null"/>
    </service>
    <service id="twig.extension.assets" class="Symfony\Bridge\Twig\Extension\AssetExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="assets.packages"/>
    </service>
    <service id="twig.extension.code" class="Symfony\Bridge\Twig\Extension\CodeExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
      <argument>/programming/prod-yourneeds</argument>
      <argument>UTF-8</argument>
    </service>
    <service id="twig.extension.routing" class="Symfony\Bridge\Twig\Extension\RoutingExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="router.default"/>
    </service>
    <service id="twig.extension.yaml" class="Symfony\Bridge\Twig\Extension\YamlExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.extension.debug.stopwatch" class="Symfony\Bridge\Twig\Extension\StopwatchExtension" public="false">
      <argument>null</argument>
      <argument>true</argument>
    </service>
    <service id="twig.extension.expression" class="Symfony\Bridge\Twig\Extension\ExpressionExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.extension.httpkernel" class="Symfony\Bridge\Twig\Extension\HttpKernelExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.runtime.httpkernel" class="Symfony\Bridge\Twig\Extension\HttpKernelRuntime" public="false">
      <tag name="twig.runtime"/>
      <argument type="service" id="fragment.handler"/>
    </service>
    <service id="twig.extension.httpfoundation" class="Symfony\Bridge\Twig\Extension\HttpFoundationExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
    </service>
    <service id="twig.extension.debug" class="Twig\Extension\DebugExtension" public="false">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.extension.weblink" class="Symfony\Bridge\Twig\Extension\WebLinkExtension" public="false">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="twig.translation.extractor" class="Symfony\Bridge\Twig\Translation\TwigExtractor" public="false">
      <tag name="translation.extractor" alias="twig"/>
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.exception_listener" class="Symfony\Component\HttpKernel\EventListener\ExceptionListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <argument>twig.controller.exception::showAction</argument>
      <argument type="service" id="monolog.logger.request" on-invalid="null"/>
      <argument>true</argument>
    </service>
    <service id="twig.controller.exception" class="Symfony\Bundle\TwigBundle\Controller\ExceptionController" public="true">
      <argument type="service" id="twig"/>
      <argument>true</argument>
    </service>
    <service id="twig.controller.preview_error" class="Symfony\Bundle\TwigBundle\Controller\PreviewErrorController" public="true">
      <argument type="service" id="http_kernel"/>
      <argument>twig.controller.exception::showAction</argument>
    </service>
    <service id="twig.configurator.environment" class="Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator" public="false">
      <argument>F j, Y H:i</argument>
      <argument>%d days</argument>
      <argument>null</argument>
      <argument>0</argument>
      <argument>.</argument>
      <argument>.</argument>
    </service>
    <service id="twig.runtime_loader" class="Twig\RuntimeLoader\ContainerRuntimeLoader" public="false">
      <argument type="service" id=".service_locator.CS9cV_I"/>
    </service>
    <service id="twig.extension.form" class="Symfony\Bridge\Twig\Extension\FormExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="collection">
        <argument type="service" id="service_container"/>
        <argument>twig.form.renderer</argument>
      </argument>
    </service>
    <service id="twig.form.engine" class="Symfony\Bridge\Twig\Form\TwigRendererEngine" public="false">
      <argument>%twig.form.resources%</argument>
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.form.renderer" class="Symfony\Component\Form\FormRenderer" public="false">
      <tag name="twig.runtime"/>
      <argument type="service" id="twig.form.engine"/>
      <argument type="service" id="security.csrf.token_manager" on-invalid="null"/>
    </service>
    <service id="twig.command.debug" class="Symfony\Bridge\Twig\Command\DebugCommand" public="false">
      <tag name="console.command" command="debug:twig"/>
      <argument type="service" id="twig"/>
      <argument>/programming/prod-yourneeds</argument>
      <argument>%kernel.bundles_metadata%</argument>
      <argument>/programming/prod-yourneeds/templates</argument>
      <argument>/programming/prod-yourneeds/src</argument>
      <call method="setName">
        <argument>debug:twig</argument>
      </call>
    </service>
    <service id="twig.command.lint" class="Symfony\Bundle\TwigBundle\Command\LintCommand" public="false">
      <tag name="console.command" command="lint:twig"/>
      <argument type="service" id="twig"/>
      <call method="setName">
        <argument>lint:twig</argument>
      </call>
    </service>
    <service id="security.authorization_checker" class="Symfony\Component\Security\Core\Authorization\AuthorizationChecker" public="true">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument>false</argument>
    </service>
    <service id="security.token_storage" class="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage" public="true">
      <tag name="kernel.reset" method="setToken"/>
    </service>
    <service id="security.helper" class="Symfony\Component\Security\Core\Security" public="false">
      <argument type="service" id=".service_locator.jD4_ZG7"/>
    </service>
    <service id="security.user_value_resolver" class="Symfony\Component\Security\Http\Controller\UserValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="40"/>
      <argument type="service" id="security.token_storage"/>
    </service>
    <service id="security.authentication.manager" class="Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager" public="false">
      <argument type="iterator">
        <argument type="service" id="security.authentication.provider.guard.main"/>
        <argument type="service" id="security.authentication.provider.anonymous.main"/>
      </argument>
      <argument>true</argument>
      <call method="setEventDispatcher">
        <argument type="service" id="event_dispatcher"/>
      </call>
    </service>
    <service id="security.authentication.trust_resolver" class="Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver" public="false">
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="security.authentication.session_strategy" class="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy" public="false">
      <argument>migrate</argument>
    </service>
    <service id="security.authentication.session_strategy_noop" class="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy" public="false">
      <argument>none</argument>
    </service>
    <service id="security.encoder_factory.generic" class="Symfony\Component\Security\Core\Encoder\EncoderFactory" public="false">
      <argument type="collection">
        <argument key="Main\UserBundle\Entity\User" type="collection">
          <argument key="class">Symfony\Component\Security\Core\Encoder\BCryptPasswordEncoder</argument>
          <argument key="arguments" type="collection">
            <argument>13</argument>
          </argument>
        </argument>
      </argument>
    </service>
    <service id="security.user_password_encoder.generic" class="Symfony\Component\Security\Core\Encoder\UserPasswordEncoder" public="false">
      <argument type="service" id="security.encoder_factory.generic"/>
    </service>
    <service id="security.user_checker" class="Symfony\Component\Security\Core\User\UserChecker" public="false"/>
    <service id="security.expression_language" class="Symfony\Component\Security\Core\Authorization\ExpressionLanguage" public="false">
      <argument type="service" id="cache.security_expression_language"/>
    </service>
    <service id="security.authentication_utils" class="Symfony\Component\Security\Http\Authentication\AuthenticationUtils" public="true">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="security.role_hierarchy" class="Symfony\Component\Security\Core\Role\RoleHierarchy" public="false">
      <argument>%security.role_hierarchy.roles%</argument>
    </service>
    <service id="security.access.authenticated_voter" class="Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter" public="false">
      <tag name="security.voter" priority="250"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
    </service>
    <service id="security.access.role_hierarchy_voter" class="Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter" public="false">
      <tag name="security.voter" priority="245"/>
      <argument type="service" id="security.role_hierarchy"/>
    </service>
    <service id="security.access.expression_voter" class="Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter" public="false">
      <tag name="security.voter" priority="245"/>
      <argument type="service" id="security.expression_language"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.authorization_checker"/>
      <argument type="service" id="security.role_hierarchy" on-invalid="null"/>
    </service>
    <service id="security.firewall.map" class="Symfony\Bundle\SecurityBundle\Security\FirewallMap" public="false">
      <argument type="service" id=".service_locator.ko2dQVn"/>
      <argument type="iterator">
        <argument key="security.firewall.map.context.dev" type="service" id=".security.request_matcher.Iy.T22O"/>
        <argument key="security.firewall.map.context.main" type="service" id=".security.request_matcher.3UEFixr"/>
      </argument>
    </service>
    <service id="security.firewall.context" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext" public="false" abstract="true">
      <argument type="collection"/>
      <argument type="service" id="security.exception_listener"/>
      <argument></argument>
      <argument></argument>
    </service>
    <service id="security.firewall.config" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument></argument>
    </service>
    <service id="security.logout_url_generator" class="Symfony\Component\Security\Http\Logout\LogoutUrlGenerator" public="false">
      <argument type="service" id="request_stack" on-invalid="null"/>
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument type="service" id="security.token_storage" on-invalid="null"/>
      <call method="registerListener">
        <argument>main</argument>
        <argument>/logout</argument>
        <argument>logout</argument>
        <argument>_csrf_token</argument>
        <argument>null</argument>
        <argument>null</argument>
      </call>
    </service>
    <service id="security.user.provider.missing" class="Symfony\Component\Security\Core\User\MissingUserProvider" public="false" abstract="true">
      <argument></argument>
    </service>
    <service id="security.user.provider.in_memory" class="Symfony\Component\Security\Core\User\InMemoryUserProvider" public="false" abstract="true"/>
    <service id="security.user.provider.in_memory.user" class="Symfony\Component\Security\Core\User\User" public="false" abstract="true">
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.1.</deprecated>
    </service>
    <service id="security.user.provider.ldap" class="Symfony\Component\Security\Core\User\LdapUserProvider" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
    </service>
    <service id="security.user.provider.chain" class="Symfony\Component\Security\Core\User\ChainUserProvider" public="false" abstract="true"/>
    <service id="security.http_utils" class="Symfony\Component\Security\Http\HttpUtils" public="false">
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument>{^https?://%s$}i</argument>
      <argument>null</argument>
    </service>
    <service id="security.validator.user_password" class="Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator" public="false">
      <tag name="validator.constraint_validator" alias="security.validator.user_password"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.encoder_factory.generic"/>
    </service>
    <service id="cache.security_expression_language" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <argument>-5dISwiEge</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/programming/prod-yourneeds/var/cache/dev/pools</argument>
      <argument type="service" id="monolog.logger.cache" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="security.authentication.listener.anonymous" class="Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener" public="false">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="security.authentication.manager"/>
    </service>
    <service id="security.authentication.provider.anonymous" class="Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider" public="false">
      <argument></argument>
    </service>
    <service id="security.authentication.retry_entry_point" class="Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint" public="false">
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="security.authentication.basic_entry_point" class="Symfony\Component\Security\Http\EntryPoint\BasicAuthenticationEntryPoint" public="false"/>
    <service id="security.channel_listener" class="Symfony\Component\Security\Http\Firewall\ChannelListener" public="false">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.access_map"/>
      <argument type="service" id="security.authentication.retry_entry_point"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.access_map" class="Symfony\Component\Security\Http\AccessMap" public="false">
      <call method="add">
        <argument type="service" id=".security.request_matcher.5dJADCx"/>
        <argument type="collection">
          <argument>ROLE_ADMIN</argument>
        </argument>
        <argument>null</argument>
      </call>
      <call method="add">
        <argument type="service" id=".security.request_matcher.QWkwKV5"/>
        <argument type="collection">
          <argument>IS_AUTHENTICATED_ANONYMOUSLY</argument>
        </argument>
        <argument>null</argument>
      </call>
      <call method="add">
        <argument type="service" id=".security.request_matcher.LCGobJo"/>
        <argument type="collection">
          <argument>ROLE_USER</argument>
        </argument>
        <argument>null</argument>
      </call>
    </service>
    <service id="security.context_listener" class="Symfony\Component\Security\Http\Firewall\ContextListener" public="false">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="iterator">
        <argument type="service" id="security.user.provider.concrete.our_users"/>
      </argument>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
    </service>
    <service id="security.logout_listener" class="Symfony\Component\Security\Http\Firewall\LogoutListener" public="false" abstract="true">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="service" id="security.logout.success_handler"/>
      <argument></argument>
      <call method="addHandler">
        <argument type="service" id="security.logout.handler.csrf_token_clearing"/>
      </call>
    </service>
    <service id="security.logout.handler.session" class="Symfony\Component\Security\Http\Logout\SessionLogoutHandler" public="false"/>
    <service id="security.logout.handler.cookie_clearing" class="Symfony\Component\Security\Http\Logout\CookieClearingLogoutHandler" public="false" abstract="true"/>
    <service id="security.logout.success_handler" class="Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler" public="false" abstract="true">
      <argument type="service" id="security.http_utils"/>
      <argument>/</argument>
    </service>
    <service id="security.authentication.form_entry_point" class="Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint" public="false" abstract="true">
      <argument type="service" id="http_kernel"/>
    </service>
    <service id="security.authentication.listener.abstract" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="security.authentication.session_strategy"/>
      <argument type="service" id="security.http_utils"/>
      <argument></argument>
      <argument type="service" id="security.authentication.success_handler"/>
      <argument type="service" id="security.authentication.failure_handler"/>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
    </service>
    <service id="security.authentication.custom_success_handler" class="Symfony\Component\Security\Http\Authentication\CustomAuthenticationSuccessHandler" public="false" abstract="true">
      <argument></argument>
      <argument type="collection"/>
      <argument></argument>
    </service>
    <service id="security.authentication.success_handler" class="Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler" public="false" abstract="true">
      <argument type="service" id="security.http_utils"/>
      <argument type="collection"/>
    </service>
    <service id="security.authentication.custom_failure_handler" class="Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler" public="false" abstract="true">
      <argument></argument>
      <argument type="collection"/>
    </service>
    <service id="security.authentication.failure_handler" class="Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.form" class="Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener" public="false" abstract="true">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="security.authentication.session_strategy"/>
      <argument type="service" id="security.http_utils"/>
      <argument></argument>
      <argument type="service" id="security.authentication.success_handler"/>
      <argument type="service" id="security.authentication.failure_handler"/>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.simple_form" class="Symfony\Component\Security\Http\Firewall\SimpleFormAuthenticationListener" public="false" abstract="true">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="security.authentication.session_strategy"/>
      <argument type="service" id="security.http_utils"/>
      <argument></argument>
      <argument type="service" id="security.authentication.success_handler"/>
      <argument type="service" id="security.authentication.failure_handler"/>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.2.</deprecated>
    </service>
    <service id="security.authentication.simple_success_failure_handler" class="Symfony\Component\Security\Http\Authentication\SimpleAuthenticationHandler" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument></argument>
      <argument type="service" id="security.authentication.success_handler"/>
      <argument type="service" id="security.authentication.failure_handler"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.2.</deprecated>
    </service>
    <service id="security.authentication.listener.simple_preauth" class="Symfony\Component\Security\Http\Firewall\SimplePreAuthenticationListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.2.</deprecated>
    </service>
    <service id="security.authentication.listener.x509" class="Symfony\Component\Security\Http\Firewall\X509AuthenticationListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.json" class="Symfony\Component\Security\Http\Firewall\UsernamePasswordJsonAuthenticationListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="security.http_utils"/>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
      <argument type="service" id="property_accessor" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.remote_user" class="Symfony\Component\Security\Http\Firewall\RemoteUserAuthenticationListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.basic" class="Symfony\Component\Security\Http\Firewall\BasicAuthenticationListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.authentication.provider.dao" class="Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="security.encoder_factory.generic"/>
      <argument>true</argument>
    </service>
    <service id="security.authentication.provider.ldap_bind" class="Symfony\Component\Security\Core\Authentication\Provider\LdapBindAuthenticationProvider" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument>true</argument>
    </service>
    <service id="security.authentication.provider.simple" class="Symfony\Component\Security\Core\Authentication\Provider\SimpleAuthenticationProvider" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument>null</argument>
      <deprecated>The "%service_id%" service is deprecated since Symfony 4.2.</deprecated>
    </service>
    <service id="security.authentication.provider.pre_authenticated" class="Symfony\Component\Security\Core\Authentication\Provider\PreAuthenticatedAuthenticationProvider" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
    </service>
    <service id="security.exception_listener" class="Symfony\Component\Security\Http\Firewall\ExceptionListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.http_utils"/>
      <argument></argument>
      <argument type="service" id="security.authentication.entry_point" on-invalid="null"/>
      <argument>/</argument>
      <argument type="service" id="security.access.denied_handler" on-invalid="null"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id="security.authentication.switchuser_listener" class="Symfony\Component\Security\Http\Firewall\SwitchUserListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>_switch_user</argument>
      <argument>ROLE_ALLOWED_TO_SWITCH</argument>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id="security.access_listener" class="Symfony\Component\Security\Http\Firewall\AccessListener" public="false">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="security.access_map"/>
      <argument type="service" id="security.authentication.manager"/>
    </service>
    <service id="security.authentication.listener.rememberme" class="Symfony\Component\Security\Http\Firewall\RememberMeListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.rememberme"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
      <argument></argument>
      <argument type="service" id="security.authentication.session_strategy"/>
    </service>
    <service id="security.authentication.provider.rememberme" class="Symfony\Component\Security\Core\Authentication\Provider\RememberMeAuthenticationProvider" public="false" abstract="true">
      <argument></argument>
    </service>
    <service id="security.rememberme.token.provider.in_memory" class="Symfony\Component\Security\Core\Authentication\RememberMe\InMemoryTokenProvider" public="false"/>
    <service id="security.authentication.rememberme.services.abstract" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="collection"/>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.authentication.rememberme.services.persistent" class="Symfony\Component\Security\Http\RememberMe\PersistentTokenBasedRememberMeServices" public="false" abstract="true">
      <argument type="collection"/>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.authentication.rememberme.services.simplehash" class="Symfony\Component\Security\Http\RememberMe\TokenBasedRememberMeServices" public="false" abstract="true">
      <argument type="collection"/>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.rememberme.response_listener" class="Symfony\Component\Security\Http\RememberMe\ResponseListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="templating.helper.logout_url" class="Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper" public="false">
      <tag name="templating.helper" alias="logout_url"/>
      <argument type="service" id="security.logout_url_generator"/>
    </service>
    <service id="templating.helper.security" class="Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper" public="false">
      <tag name="templating.helper" alias="security"/>
      <argument type="service" id="security.authorization_checker" on-invalid="ignore"/>
    </service>
    <service id="twig.extension.logout_url" class="Symfony\Bridge\Twig\Extension\LogoutUrlExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="security.logout_url_generator"/>
    </service>
    <service id="twig.extension.security" class="Symfony\Bridge\Twig\Extension\SecurityExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="security.authorization_checker" on-invalid="ignore"/>
    </service>
    <service id="data_collector.security" class="Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector" public="false">
      <tag name="data_collector" template="@Security/Collector/security.html.twig" id="security" priority="270"/>
      <argument type="service" id="security.token_storage" on-invalid="ignore"/>
      <argument type="service" id="security.role_hierarchy"/>
      <argument type="service" id="security.logout_url_generator"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="security.firewall.map"/>
      <argument type="service" id="debug.security.firewall" on-invalid="null"/>
    </service>
    <service id="security.authentication.guard_handler" class="Symfony\Component\Security\Guard\GuardAuthenticatorHandler" public="false">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
      <argument type="collection"/>
      <call method="setSessionAuthenticationStrategy">
        <argument type="service" id="security.authentication.session_strategy"/>
      </call>
    </service>
    <service id="security.authentication.provider.guard" class="Symfony\Component\Security\Guard\Provider\GuardAuthenticationProvider" public="false" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
    </service>
    <service id="security.authentication.listener.guard" class="Symfony\Component\Security\Guard\Firewall\GuardAuthenticationListener" public="false" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.authentication.guard_handler"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <argument></argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="debug.security.access.decision_manager" class="Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager" public="false">
      <argument type="service" id="debug.security.access.decision_manager.inner"/>
    </service>
    <service id="debug.security.voter.vote_listener" class="Symfony\Bundle\SecurityBundle\EventListener\VoteListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
    </service>
    <service id="debug.security.firewall" class="Symfony\Bundle\SecurityBundle\Debug\TraceableFirewallListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="security.firewall.map"/>
      <argument type="service" id="event_dispatcher"/>
      <argument type="service" id="security.logout_url_generator"/>
    </service>
    <service id="security.user.provider.concrete.our_users" class="Symfony\Bridge\Doctrine\Security\User\EntityUserProvider" public="false">
      <argument type="service" id="doctrine"/>
      <argument>Main\UserBundle\Entity\User</argument>
      <argument>email</argument>
      <argument>null</argument>
    </service>
    <service id="security.firewall.map.config.dev" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig" public="false">
      <argument>dev</argument>
      <argument>security.user_checker</argument>
      <argument>.security.request_matcher.Iy.T22O</argument>
      <argument>false</argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument></argument>
      <argument type="collection"/>
      <argument></argument>
    </service>
    <service id=".security.request_matcher.Iy.T22O" class="Symfony\Component\HttpFoundation\RequestMatcher" public="false">
      <argument>^/(_(profiler|wdt)|css|images|js)/</argument>
    </service>
    <service id="security.firewall.map.context.dev" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext" public="false">
      <argument type="iterator"/>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="security.firewall.map.config.dev"/>
    </service>
    <service id="security.firewall.map.config.main" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig" public="false">
      <argument>main</argument>
      <argument>security.user_checker</argument>
      <argument>.security.request_matcher.3UEFixr</argument>
      <argument>true</argument>
      <argument>false</argument>
      <argument>security.user.provider.concrete.our_users</argument>
      <argument>main</argument>
      <argument>Main\UserBundle\Security\LoginFormAuthentificator</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection">
        <argument>switch_user</argument>
        <argument>guard</argument>
        <argument>anonymous</argument>
      </argument>
      <argument type="collection">
        <argument key="parameter">_switch_user</argument>
        <argument key="role">ROLE_ALLOWED_TO_SWITCH</argument>
        <argument key="stateless">false</argument>
      </argument>
    </service>
    <service id=".security.request_matcher.3UEFixr" class="Symfony\Component\HttpFoundation\RequestMatcher" public="false">
      <argument>^/</argument>
    </service>
    <service id="security.context_listener.0" class="Symfony\Component\Security\Http\Firewall\ContextListener" public="false">
      <argument type="service" id="security.token_storage"/>
      <argument type="iterator">
        <argument type="service" id="security.user.provider.concrete.our_users"/>
      </argument>
      <argument>main</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
    </service>
    <service id="security.logout_listener.main" class="Symfony\Component\Security\Http\Firewall\LogoutListener" public="false">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="service" id="security.logout.success_handler.main"/>
      <argument type="collection">
        <argument key="csrf_parameter">_csrf_token</argument>
        <argument key="csrf_token_id">logout</argument>
        <argument key="logout_path">/logout</argument>
      </argument>
      <call method="addHandler">
        <argument type="service" id="security.logout.handler.csrf_token_clearing"/>
      </call>
      <call method="addHandler">
        <argument type="service" id="security.logout.handler.session"/>
      </call>
    </service>
    <service id="security.logout.success_handler.main" class="Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler" public="false">
      <argument type="service" id="security.http_utils"/>
      <argument>/</argument>
    </service>
    <service id="security.authentication.provider.guard.main" class="Symfony\Component\Security\Guard\Provider\GuardAuthenticationProvider" public="false">
      <argument type="iterator">
        <argument type="service" id="Main\UserBundle\Security\LoginFormAuthentificator"/>
      </argument>
      <argument type="service" id="security.user.provider.concrete.our_users"/>
      <argument>main</argument>
      <argument type="service" id="security.user_checker"/>
    </service>
    <service id="security.authentication.listener.guard.main" class="Symfony\Component\Security\Guard\Firewall\GuardAuthenticationListener" public="false">
      <tag name="security.remember_me_aware" id="main" provider="security.user.provider.concrete.our_users"/>
      <argument type="service" id="security.authentication.guard_handler"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument>main</argument>
      <argument type="iterator">
        <argument type="service" id="Main\UserBundle\Security\LoginFormAuthentificator"/>
      </argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
    </service>
    <service id="security.authentication.listener.anonymous.main" class="Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener" public="false">
      <argument type="service" id="security.token_storage"/>
      <argument>%container.build_hash%</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument type="service" id="security.authentication.manager"/>
    </service>
    <service id="security.authentication.provider.anonymous.main" class="Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider" public="false">
      <argument>%container.build_hash%</argument>
    </service>
    <service id="security.authentication.switchuser_listener.main" class="Symfony\Component\Security\Http\Firewall\SwitchUserListener" public="false">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.user.provider.concrete.our_users"/>
      <argument type="service" id="security.user_checker"/>
      <argument>main</argument>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>_switch_user</argument>
      <argument>ROLE_ALLOWED_TO_SWITCH</argument>
      <argument type="service" id="event_dispatcher" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id="security.exception_listener.main" class="Symfony\Component\Security\Http\Firewall\ExceptionListener" public="false">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.http_utils"/>
      <argument>main</argument>
      <argument type="service" id="Main\UserBundle\Security\LoginFormAuthentificator"/>
      <argument>/</argument>
      <argument>null</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id="security.firewall.map.context.main" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext" public="false">
      <argument type="iterator">
        <argument type="service" id="security.channel_listener"/>
        <argument type="service" id="security.context_listener.0"/>
        <argument type="service" id="security.authentication.listener.guard.main"/>
        <argument type="service" id="security.authentication.listener.anonymous.main"/>
        <argument type="service" id="security.authentication.switchuser_listener.main"/>
        <argument type="service" id="security.access_listener"/>
      </argument>
      <argument type="service" id="security.exception_listener.main"/>
      <argument type="service" id="security.logout_listener.main"/>
      <argument type="service" id="security.firewall.map.config.main"/>
    </service>
    <service id=".service_locator.ko2dQVn" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="security.firewall.map.context.dev" type="service" id="security.firewall.map.context.dev"/>
        <argument key="security.firewall.map.context.main" type="service" id="security.firewall.map.context.main"/>
      </argument>
    </service>
    <service id=".security.request_matcher.5dJADCx" class="Symfony\Component\HttpFoundation\RequestMatcher" public="false">
      <argument>^/admin</argument>
    </service>
    <service id=".security.request_matcher.QWkwKV5" class="Symfony\Component\HttpFoundation\RequestMatcher" public="false">
      <argument>^/login</argument>
    </service>
    <service id=".security.request_matcher.LCGobJo" class="Symfony\Component\HttpFoundation\RequestMatcher" public="false">
      <argument>^/manager/profile</argument>
    </service>
    <service id="security.command.user_password_encoder" class="Symfony\Bundle\SecurityBundle\Command\UserPasswordEncoderCommand" public="false">
      <tag name="console.command" command="security:encode-password"/>
      <argument type="service" id="security.encoder_factory.generic"/>
      <argument type="collection">
        <argument>Main\UserBundle\Entity\User</argument>
      </argument>
      <call method="setName">
        <argument>security:encode-password</argument>
      </call>
    </service>
    <service id="markdown.parser.min" class="Knp\Bundle\MarkdownBundle\Parser\Preset\Min" public="false">
      <tag name="markdown.parser" alias="min"/>
    </service>
    <service id="markdown.parser.light" class="Knp\Bundle\MarkdownBundle\Parser\Preset\Light" public="false">
      <tag name="markdown.parser" alias="light"/>
    </service>
    <service id="markdown.parser.medium" class="Knp\Bundle\MarkdownBundle\Parser\Preset\Medium" public="false">
      <tag name="markdown.parser" alias="medium"/>
    </service>
    <service id="markdown.parser.max" class="Knp\Bundle\MarkdownBundle\Parser\Preset\Max" public="false">
      <tag name="markdown.parser" alias="max"/>
    </service>
    <service id="markdown.parser.flavored" class="Knp\Bundle\MarkdownBundle\Parser\Preset\Flavored" public="false">
      <tag name="markdown.parser" alias="flavored"/>
    </service>
    <service id="markdown.parser.parser_manager" class="Knp\Bundle\MarkdownBundle\Parser\ParserManager" public="false">
      <call method="addParser">
        <argument type="service" id="markdown.parser.min"/>
        <argument>min</argument>
      </call>
      <call method="addParser">
        <argument type="service" id="markdown.parser.light"/>
        <argument>light</argument>
      </call>
      <call method="addParser">
        <argument type="service" id="markdown.parser.medium"/>
        <argument>medium</argument>
      </call>
      <call method="addParser">
        <argument type="service" id="markdown.parser.max"/>
        <argument>default</argument>
      </call>
      <call method="addParser">
        <argument type="service" id="markdown.parser.flavored"/>
        <argument>flavored</argument>
      </call>
    </service>
    <service id="twig.extension.exercise.twig" class="Knp\Bundle\MarkdownBundle\Twig\Extension\MarkdownTwigExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id="markdown.parser.parser_manager"/>
    </service>
    <service id=".1_ServiceLocator~xve27Pd" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="webpack_encore.entrypoint_lookup" type="service" id="webpack_encore.entrypoint_lookup"/>
        <argument key="webpack_encore.entrypoint_lookup_collection" type="service" id="webpack_encore.entrypoint_lookup_collection"/>
        <argument key="webpack_encore.tag_renderer" type="service" id="webpack_encore.tag_renderer"/>
      </argument>
    </service>
    <service id="webpack_encore.entrypoint_lookup" class="Symfony\WebpackEncoreBundle\Asset\EntrypointLookup" public="false">
      <argument type="service" id="webpack_encore.entrypoint_lookup[_default]"/>
    </service>
    <service id="webpack_encore.entrypoint_lookup_collection" class="Symfony\WebpackEncoreBundle\Asset\EntrypointLookupCollection" public="false">
      <argument type="service" id=".service_locator._faFGeI"/>
    </service>
    <service id="webpack_encore.tag_renderer" class="Symfony\WebpackEncoreBundle\Asset\TagRenderer" public="false">
      <argument type="service" id="webpack_encore.entrypoint_lookup_collection"/>
      <argument type="service" id="assets.packages"/>
    </service>
    <service id="webpack_encore.twig_entry_files_extension" class="Symfony\WebpackEncoreBundle\Twig\EntryFilesTwigExtension" public="false">
      <tag name="twig.extension"/>
      <argument type="service" id=".1_ServiceLocator~xve27Pd"/>
    </service>
    <service id="webpack_encore.entrypoint_lookup[_default]" class="Symfony\WebpackEncoreBundle\Asset\EntrypointLookup">
      <argument>/programming/prod-yourneeds/public/build/entrypoints.json</argument>
    </service>
    <service id=".service_locator._faFGeI" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="_default" type="service" id="webpack_encore.entrypoint_lookup[_default]"/>
      </argument>
    </service>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.AppBundle\Controller\AbstractARCustomController" class="AppBundle\Controller\AbstractARCustomController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Controller\AbstractARCustomController" class="AppBundle\Controller\AbstractARCustomController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.AppBundle\Controller\BaseController" class="AppBundle\Controller\BaseController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Controller\BaseController" class="AppBundle\Controller\BaseController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.AppBundle\Controller\DocumentController" class="AppBundle\Controller\DocumentController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Controller\DocumentController" class="AppBundle\Controller\DocumentController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.AppBundle\Controller\ExceptionController" class="AppBundle\Controller\ExceptionController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Controller\ExceptionController" class="AppBundle\Controller\ExceptionController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.AppBundle\Controller\HelpController" class="AppBundle\Controller\HelpController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Controller\HelpController" class="AppBundle\Controller\HelpController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.AppBundle\Controller\MainController" class="AppBundle\Controller\MainController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Controller\MainController" class="AppBundle\Controller\MainController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.AppBundle\Controller\MessageController" class="AppBundle\Controller\MessageController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Controller\MessageController" class="AppBundle\Controller\MessageController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.AppBundle\Controller\NewsController" class="AppBundle\Controller\NewsController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Controller\NewsController" class="AppBundle\Controller\NewsController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.AppBundle\Controller\ProjectController" class="AppBundle\Controller\ProjectController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Controller\ProjectController" class="AppBundle\Controller\ProjectController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.AppBundle\Form\Message\EditMessageFormType" class="AppBundle\Form\Message\EditMessageFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Form\Message\EditMessageFormType" class="AppBundle\Form\Message\EditMessageFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.AppBundle\Form\Project\EditProjectFormType" class="AppBundle\Form\Project\EditProjectFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Form\Project\EditProjectFormType" class="AppBundle\Form\Project\EditProjectFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.AppBundle\Form\Type\TagFormType" class="AppBundle\Form\Type\TagFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Form\Type\TagFormType" class="AppBundle\Form\Type\TagFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeExtensionInterface.0.AppBundle\Form\TypeExtension\HelpFormExtension" class="AppBundle\Form\TypeExtension\HelpFormExtension" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Form\TypeExtension\HelpFormExtension" class="AppBundle\Form\TypeExtension\HelpFormExtension" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.AppBundle\Listener\CustomExceptionListener" class="AppBundle\Listener\CustomExceptionListener" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Listener\CustomExceptionListener" class="AppBundle\Listener\CustomExceptionListener" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.AppBundle\Repository\DocumentRepository" class="AppBundle\Repository\DocumentRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Repository\DocumentRepository" class="AppBundle\Repository\DocumentRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.AppBundle\Repository\DocumentTypeRepository" class="AppBundle\Repository\DocumentTypeRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Repository\DocumentTypeRepository" class="AppBundle\Repository\DocumentTypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.AppBundle\Repository\FaqQuestionRepository" class="AppBundle\Repository\FaqQuestionRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Repository\FaqQuestionRepository" class="AppBundle\Repository\FaqQuestionRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.AppBundle\Repository\MediaRepository" class="AppBundle\Repository\MediaRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Repository\MediaRepository" class="AppBundle\Repository\MediaRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.AppBundle\Repository\MediaTypeRepository" class="AppBundle\Repository\MediaTypeRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Repository\MediaTypeRepository" class="AppBundle\Repository\MediaTypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.AppBundle\Repository\MessageRepository" class="AppBundle\Repository\MessageRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Repository\MessageRepository" class="AppBundle\Repository\MessageRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.AppBundle\Repository\MessageTypeRepository" class="AppBundle\Repository\MessageTypeRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Repository\MessageTypeRepository" class="AppBundle\Repository\MessageTypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.AppBundle\Repository\ProjectRepository" class="AppBundle\Repository\ProjectRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.AppBundle\Repository\ProjectRepository" class="AppBundle\Repository\ProjectRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\AdminBundle\Controller\AdminController" class="Main\AdminBundle\Controller\AdminController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\AdminBundle\Controller\AdminController" class="Main\AdminBundle\Controller\AdminController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\AdminBundle\Controller\Api\AddressImportController" class="Main\AdminBundle\Controller\Api\AddressImportController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\AdminBundle\Controller\Api\AddressImportController" class="Main\AdminBundle\Controller\Api\AddressImportController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\AdminBundle\Controller\Api\AnimalDogBreedImportController" class="Main\AdminBundle\Controller\Api\AnimalDogBreedImportController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\AdminBundle\Controller\Api\AnimalDogBreedImportController" class="Main\AdminBundle\Controller\Api\AnimalDogBreedImportController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\AdminBundle\Controller\Api\JobGroupImportController" class="Main\AdminBundle\Controller\Api\JobGroupImportController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\AdminBundle\Controller\Api\JobGroupImportController" class="Main\AdminBundle\Controller\Api\JobGroupImportController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\AdminBundle\Controller\Api\QuestionLoadController" class="Main\AdminBundle\Controller\Api\QuestionLoadController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\AdminBundle\Controller\Api\QuestionLoadController" class="Main\AdminBundle\Controller\Api\QuestionLoadController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\AdminBundle\Repository\AnimalDogBreedRepository" class="Main\AdminBundle\Repository\AnimalDogBreedRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\AdminBundle\Repository\AnimalDogBreedRepository" class="Main\AdminBundle\Repository\AnimalDogBreedRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\UserBundle\Controller\Admin\AddressController" class="Main\UserBundle\Controller\Admin\AddressController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Controller\Admin\AddressController" class="Main\UserBundle\Controller\Admin\AddressController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\UserBundle\Controller\Admin\AdminUserController" class="Main\UserBundle\Controller\Admin\AdminUserController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Controller\Admin\AdminUserController" class="Main\UserBundle\Controller\Admin\AdminUserController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\UserBundle\Controller\Admin\BankController" class="Main\UserBundle\Controller\Admin\BankController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Controller\Admin\BankController" class="Main\UserBundle\Controller\Admin\BankController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\UserBundle\Controller\Web\ActivityController" class="Main\UserBundle\Controller\Web\ActivityController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Controller\Web\ActivityController" class="Main\UserBundle\Controller\Web\ActivityController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\UserBundle\Controller\Web\BenefitController" class="Main\UserBundle\Controller\Web\BenefitController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Controller\Web\BenefitController" class="Main\UserBundle\Controller\Web\BenefitController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\UserBundle\Controller\Web\ManagerController" class="Main\UserBundle\Controller\Web\ManagerController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Controller\Web\ManagerController" class="Main\UserBundle\Controller\Web\ManagerController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\UserBundle\Controller\Web\MandateController" class="Main\UserBundle\Controller\Web\MandateController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Controller\Web\MandateController" class="Main\UserBundle\Controller\Web\MandateController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\UserBundle\Controller\Web\SecurityController" class="Main\UserBundle\Controller\Web\SecurityController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Controller\Web\SecurityController" class="Main\UserBundle\Controller\Web\SecurityController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\UserBundle\Form\Address\Admin\EditAddressFormType" class="Main\UserBundle\Form\Address\Admin\EditAddressFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Form\Address\Admin\EditAddressFormType" class="Main\UserBundle\Form\Address\Admin\EditAddressFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\UserBundle\Form\Address\Admin\NewAddressFormType" class="Main\UserBundle\Form\Address\Admin\NewAddressFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Form\Address\Admin\NewAddressFormType" class="Main\UserBundle\Form\Address\Admin\NewAddressFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\UserBundle\Form\Bank\Admin\EditBankFormType" class="Main\UserBundle\Form\Bank\Admin\EditBankFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Form\Bank\Admin\EditBankFormType" class="Main\UserBundle\Form\Bank\Admin\EditBankFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\UserBundle\Form\Bank\Admin\NewBankFormType" class="Main\UserBundle\Form\Bank\Admin\NewBankFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Form\Bank\Admin\NewBankFormType" class="Main\UserBundle\Form\Bank\Admin\NewBankFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\UserBundle\Form\LoginForm" class="Main\UserBundle\Form\LoginForm" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Form\LoginForm" class="Main\UserBundle\Form\LoginForm" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\UserBundle\Form\NewsletterFormType" class="Main\UserBundle\Form\NewsletterFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Form\NewsletterFormType" class="Main\UserBundle\Form\NewsletterFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\UserBundle\Form\RegistrationForm" class="Main\UserBundle\Form\RegistrationForm" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Form\RegistrationForm" class="Main\UserBundle\Form\RegistrationForm" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\UserBundle\Form\User\Admin\EditUserFormType" class="Main\UserBundle\Form\User\Admin\EditUserFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Form\User\Admin\EditUserFormType" class="Main\UserBundle\Form\User\Admin\EditUserFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\UserBundle\Form\User\Admin\NewUserFormType" class="Main\UserBundle\Form\User\Admin\NewUserFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Form\User\Admin\NewUserFormType" class="Main\UserBundle\Form\User\Admin\NewUserFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\UserBundle\Form\UserRegistrationForm" class="Main\UserBundle\Form\UserRegistrationForm" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Form\UserRegistrationForm" class="Main\UserBundle\Form\UserRegistrationForm" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\AchievementRepository" class="Main\UserBundle\Repository\AchievementRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\AchievementRepository" class="Main\UserBundle\Repository\AchievementRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\ActivityRepository" class="Main\UserBundle\Repository\ActivityRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\ActivityRepository" class="Main\UserBundle\Repository\ActivityRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\AddressRepository" class="Main\UserBundle\Repository\AddressRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\AddressRepository" class="Main\UserBundle\Repository\AddressRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\AddressTypeRepository" class="Main\UserBundle\Repository\AddressTypeRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\AddressTypeRepository" class="Main\UserBundle\Repository\AddressTypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\BankAccountRepository" class="Main\UserBundle\Repository\BankAccountRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\BankAccountRepository" class="Main\UserBundle\Repository\BankAccountRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\BenefitPartnerRepository" class="Main\UserBundle\Repository\BenefitPartnerRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\BenefitPartnerRepository" class="Main\UserBundle\Repository\BenefitPartnerRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\CityRepository" class="Main\UserBundle\Repository\CityRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\CityRepository" class="Main\UserBundle\Repository\CityRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\CountryRepository" class="Main\UserBundle\Repository\CountryRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\CountryRepository" class="Main\UserBundle\Repository\CountryRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\FamilyStatusRepository" class="Main\UserBundle\Repository\FamilyStatusRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\FamilyStatusRepository" class="Main\UserBundle\Repository\FamilyStatusRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\JobGroupRepository" class="Main\UserBundle\Repository\JobGroupRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\JobGroupRepository" class="Main\UserBundle\Repository\JobGroupRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\TitleRepository" class="Main\UserBundle\Repository\TitleRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\TitleRepository" class="Main\UserBundle\Repository\TitleRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\UserActivityRepository" class="Main\UserBundle\Repository\UserActivityRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\UserActivityRepository" class="Main\UserBundle\Repository\UserActivityRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\UserMediaRepository" class="Main\UserBundle\Repository\UserMediaRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\UserMediaRepository" class="Main\UserBundle\Repository\UserMediaRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\UserProjectRepository" class="Main\UserBundle\Repository\UserProjectRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\UserProjectRepository" class="Main\UserBundle\Repository\UserProjectRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\UserRepository" class="Main\UserBundle\Repository\UserRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\UserRepository" class="Main\UserBundle\Repository\UserRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\UserBundle\Repository\UserSecurityLogRepository" class="Main\UserBundle\Repository\UserSecurityLogRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Repository\UserSecurityLogRepository" class="Main\UserBundle\Repository\UserSecurityLogRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" class="Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" class="Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\CanSendMessageVoter" class="Main\UserBundle\Security\Voter\CanSendMessageVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\CanSendMessageVoter" class="Main\UserBundle\Security\Voter\CanSendMessageVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\ChoosePaymentVoter" class="Main\UserBundle\Security\Voter\ChoosePaymentVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\ChoosePaymentVoter" class="Main\UserBundle\Security\Voter\ChoosePaymentVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\DoAdminImportVoter" class="Main\UserBundle\Security\Voter\DoAdminImportVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\DoAdminImportVoter" class="Main\UserBundle\Security\Voter\DoAdminImportVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\DoApplicationVoter" class="Main\UserBundle\Security\Voter\DoApplicationVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\DoApplicationVoter" class="Main\UserBundle\Security\Voter\DoApplicationVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\DoNewContractVoter" class="Main\UserBundle\Security\Voter\DoNewContractVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\DoNewContractVoter" class="Main\UserBundle\Security\Voter\DoNewContractVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\DoUseBuilderVoter" class="Main\UserBundle\Security\Voter\DoUseBuilderVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\DoUseBuilderVoter" class="Main\UserBundle\Security\Voter\DoUseBuilderVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\EditBenefitVoter" class="Main\UserBundle\Security\Voter\EditBenefitVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\EditBenefitVoter" class="Main\UserBundle\Security\Voter\EditBenefitVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\SaveSurveyVoter" class="Main\UserBundle\Security\Voter\SaveSurveyVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\SaveSurveyVoter" class="Main\UserBundle\Security\Voter\SaveSurveyVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\UseBenefitVoter" class="Main\UserBundle\Security\Voter\UseBenefitVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\UseBenefitVoter" class="Main\UserBundle\Security\Voter\UseBenefitVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" class="Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" class="Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\ViewDoSurveyVoter" class="Main\UserBundle\Security\Voter\ViewDoSurveyVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\ViewDoSurveyVoter" class="Main\UserBundle\Security\Voter\ViewDoSurveyVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\ViewOwnContractsVoter" class="Main\UserBundle\Security\Voter\ViewOwnContractsVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\ViewOwnContractsVoter" class="Main\UserBundle\Security\Voter\ViewOwnContractsVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\ViewProfileVoter" class="Main\UserBundle\Security\Voter\ViewProfileVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\ViewProfileVoter" class="Main\UserBundle\Security\Voter\ViewProfileVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.Main\UserBundle\Security\Voter\ViewSurveyResultVoter" class="Main\UserBundle\Security\Voter\ViewSurveyResultVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\Security\Voter\ViewSurveyResultVoter" class="Main\UserBundle\Security\Voter\ViewSurveyResultVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\UserBundle\_bak\UserController" class="Main\UserBundle\_bak\UserController" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\UserBundle\_bak\UserController" class="Main\UserBundle\_bak\UserController" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\InsuranceBundle\Controller\Admin\AdminTariffController" class="Main\InsuranceBundle\Controller\Admin\AdminTariffController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Controller\Admin\AdminTariffController" class="Main\InsuranceBundle\Controller\Admin\AdminTariffController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\InsuranceBundle\Controller\Admin\CompanyController" class="Main\InsuranceBundle\Controller\Admin\CompanyController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Controller\Admin\CompanyController" class="Main\InsuranceBundle\Controller\Admin\CompanyController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\InsuranceBundle\Controller\Admin\SurveyController" class="Main\InsuranceBundle\Controller\Admin\SurveyController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Controller\Admin\SurveyController" class="Main\InsuranceBundle\Controller\Admin\SurveyController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\InsuranceBundle\Controller\Api\TariffDeliveryApiController" class="Main\InsuranceBundle\Controller\Api\TariffDeliveryApiController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Controller\Api\TariffDeliveryApiController" class="Main\InsuranceBundle\Controller\Api\TariffDeliveryApiController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\InsuranceBundle\Controller\ContractController" class="Main\InsuranceBundle\Controller\ContractController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Controller\ContractController" class="Main\InsuranceBundle\Controller\ContractController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\InsuranceBundle\Controller\DamageReportController" class="Main\InsuranceBundle\Controller\DamageReportController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Controller\DamageReportController" class="Main\InsuranceBundle\Controller\DamageReportController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\InsuranceBundle\Controller\Test\TestDamageReportController" class="Main\InsuranceBundle\Controller\Test\TestDamageReportController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Controller\Test\TestDamageReportController" class="Main\InsuranceBundle\Controller\Test\TestDamageReportController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\Controller.0.Main\InsuranceBundle\Controller\Test\TestSurveyController" class="Main\InsuranceBundle\Controller\Test\TestSurveyController" public="true" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Controller\Test\TestSurveyController" class="Main\InsuranceBundle\Controller\Test\TestSurveyController" public="true" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\InsuranceBundle\Form\Company\Admin\EditCompanyFormType" class="Main\InsuranceBundle\Form\Company\Admin\EditCompanyFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Form\Company\Admin\EditCompanyFormType" class="Main\InsuranceBundle\Form\Company\Admin\EditCompanyFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\InsuranceBundle\Form\Company\Admin\NewCompanyFormType" class="Main\InsuranceBundle\Form\Company\Admin\NewCompanyFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Form\Company\Admin\NewCompanyFormType" class="Main\InsuranceBundle\Form\Company\Admin\NewCompanyFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\InsuranceBundle\Form\Contract\EditContractFormType" class="Main\InsuranceBundle\Form\Contract\EditContractFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Form\Contract\EditContractFormType" class="Main\InsuranceBundle\Form\Contract\EditContractFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\InsuranceBundle\Form\Tariff\Admin\EditTariffFormType" class="Main\InsuranceBundle\Form\Tariff\Admin\EditTariffFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Form\Tariff\Admin\EditTariffFormType" class="Main\InsuranceBundle\Form\Tariff\Admin\EditTariffFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Form\FormTypeInterface.0.Main\InsuranceBundle\Form\Tariff\Admin\NewTariffFormType" class="Main\InsuranceBundle\Form\Tariff\Admin\NewTariffFormType" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Form\Tariff\Admin\NewTariffFormType" class="Main\InsuranceBundle\Form\Tariff\Admin\NewTariffFormType" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\CompanyRepository" class="Main\InsuranceBundle\Repository\CompanyRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\CompanyRepository" class="Main\InsuranceBundle\Repository\CompanyRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\ContractRepository" class="Main\InsuranceBundle\Repository\ContractRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\ContractRepository" class="Main\InsuranceBundle\Repository\ContractRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\DamageDocumentRepository" class="Main\InsuranceBundle\Repository\DamageDocumentRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\DamageDocumentRepository" class="Main\InsuranceBundle\Repository\DamageDocumentRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\DamageMediaRepository" class="Main\InsuranceBundle\Repository\DamageMediaRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\DamageMediaRepository" class="Main\InsuranceBundle\Repository\DamageMediaRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\DamageRepository" class="Main\InsuranceBundle\Repository\DamageRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\DamageRepository" class="Main\InsuranceBundle\Repository\DamageRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\MMContractRepository" class="Main\InsuranceBundle\Repository\MMContractRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\MMContractRepository" class="Main\InsuranceBundle\Repository\MMContractRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\ProcessActivityRepository" class="Main\InsuranceBundle\Repository\ProcessActivityRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\ProcessActivityRepository" class="Main\InsuranceBundle\Repository\ProcessActivityRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\ProcessRepository" class="Main\InsuranceBundle\Repository\ProcessRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\ProcessRepository" class="Main\InsuranceBundle\Repository\ProcessRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\ProcessStatusRepository" class="Main\InsuranceBundle\Repository\ProcessStatusRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\ProcessStatusRepository" class="Main\InsuranceBundle\Repository\ProcessStatusRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository" class="Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository" class="Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\ProcessTypeRepository" class="Main\InsuranceBundle\Repository\ProcessTypeRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\ProcessTypeRepository" class="Main\InsuranceBundle\Repository\ProcessTypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\StructureRepository" class="Main\InsuranceBundle\Repository\StructureRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\StructureRepository" class="Main\InsuranceBundle\Repository\StructureRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\SurveyQuestionRepository" class="Main\InsuranceBundle\Repository\SurveyQuestionRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\SurveyQuestionRepository" class="Main\InsuranceBundle\Repository\SurveyQuestionRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\TargetGroupRepository" class="Main\InsuranceBundle\Repository\TargetGroupRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\TargetGroupRepository" class="Main\InsuranceBundle\Repository\TargetGroupRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\TariffRateRepository" class="Main\InsuranceBundle\Repository\TariffRateRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\TariffRateRepository" class="Main\InsuranceBundle\Repository\TariffRateRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\TariffRepository" class="Main\InsuranceBundle\Repository\TariffRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\TariffRepository" class="Main\InsuranceBundle\Repository\TariffRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\TariffTargetGroupRepository" class="Main\InsuranceBundle\Repository\TariffTargetGroupRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\TariffTargetGroupRepository" class="Main\InsuranceBundle\Repository\TariffTargetGroupRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\TariffTypeRepository" class="Main\InsuranceBundle\Repository\TariffTypeRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\TariffTypeRepository" class="Main\InsuranceBundle\Repository\TariffTypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.Main\InsuranceBundle\Repository\TypeRepository" class="Main\InsuranceBundle\Repository\TypeRepository" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Main\InsuranceBundle\Repository\TypeRepository" class="Main\InsuranceBundle\Repository\TypeRepository" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.app.security.voter.view_profile" class="Main\UserBundle\Security\Voter\ViewProfileVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.app.security.voter.view_profile" class="Main\UserBundle\Security\Voter\ViewProfileVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.app.security.voter.view_choose_survey" class="Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.app.security.voter.view_choose_survey" class="Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.app.security.voter.view_do_survey" class="Main\UserBundle\Security\Voter\ViewDoSurveyVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.app.security.voter.view_do_survey" class="Main\UserBundle\Security\Voter\ViewDoSurveyVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.app.security.voter.save_survey" class="Main\UserBundle\Security\Voter\SaveSurveyVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.app.security.voter.save_survey" class="Main\UserBundle\Security\Voter\SaveSurveyVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.app.security.voter.view_survey_result" class="Main\UserBundle\Security\Voter\ViewSurveyResultVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.app.security.voter.view_survey_result" class="Main\UserBundle\Security\Voter\ViewSurveyResultVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.app.security.voter.choose_payment" class="Main\UserBundle\Security\Voter\ChoosePaymentVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.app.security.voter.choose_payment" class="Main\UserBundle\Security\Voter\ChoosePaymentVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.app.security.voter.do_application" class="Main\UserBundle\Security\Voter\DoApplicationVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.app.security.voter.do_application" class="Main\UserBundle\Security\Voter\DoApplicationVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.app.security.voter.do_use_builder" class="Main\UserBundle\Security\Voter\DoAdminImportVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.app.security.voter.do_use_builder" class="Main\UserBundle\Security\Voter\DoAdminImportVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.app.security.voter.can_upload_document" class="Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.app.security.voter.can_upload_document" class="Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.app.security.voter.do_admin_import" class="Main\UserBundle\Security\Voter\DoUseBuilderVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.app.security.voter.do_admin_import" class="Main\UserBundle\Security\Voter\DoUseBuilderVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.app.security.voter.use_benefit" class="Main\UserBundle\Security\Voter\UseBenefitVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.app.security.voter.use_benefit" class="Main\UserBundle\Security\Voter\UseBenefitVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Security\Core\Authorization\Voter\VoterInterface.0.app.security.voter.edit_benefit" class="Main\UserBundle\Security\Voter\EditBenefitVoter" public="false" lazy="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.app.security.voter.edit_benefit" class="Main\UserBundle\Security\Voter\EditBenefitVoter" public="false" lazy="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".service_locator.Otd28_S" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="doctrine.orm.default_listeners.attach_entity_listeners" type="service" id="doctrine.orm.default_listeners.attach_entity_listeners"/>
      </argument>
    </service>
    <service id=".service_locator.hNBt2UX" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="AppBundle\Repository\DocumentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="AppBundle\Repository\DocumentTypeRepository" type="service" id="AppBundle\Repository\DocumentTypeRepository"/>
        <argument key="AppBundle\Repository\FaqQuestionRepository" type="service" id="AppBundle\Repository\FaqQuestionRepository"/>
        <argument key="AppBundle\Repository\MediaRepository" type="service" id="AppBundle\Repository\MediaRepository"/>
        <argument key="AppBundle\Repository\MediaTypeRepository" type="service" id="AppBundle\Repository\MediaTypeRepository"/>
        <argument key="AppBundle\Repository\MessageRepository" type="service" id="AppBundle\Repository\MessageRepository"/>
        <argument key="AppBundle\Repository\MessageTypeRepository" type="service" id="AppBundle\Repository\MessageTypeRepository"/>
        <argument key="AppBundle\Repository\ProjectRepository" type="service" id="AppBundle\Repository\ProjectRepository"/>
        <argument key="Main\AdminBundle\Repository\AnimalDogBreedRepository" type="service" id="Main\AdminBundle\Repository\AnimalDogBreedRepository"/>
        <argument key="Main\InsuranceBundle\Repository\CompanyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
        <argument key="Main\InsuranceBundle\Repository\ContractRepository" type="service" id="Main\InsuranceBundle\Repository\ContractRepository"/>
        <argument key="Main\InsuranceBundle\Repository\DamageDocumentRepository" type="service" id="Main\InsuranceBundle\Repository\DamageDocumentRepository"/>
        <argument key="Main\InsuranceBundle\Repository\DamageMediaRepository" type="service" id="Main\InsuranceBundle\Repository\DamageMediaRepository"/>
        <argument key="Main\InsuranceBundle\Repository\DamageRepository" type="service" id="Main\InsuranceBundle\Repository\DamageRepository"/>
        <argument key="Main\InsuranceBundle\Repository\MMContractRepository" type="service" id="Main\InsuranceBundle\Repository\MMContractRepository"/>
        <argument key="Main\InsuranceBundle\Repository\ProcessActivityRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessActivityRepository"/>
        <argument key="Main\InsuranceBundle\Repository\ProcessRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessRepository"/>
        <argument key="Main\InsuranceBundle\Repository\ProcessStatusRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessStatusRepository"/>
        <argument key="Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository"/>
        <argument key="Main\InsuranceBundle\Repository\ProcessTypeRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessTypeRepository"/>
        <argument key="Main\InsuranceBundle\Repository\StructureRepository" type="service" id="Main\InsuranceBundle\Repository\StructureRepository"/>
        <argument key="Main\InsuranceBundle\Repository\SurveyQuestionRepository" type="service" id="Main\InsuranceBundle\Repository\SurveyQuestionRepository"/>
        <argument key="Main\InsuranceBundle\Repository\TargetGroupRepository" type="service" id="Main\InsuranceBundle\Repository\TargetGroupRepository"/>
        <argument key="Main\InsuranceBundle\Repository\TariffRateRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRateRepository"/>
        <argument key="Main\InsuranceBundle\Repository\TariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
        <argument key="Main\InsuranceBundle\Repository\TariffTargetGroupRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTargetGroupRepository"/>
        <argument key="Main\InsuranceBundle\Repository\TariffTypeRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTypeRepository"/>
        <argument key="Main\InsuranceBundle\Repository\TypeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="Main\UserBundle\Repository\AchievementRepository" type="service" id="Main\UserBundle\Repository\AchievementRepository"/>
        <argument key="Main\UserBundle\Repository\ActivityRepository" type="service" id="Main\UserBundle\Repository\ActivityRepository"/>
        <argument key="Main\UserBundle\Repository\AddressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="Main\UserBundle\Repository\AddressTypeRepository" type="service" id="Main\UserBundle\Repository\AddressTypeRepository"/>
        <argument key="Main\UserBundle\Repository\BankAccountRepository" type="service" id="Main\UserBundle\Repository\BankAccountRepository"/>
        <argument key="Main\UserBundle\Repository\BenefitPartnerRepository" type="service" id="Main\UserBundle\Repository\BenefitPartnerRepository"/>
        <argument key="Main\UserBundle\Repository\CityRepository" type="service" id="Main\UserBundle\Repository\CityRepository"/>
        <argument key="Main\UserBundle\Repository\CountryRepository" type="service" id="Main\UserBundle\Repository\CountryRepository"/>
        <argument key="Main\UserBundle\Repository\FamilyStatusRepository" type="service" id="Main\UserBundle\Repository\FamilyStatusRepository"/>
        <argument key="Main\UserBundle\Repository\JobGroupRepository" type="service" id="Main\UserBundle\Repository\JobGroupRepository"/>
        <argument key="Main\UserBundle\Repository\TitleRepository" type="service" id="Main\UserBundle\Repository\TitleRepository"/>
        <argument key="Main\UserBundle\Repository\UserActivityRepository" type="service" id="Main\UserBundle\Repository\UserActivityRepository"/>
        <argument key="Main\UserBundle\Repository\UserMediaRepository" type="service" id="Main\UserBundle\Repository\UserMediaRepository"/>
        <argument key="Main\UserBundle\Repository\UserProjectRepository" type="service" id="Main\UserBundle\Repository\UserProjectRepository"/>
        <argument key="Main\UserBundle\Repository\UserRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
        <argument key="Main\UserBundle\Repository\UserSecurityLogRepository" type="service" id="Main\UserBundle\Repository\UserSecurityLogRepository"/>
      </argument>
    </service>
    <service id="monolog.logger.doctrine" class="Symfony\Bridge\Monolog\Logger">
      <argument>doctrine</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.snappy" class="Symfony\Bridge\Monolog\Logger">
      <argument>snappy</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.request" class="Symfony\Bridge\Monolog\Logger">
      <argument>request</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.console" class="Symfony\Bridge\Monolog\Logger">
      <argument>console</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.cache" class="Symfony\Bridge\Monolog\Logger">
      <argument>cache</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.translation" class="Symfony\Bridge\Monolog\Logger">
      <argument>translation</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.php" class="Symfony\Bridge\Monolog\Logger">
      <argument>php</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.router" class="Symfony\Bridge\Monolog\Logger">
      <argument>router</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.security" class="Symfony\Bridge\Monolog\Logger">
      <argument>security</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.development" class="Symfony\Bridge\Monolog\Logger" public="true">
      <argument>development</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.console"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.handler.null_internal" class="Monolog\Handler\NullHandler"/>
    <service id=".service_locator.3WAntLP" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="damageMediaRepository" type="service" id="Main\InsuranceBundle\Repository\DamageMediaRepository"/>
        <argument key="damageRepository" type="service" id="Main\InsuranceBundle\Repository\DamageRepository"/>
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="documentTypeRepository" type="service" id="AppBundle\Repository\DocumentTypeRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="mediaRepository" type="service" id="AppBundle\Repository\MediaRepository"/>
        <argument key="mediaTypeRepository" type="service" id="AppBundle\Repository\MediaTypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.8DcygA_" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.YeIpdv5" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="damageDocumentRepository" type="service" id="Main\InsuranceBundle\Repository\DamageDocumentRepository"/>
        <argument key="damageMediaRepository" type="service" id="Main\InsuranceBundle\Repository\DamageMediaRepository"/>
        <argument key="damageRepository" type="service" id="Main\InsuranceBundle\Repository\DamageRepository"/>
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.p67STvb" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.8XHP_vY" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="titleRepository" type="service" id="Main\UserBundle\Repository\TitleRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.yBNH1RC" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="targetGroupRepository" type="service" id="Main\InsuranceBundle\Repository\TargetGroupRepository"/>
        <argument key="tariffRateRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRateRepository"/>
        <argument key="tariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
        <argument key="tariffTypeRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTypeRepository"/>
      </argument>
    </service>
    <service id=".service_locator.v0RCX1Z" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="documentTypeRepository" type="service" id="AppBundle\Repository\DocumentTypeRepository"/>
        <argument key="projectRepository" type="service" id="AppBundle\Repository\ProjectRepository"/>
        <argument key="userProjectRepository" type="service" id="Main\UserBundle\Repository\UserProjectRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.b6gcx50" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="faqQuestionRepository" type="service" id="AppBundle\Repository\FaqQuestionRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.fgFY9U1" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="faqQuestionRepository" type="service" id="AppBundle\Repository\FaqQuestionRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="typeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.x9tWA87" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="messageRepository" type="service" id="AppBundle\Repository\MessageRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.mNaWj9j" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="messageRepository" type="service" id="AppBundle\Repository\MessageRepository"/>
        <argument key="messageTypeRepository" type="service" id="AppBundle\Repository\MessageTypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator._U8MaQ_" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="documentTypeRepository" type="service" id="AppBundle\Repository\DocumentTypeRepository"/>
        <argument key="projectRepository" type="service" id="AppBundle\Repository\ProjectRepository"/>
        <argument key="userProjectRepository" type="service" id="Main\UserBundle\Repository\UserProjectRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.Wcj7vZk" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="event" type="service" id=".errored..service_locator.Wcj7vZk.Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent"/>
      </argument>
    </service>
    <service id=".service_locator.MncfaRS" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="token" type="service" id=".errored..service_locator.MncfaRS.Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage"/>
      </argument>
    </service>
    <service id=".service_locator.38arsk2" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.1x3ZQFJ" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="animalDogBreedRepository" type="service" id="Main\AdminBundle\Repository\AnimalDogBreedRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.0zYFx6d" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="jobGroupRepository" type="service" id="Main\UserBundle\Repository\JobGroupRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.gxWtETw" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id=".service_locator.8mKM8PJ" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="surveyQuestionRepository" type="service" id="Main\InsuranceBundle\Repository\SurveyQuestionRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.hZfBUUn" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressTypeRepository" type="service" id="Main\UserBundle\Repository\AddressTypeRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="cityRepository" type="service" id="Main\UserBundle\Repository\CityRepository"/>
        <argument key="countryRepository" type="service" id="Main\UserBundle\Repository\CountryRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.kM1ROWR" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="addressTypeRepository" type="service" id="Main\UserBundle\Repository\AddressTypeRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="cityRepository" type="service" id="Main\UserBundle\Repository\CityRepository"/>
        <argument key="countryRepository" type="service" id="Main\UserBundle\Repository\CountryRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.0iYlbg4" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
      </argument>
    </service>
    <service id=".service_locator.Pl1ZU87" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressTypeRepository" type="service" id="Main\UserBundle\Repository\AddressTypeRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="cityRepository" type="service" id="Main\UserBundle\Repository\CityRepository"/>
        <argument key="companyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
        <argument key="countryRepository" type="service" id="Main\UserBundle\Repository\CountryRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.CCrtQKA" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="addressTypeRepository" type="service" id="Main\UserBundle\Repository\AddressTypeRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="cityRepository" type="service" id="Main\UserBundle\Repository\CityRepository"/>
        <argument key="companyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
        <argument key="countryRepository" type="service" id="Main\UserBundle\Repository\CountryRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.68Cmlpn" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.1v6biAM" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="achievementRepository" type="service" id="Main\UserBundle\Repository\AchievementRepository"/>
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="bankAccountRepository" type="service" id="Main\UserBundle\Repository\BankAccountRepository"/>
        <argument key="jobGroupRepository" type="service" id="Main\UserBundle\Repository\JobGroupRepository"/>
        <argument key="tariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
        <argument key="titleRepository" type="service" id="Main\UserBundle\Repository\TitleRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.14cPno6" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="titleRepository" type="service" id="Main\UserBundle\Repository\TitleRepository"/>
        <argument key="userActivityRepository" type="service" id="Main\UserBundle\Repository\UserActivityRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.ctFS7jS" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="achievementRepository" type="service" id="Main\UserBundle\Repository\AchievementRepository"/>
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="bankAccountRepository" type="service" id="Main\UserBundle\Repository\BankAccountRepository"/>
        <argument key="tariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.2iHazg7" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="tariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.ko6brxq" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="countryRepository" type="service" id="Main\UserBundle\Repository\CountryRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.LAS0p5l" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="bankAccountRepository" type="service" id="Main\UserBundle\Repository\BankAccountRepository"/>
        <argument key="countryRepository" type="service" id="Main\UserBundle\Repository\CountryRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.OWaDhbA" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="countryRepository" type="service" id="Main\UserBundle\Repository\CountryRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.AihCWxh" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="bankAccountRepository" type="service" id="Main\UserBundle\Repository\BankAccountRepository"/>
        <argument key="countryRepository" type="service" id="Main\UserBundle\Repository\CountryRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.QsOXejS" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="cityRepository" type="service" id="Main\UserBundle\Repository\CityRepository"/>
        <argument key="countryRepository" type="service" id="Main\UserBundle\Repository\CountryRepository"/>
        <argument key="damageMediaRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="damageRepository" type="service" id="Main\InsuranceBundle\Repository\DamageRepository"/>
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="documentTypeRepository" type="service" id="AppBundle\Repository\DocumentTypeRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="mediaRepository" type="service" id="AppBundle\Repository\MediaRepository"/>
        <argument key="mediaTypeRepository" type="service" id="AppBundle\Repository\MediaTypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator._T0CbHX" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.nRTkUFf" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="activityRepository" type="service" id="Main\UserBundle\Repository\ActivityRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator._usen2v" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="activityRepository" type="service" id="Main\UserBundle\Repository\ActivityRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="processActivityRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessActivityRepository"/>
        <argument key="processRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessRepository"/>
        <argument key="processStatusRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessStatusRepository"/>
        <argument key="processTariffTrackerRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository"/>
        <argument key="processTypeRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessTypeRepository"/>
        <argument key="structureRepository" type="service" id="Main\InsuranceBundle\Repository\StructureRepository"/>
        <argument key="typeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.qvcepAL" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="activityRepository" type="service" id="Main\UserBundle\Repository\ActivityRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="processActivityRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessActivityRepository"/>
        <argument key="processRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessRepository"/>
        <argument key="processStatusRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessStatusRepository"/>
        <argument key="processTariffTrackerRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository"/>
        <argument key="processTypeRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessTypeRepository"/>
        <argument key="typeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.tpMncU." class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="activityRepository" type="service" id="Main\UserBundle\Repository\ActivityRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="processActivityRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessActivityRepository"/>
        <argument key="processRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessRepository"/>
        <argument key="processStatusRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessStatusRepository"/>
        <argument key="processTypeRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessTypeRepository"/>
        <argument key="structureRepository" type="service" id="Main\InsuranceBundle\Repository\StructureRepository"/>
        <argument key="typeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.mun81IR" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="activityRepository" type="service" id="Main\UserBundle\Repository\ActivityRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="processActivityRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessActivityRepository"/>
        <argument key="processRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessRepository"/>
        <argument key="processStatusRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessStatusRepository"/>
        <argument key="processTypeRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessTypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.2EWBkDl" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="documentTypeRepository" type="service" id="AppBundle\Repository\DocumentTypeRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.ibadUJ2" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="documentTypeRepository" type="service" id="AppBundle\Repository\DocumentTypeRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="typeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.EZxlOBg" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="documentTypeRepository" type="service" id="AppBundle\Repository\DocumentTypeRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="typeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.CSp2n.F" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="securityLog" type="service" id=".errored..service_locator.CSp2n.F.Main\UserBundle\Entity\UserSecurityLog"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.X2KZgAb" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="securityLogRepository" type="service" id="Main\UserBundle\Repository\UserSecurityLogRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.wbYV.pu" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="securityLogRepository" type="service" id="Main\UserBundle\Repository\UserSecurityLogRepository"/>
        <argument key="tokenStorage" type="service" id="security.token_storage"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.Tle4ytK" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="achievementRepository" type="service" id="Main\UserBundle\Repository\AchievementRepository"/>
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="bankAccountRepository" type="service" id="Main\UserBundle\Repository\BankAccountRepository"/>
        <argument key="jobGroupRepository" type="service" id="Main\UserBundle\Repository\JobGroupRepository"/>
        <argument key="tariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
        <argument key="titleRepository" type="service" id="Main\UserBundle\Repository\TitleRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.sXHawSK" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.sJXbDkU" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="companyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="targetGroupRepository" type="service" id="Main\InsuranceBundle\Repository\TargetGroupRepository"/>
        <argument key="tariffTargetGroupRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTargetGroupRepository"/>
        <argument key="tariffTypeRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTypeRepository"/>
      </argument>
    </service>
    <service id=".service_locator.Hg5OVxc" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="companyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="targetGroupRepository" type="service" id="Main\InsuranceBundle\Repository\TargetGroupRepository"/>
      </argument>
    </service>
    <service id=".service_locator.9ECZpYT" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="companyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="targetGroupRepository" type="service" id="Main\InsuranceBundle\Repository\TargetGroupRepository"/>
        <argument key="tariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
        <argument key="tariffTargetGroupRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTargetGroupRepository"/>
        <argument key="tariffTypeRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTypeRepository"/>
      </argument>
    </service>
    <service id=".service_locator.2yYiKQI" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="companyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="targetGroupRepository" type="service" id="Main\InsuranceBundle\Repository\TargetGroupRepository"/>
        <argument key="tariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
        <argument key="tariffTypeRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTypeRepository"/>
      </argument>
    </service>
    <service id=".service_locator.guaJacE" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="targetGroupRepository" type="service" id="Main\InsuranceBundle\Repository\TargetGroupRepository"/>
        <argument key="tariffRateRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRateRepository"/>
        <argument key="tariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
        <argument key="tariffTypeRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTypeRepository"/>
      </argument>
    </service>
    <service id=".service_locator.zgObIf4" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="tariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
        <argument key="tariffTypeRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTypeRepository"/>
      </argument>
    </service>
    <service id=".service_locator.uG.Ip7d" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="companyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.t4Sq0AR" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="companyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.0mR_JgJ" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="structureRepository" type="service" id="Main\InsuranceBundle\Repository\StructureRepository"/>
        <argument key="surveyQuestionRepository" type="service" id="Main\InsuranceBundle\Repository\SurveyQuestionRepository"/>
        <argument key="typeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.1uHkbIi" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="structureRepository" type="service" id="Main\InsuranceBundle\Repository\StructureRepository"/>
        <argument key="typeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.3U6Cq3a" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="structureRepository" type="service" id="Main\InsuranceBundle\Repository\StructureRepository"/>
        <argument key="tariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
        <argument key="tariffTypeRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.AtFpXDQ" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.1n6P8pO" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="logger" type="service" id="monolog.logger"/>
      </argument>
    </service>
    <service id=".service_locator.7L24r3_" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="activityRepository" type="service" id="Main\UserBundle\Repository\ActivityRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="companyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
        <argument key="contractRepository" type="service" id="Main\InsuranceBundle\Repository\ContractRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="processActivityRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessActivityRepository"/>
        <argument key="processRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessRepository"/>
        <argument key="processStatusRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessStatusRepository"/>
        <argument key="processTariffTrackerRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessTariffTrackerRepository"/>
        <argument key="processTypeRepository" type="service" id="Main\InsuranceBundle\Repository\ProcessTypeRepository"/>
        <argument key="structureRepository" type="service" id="Main\InsuranceBundle\Repository\StructureRepository"/>
        <argument key="tariffRepository" type="service" id="Main\InsuranceBundle\Repository\TariffRepository"/>
        <argument key="typeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.hkJpU7O" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="contractRepository" type="service" id="Main\InsuranceBundle\Repository\ContractRepository"/>
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="documentTypeRepository" type="service" id="AppBundle\Repository\DocumentTypeRepository"/>
        <argument key="tariffTypeRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.I0ip9pD" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="companyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="documentTypeRepository" type="service" id="AppBundle\Repository\DocumentTypeRepository"/>
        <argument key="tariffTypeRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.ff9TIUu" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="companyRepository" type="service" id="Main\InsuranceBundle\Repository\CompanyRepository"/>
        <argument key="contractRepository" type="service" id="Main\InsuranceBundle\Repository\ContractRepository"/>
        <argument key="tariffTypeRepository" type="service" id="Main\InsuranceBundle\Repository\TariffTypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.2v0qQfw" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="contractRepository" type="service" id="Main\InsuranceBundle\Repository\ContractRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.ZXNig2A" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="contractRepository" type="service" id="Main\InsuranceBundle\Repository\ContractRepository"/>
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.bQaD.ih" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="bankAccountRepository" type="service" id="Main\UserBundle\Repository\BankAccountRepository"/>
        <argument key="damageMediaRepository" type="service" id="Main\InsuranceBundle\Repository\DamageMediaRepository"/>
        <argument key="damageRepository" type="service" id="Main\InsuranceBundle\Repository\DamageRepository"/>
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="documentTypeRepository" type="service" id="AppBundle\Repository\DocumentTypeRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="mediaRepository" type="service" id="AppBundle\Repository\MediaRepository"/>
        <argument key="mediaTypeRepository" type="service" id="AppBundle\Repository\MediaTypeRepository"/>
        <argument key="typeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.bVukK25" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="damageRepository" type="service" id="Main\InsuranceBundle\Repository\DamageRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="typeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.Ne_8NTG" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="damageRepository" type="service" id="Main\InsuranceBundle\Repository\DamageRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.W3OdsBx" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="damageMediaRepository" type="service" id="Main\InsuranceBundle\Repository\DamageMediaRepository"/>
        <argument key="damageRepository" type="service" id="Main\InsuranceBundle\Repository\DamageRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.g_h.b6l" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="damageDocumentRepository" type="service" id="Main\InsuranceBundle\Repository\DamageDocumentRepository"/>
        <argument key="damageRepository" type="service" id="Main\InsuranceBundle\Repository\DamageRepository"/>
        <argument key="documentRepository" type="service" id="AppBundle\Repository\DocumentRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.oVT_X33" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="addressRepository" type="service" id="Main\UserBundle\Repository\AddressRepository"/>
        <argument key="authorizationChecker" type="service" id="security.authorization_checker"/>
        <argument key="bankAccountRepository" type="service" id="Main\UserBundle\Repository\BankAccountRepository"/>
        <argument key="damageMediaRepository" type="service" id="Main\InsuranceBundle\Repository\DamageMediaRepository"/>
        <argument key="damageRepository" type="service" id="Main\InsuranceBundle\Repository\DamageRepository"/>
        <argument key="logger" type="service" id="monolog.logger"/>
        <argument key="mediaRepository" type="service" id="AppBundle\Repository\MediaRepository"/>
        <argument key="mediaTypeRepository" type="service" id="AppBundle\Repository\MediaTypeRepository"/>
        <argument key="typeRepository" type="service" id="Main\InsuranceBundle\Repository\TypeRepository"/>
        <argument key="userRepository" type="service" id="Main\UserBundle\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.MzWCiiK" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="AppBundle\Controller\DocumentController::damageResultPdfAction" type="service" id=".service_locator.8XHP_vY"/>
        <argument key="AppBundle\Controller\DocumentController::damageResultPdfDownloadAction" type="service" id=".service_locator.p67STvb"/>
        <argument key="AppBundle\Controller\DocumentController::damageResultPdfSendAction" type="service" id=".service_locator.YeIpdv5"/>
        <argument key="AppBundle\Controller\DocumentController::documentUploadAction" type="service" id=".service_locator.8DcygA_"/>
        <argument key="AppBundle\Controller\DocumentController::documentUploadSaveAction" type="service" id=".service_locator.3WAntLP"/>
        <argument key="AppBundle\Controller\DocumentController::pdfResultPdfAAction" type="service" id=".service_locator.yBNH1RC"/>
        <argument key="AppBundle\Controller\ExceptionController::pageNotFoundAction" type="service" id=".service_locator.v0RCX1Z"/>
        <argument key="AppBundle\Controller\HelpController::faqHelpAction" type="service" id=".service_locator.fgFY9U1"/>
        <argument key="AppBundle\Controller\HelpController::faqSaveEditAction" type="service" id=".service_locator.b6gcx50"/>
        <argument key="AppBundle\Controller\HelpController::faqSaveNewAction" type="service" id=".service_locator.b6gcx50"/>
        <argument key="AppBundle\Controller\HelpController::faqsShowAction" type="service" id=".service_locator.fgFY9U1"/>
        <argument key="AppBundle\Controller\MessageController::messageAction" type="service" id=".service_locator.x9tWA87"/>
        <argument key="AppBundle\Controller\MessageController::messagesAction" type="service" id=".service_locator.mNaWj9j"/>
        <argument key="AppBundle\Controller\NewsController::helpFaqAction" type="service" id=".service_locator.x9tWA87"/>
        <argument key="AppBundle\Controller\ProjectController::projectsAction" type="service" id=".service_locator._U8MaQ_"/>
        <argument key="AppBundle\Listener\CustomExceptionListener::onKernelException" type="service" id=".service_locator.Wcj7vZk"/>
        <argument key="AppBundle\Listener\CustomExceptionListener::setToken" type="service" id=".service_locator.MncfaRS"/>
        <argument key="Main\AdminBundle\Controller\AdminController::adminImportAddressesAction" type="service" id=".service_locator.38arsk2"/>
        <argument key="Main\AdminBundle\Controller\AdminController::adminImportMMDogBreedsAction" type="service" id=".service_locator.1x3ZQFJ"/>
        <argument key="Main\AdminBundle\Controller\AdminController::adminImportMMJobsAction" type="service" id=".service_locator.0zYFx6d"/>
        <argument key="Main\AdminBundle\Controller\Api\AddressImportController::loadApiJobInputAction" type="service" id=".service_locator.0zYFx6d"/>
        <argument key="Main\AdminBundle\Controller\Api\AnimalDogBreedImportController::loadApiJobInputAction" type="service" id=".service_locator.1x3ZQFJ"/>
        <argument key="Main\AdminBundle\Controller\Api\JobGroupImportController::loadApiJobInputAction" type="service" id=".service_locator.0zYFx6d"/>
        <argument key="Main\AdminBundle\Controller\Api\QuestionLoadController::loadQuestionsAction" type="service" id=".service_locator.8mKM8PJ"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\AdminTariffController::adminTariffAction" type="service" id=".service_locator.guaJacE"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\AdminTariffController::adminTariffEditAction" type="service" id=".service_locator.2yYiKQI"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\AdminTariffController::adminTariffIdEditFinishAction" type="service" id=".service_locator.9ECZpYT"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\AdminTariffController::adminTariffIdNewFinishAction" type="service" id=".service_locator.sJXbDkU"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\AdminTariffController::adminTariffNewAction" type="service" id=".service_locator.Hg5OVxc"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\AdminTariffController::adminTariffsAction" type="service" id=".service_locator.zgObIf4"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\CompanyController::adminCompaniesAction" type="service" id=".service_locator.t4Sq0AR"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\CompanyController::adminCompanyAction" type="service" id=".service_locator.uG.Ip7d"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\CompanyController::adminCompanyEditAction" type="service" id=".service_locator.uG.Ip7d"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\CompanyController::adminCompanyNewAction" type="service" id=".service_locator.uG.Ip7d"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController::adminSurveyDamageBuilderAction" type="service" id=".service_locator.1uHkbIi"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController::adminSurveyElementsSaveAction" type="service" id=".service_locator.0mR_JgJ"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController::adminSurveyHelptextsAction" type="service" id=".service_locator.0mR_JgJ"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController::adminSurveyTariffBuilderAction" type="service" id=".service_locator.1uHkbIi"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController::adminTariffDecisionResultAction" type="service" id=".service_locator.3U6Cq3a"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController::adminUserIdTypeFinishAction" type="service" id=".service_locator.AtFpXDQ"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController::adminUserSurveyTypeDecision" type="service" id=".service_locator.1n6P8pO"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController::chooseSurveyAction" type="service" id=".service_locator.1uHkbIi"/>
        <argument key="Main\InsuranceBundle\Controller\Api\TariffDeliveryApiController::managerSurveyTypeResultAction" type="service" id=".service_locator.7L24r3_"/>
        <argument key="Main\InsuranceBundle\Controller\ContractController::contractEditAction" type="service" id=".service_locator.ff9TIUu"/>
        <argument key="Main\InsuranceBundle\Controller\ContractController::contractNewAction" type="service" id=".service_locator.I0ip9pD"/>
        <argument key="Main\InsuranceBundle\Controller\ContractController::contractNewMailAction" type="service" id=".service_locator.hkJpU7O"/>
        <argument key="Main\InsuranceBundle\Controller\ContractController::managerContractReadAction" type="service" id=".service_locator.2v0qQfw"/>
        <argument key="Main\InsuranceBundle\Controller\ContractController::managerContractsAction" type="service" id=".service_locator.ZXNig2A"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController::damageDecisionAction" type="service" id=".service_locator.Ne_8NTG"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController::damageDecisionSurveyAction" type="service" id=".service_locator.bVukK25"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController::damageReportDoUploadAction" type="service" id=".service_locator.bQaD.ih"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController::damageResultPdfDownloadAction" type="service" id=".service_locator.Ne_8NTG"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController::damageResultPdfSendAction" type="service" id=".service_locator.W3OdsBx"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController::damagesAction" type="service" id=".service_locator.g_h.b6l"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController::logMapStructure" type="service" id=".service_locator.1n6P8pO"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestDamageReportController::damageDecisionAction" type="service" id=".service_locator.Ne_8NTG"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestDamageReportController::damageDecisionSurveyAction" type="service" id=".service_locator.bVukK25"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestDamageReportController::damageReportDoUploadAction" type="service" id=".service_locator.oVT_X33"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestDamageReportController::damagesAction" type="service" id=".service_locator.Ne_8NTG"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestDamageReportController::logMapStructure" type="service" id=".service_locator.1n6P8pO"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestSurveyController::adminSurveyDamageBuilderAction" type="service" id=".service_locator.1uHkbIi"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestSurveyController::adminSurveyTariffBuilderAction" type="service" id=".service_locator.1uHkbIi"/>
        <argument key="Main\UserBundle\Controller\Admin\AddressController::addressDeleteAction" type="service" id=".service_locator.0iYlbg4"/>
        <argument key="Main\UserBundle\Controller\Admin\AddressController::addressEditAction" type="service" id=".service_locator.CCrtQKA"/>
        <argument key="Main\UserBundle\Controller\Admin\AddressController::addressNewAction" type="service" id=".service_locator.Pl1ZU87"/>
        <argument key="Main\UserBundle\Controller\Admin\AddressController::managerAddressEditAction" type="service" id=".service_locator.kM1ROWR"/>
        <argument key="Main\UserBundle\Controller\Admin\AddressController::managerAddressNewAction" type="service" id=".service_locator.hZfBUUn"/>
        <argument key="Main\UserBundle\Controller\Admin\AdminUserController::adminManagerDecideTypeAction" type="service" id=".service_locator.1v6biAM"/>
        <argument key="Main\UserBundle\Controller\Admin\AdminUserController::adminUserAction" type="service" id=".service_locator.ctFS7jS"/>
        <argument key="Main\UserBundle\Controller\Admin\AdminUserController::adminUserActivitiesAction" type="service" id=".service_locator.14cPno6"/>
        <argument key="Main\UserBundle\Controller\Admin\AdminUserController::adminUserEditAction" type="service" id=".service_locator.68Cmlpn"/>
        <argument key="Main\UserBundle\Controller\Admin\AdminUserController::adminUserNewAction" type="service" id=".service_locator.68Cmlpn"/>
        <argument key="Main\UserBundle\Controller\Admin\AdminUserController::adminUsersAction" type="service" id=".service_locator.2iHazg7"/>
        <argument key="Main\UserBundle\Controller\Admin\BankController::adminBankEditAction" type="service" id=".service_locator.AihCWxh"/>
        <argument key="Main\UserBundle\Controller\Admin\BankController::adminBankNewAction" type="service" id=".service_locator.OWaDhbA"/>
        <argument key="Main\UserBundle\Controller\Admin\BankController::bankAccountEditAction" type="service" id=".service_locator.LAS0p5l"/>
        <argument key="Main\UserBundle\Controller\Admin\BankController::bankAccountNewAction" type="service" id=".service_locator.ko6brxq"/>
        <argument key="Main\UserBundle\Controller\Web\BenefitController::benefitGreetingsAction" type="service" id=".service_locator._T0CbHX"/>
        <argument key="Main\UserBundle\Controller\Web\BenefitController::benefitPartnerAction" type="service" id=".service_locator.8DcygA_"/>
        <argument key="Main\UserBundle\Controller\Web\BenefitController::documentUploadSaveAction" type="service" id=".service_locator.QsOXejS"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController::choosePaymentAction" type="service" id=".service_locator.qvcepAL"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController::chooseSurveyAction" type="service" id=".service_locator.tpMncU."/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController::editManagerAction" type="service" id=".service_locator.nRTkUFf"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController::greetingsAction" type="service" id=".service_locator._T0CbHX"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController::managerTypeShowApplicationAction" type="service" id=".service_locator._usen2v"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController::personalDataAction" type="service" id=".service_locator.mun81IR"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController::profileAction" type="service" id=".service_locator.mun81IR"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController::profileCheckAction" type="service" id=".service_locator.mun81IR"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController::profileHelpAction" type="service" id=".service_locator.mun81IR"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController::savePaymentAction" type="service" id=".service_locator.qvcepAL"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController::surveyTypeDoAction" type="service" id=".service_locator.tpMncU."/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController::surveyTypeSaveAction" type="service" id=".service_locator.tpMncU."/>
        <argument key="Main\UserBundle\Controller\Web\MandateController::managerSignMandateAction" type="service" id=".service_locator.EZxlOBg"/>
        <argument key="Main\UserBundle\Controller\Web\MandateController::managerSignMandateSaveAction" type="service" id=".service_locator.ibadUJ2"/>
        <argument key="Main\UserBundle\Controller\Web\MandateController::signMandateAction" type="service" id=".service_locator.8DcygA_"/>
        <argument key="Main\UserBundle\Controller\Web\MandateController::signMandateSaveAction" type="service" id=".service_locator.2EWBkDl"/>
        <argument key="Main\UserBundle\Controller\Web\SecurityController::loginAction" type="service" id=".service_locator.wbYV.pu"/>
        <argument key="Main\UserBundle\Controller\Web\SecurityController::loginNewMailAction" type="service" id=".service_locator.CSp2n.F"/>
        <argument key="Main\UserBundle\Controller\Web\SecurityController::loginVerificationAction" type="service" id=".service_locator.X2KZgAb"/>
        <argument key="Main\UserBundle\Controller\Web\SecurityController::loginWaitingAction" type="service" id=".service_locator.wbYV.pu"/>
        <argument key="Main\UserBundle\_bak\UserController::showAction" type="service" id=".service_locator.Tle4ytK"/>
        <argument key="Main\UserBundle\_bak\UserController::userRegisterAction" type="service" id=".service_locator.sXHawSK"/>
        <argument key="AppBundle\Controller\DocumentController:damageResultPdfAction" type="service" id=".service_locator.8XHP_vY"/>
        <argument key="AppBundle\Controller\DocumentController:damageResultPdfDownloadAction" type="service" id=".service_locator.p67STvb"/>
        <argument key="AppBundle\Controller\DocumentController:damageResultPdfSendAction" type="service" id=".service_locator.YeIpdv5"/>
        <argument key="AppBundle\Controller\DocumentController:documentUploadAction" type="service" id=".service_locator.8DcygA_"/>
        <argument key="AppBundle\Controller\DocumentController:documentUploadSaveAction" type="service" id=".service_locator.3WAntLP"/>
        <argument key="AppBundle\Controller\DocumentController:pdfResultPdfAAction" type="service" id=".service_locator.yBNH1RC"/>
        <argument key="AppBundle\Controller\ExceptionController:pageNotFoundAction" type="service" id=".service_locator.v0RCX1Z"/>
        <argument key="AppBundle\Controller\HelpController:faqHelpAction" type="service" id=".service_locator.fgFY9U1"/>
        <argument key="AppBundle\Controller\HelpController:faqSaveEditAction" type="service" id=".service_locator.b6gcx50"/>
        <argument key="AppBundle\Controller\HelpController:faqSaveNewAction" type="service" id=".service_locator.b6gcx50"/>
        <argument key="AppBundle\Controller\HelpController:faqsShowAction" type="service" id=".service_locator.fgFY9U1"/>
        <argument key="AppBundle\Controller\MessageController:messageAction" type="service" id=".service_locator.x9tWA87"/>
        <argument key="AppBundle\Controller\MessageController:messagesAction" type="service" id=".service_locator.mNaWj9j"/>
        <argument key="AppBundle\Controller\NewsController:helpFaqAction" type="service" id=".service_locator.x9tWA87"/>
        <argument key="AppBundle\Controller\ProjectController:projectsAction" type="service" id=".service_locator._U8MaQ_"/>
        <argument key="AppBundle\Listener\CustomExceptionListener:onKernelException" type="service" id=".service_locator.Wcj7vZk"/>
        <argument key="AppBundle\Listener\CustomExceptionListener:setToken" type="service" id=".service_locator.MncfaRS"/>
        <argument key="Main\AdminBundle\Controller\AdminController:adminImportAddressesAction" type="service" id=".service_locator.38arsk2"/>
        <argument key="Main\AdminBundle\Controller\AdminController:adminImportMMDogBreedsAction" type="service" id=".service_locator.1x3ZQFJ"/>
        <argument key="Main\AdminBundle\Controller\AdminController:adminImportMMJobsAction" type="service" id=".service_locator.0zYFx6d"/>
        <argument key="Main\AdminBundle\Controller\Api\AddressImportController:loadApiJobInputAction" type="service" id=".service_locator.0zYFx6d"/>
        <argument key="Main\AdminBundle\Controller\Api\AnimalDogBreedImportController:loadApiJobInputAction" type="service" id=".service_locator.1x3ZQFJ"/>
        <argument key="Main\AdminBundle\Controller\Api\JobGroupImportController:loadApiJobInputAction" type="service" id=".service_locator.0zYFx6d"/>
        <argument key="Main\AdminBundle\Controller\Api\QuestionLoadController:loadQuestionsAction" type="service" id=".service_locator.8mKM8PJ"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\AdminTariffController:adminTariffAction" type="service" id=".service_locator.guaJacE"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\AdminTariffController:adminTariffEditAction" type="service" id=".service_locator.2yYiKQI"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\AdminTariffController:adminTariffIdEditFinishAction" type="service" id=".service_locator.9ECZpYT"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\AdminTariffController:adminTariffIdNewFinishAction" type="service" id=".service_locator.sJXbDkU"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\AdminTariffController:adminTariffNewAction" type="service" id=".service_locator.Hg5OVxc"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\AdminTariffController:adminTariffsAction" type="service" id=".service_locator.zgObIf4"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\CompanyController:adminCompaniesAction" type="service" id=".service_locator.t4Sq0AR"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\CompanyController:adminCompanyAction" type="service" id=".service_locator.uG.Ip7d"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\CompanyController:adminCompanyEditAction" type="service" id=".service_locator.uG.Ip7d"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\CompanyController:adminCompanyNewAction" type="service" id=".service_locator.uG.Ip7d"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController:adminSurveyDamageBuilderAction" type="service" id=".service_locator.1uHkbIi"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController:adminSurveyElementsSaveAction" type="service" id=".service_locator.0mR_JgJ"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController:adminSurveyHelptextsAction" type="service" id=".service_locator.0mR_JgJ"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController:adminSurveyTariffBuilderAction" type="service" id=".service_locator.1uHkbIi"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController:adminTariffDecisionResultAction" type="service" id=".service_locator.3U6Cq3a"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController:adminUserIdTypeFinishAction" type="service" id=".service_locator.AtFpXDQ"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController:adminUserSurveyTypeDecision" type="service" id=".service_locator.1n6P8pO"/>
        <argument key="Main\InsuranceBundle\Controller\Admin\SurveyController:chooseSurveyAction" type="service" id=".service_locator.1uHkbIi"/>
        <argument key="Main\InsuranceBundle\Controller\Api\TariffDeliveryApiController:managerSurveyTypeResultAction" type="service" id=".service_locator.7L24r3_"/>
        <argument key="Main\InsuranceBundle\Controller\ContractController:contractEditAction" type="service" id=".service_locator.ff9TIUu"/>
        <argument key="Main\InsuranceBundle\Controller\ContractController:contractNewAction" type="service" id=".service_locator.I0ip9pD"/>
        <argument key="Main\InsuranceBundle\Controller\ContractController:contractNewMailAction" type="service" id=".service_locator.hkJpU7O"/>
        <argument key="Main\InsuranceBundle\Controller\ContractController:managerContractReadAction" type="service" id=".service_locator.2v0qQfw"/>
        <argument key="Main\InsuranceBundle\Controller\ContractController:managerContractsAction" type="service" id=".service_locator.ZXNig2A"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController:damageDecisionAction" type="service" id=".service_locator.Ne_8NTG"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController:damageDecisionSurveyAction" type="service" id=".service_locator.bVukK25"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController:damageReportDoUploadAction" type="service" id=".service_locator.bQaD.ih"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController:damageResultPdfDownloadAction" type="service" id=".service_locator.Ne_8NTG"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController:damageResultPdfSendAction" type="service" id=".service_locator.W3OdsBx"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController:damagesAction" type="service" id=".service_locator.g_h.b6l"/>
        <argument key="Main\InsuranceBundle\Controller\DamageReportController:logMapStructure" type="service" id=".service_locator.1n6P8pO"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestDamageReportController:damageDecisionAction" type="service" id=".service_locator.Ne_8NTG"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestDamageReportController:damageDecisionSurveyAction" type="service" id=".service_locator.bVukK25"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestDamageReportController:damageReportDoUploadAction" type="service" id=".service_locator.oVT_X33"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestDamageReportController:damagesAction" type="service" id=".service_locator.Ne_8NTG"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestDamageReportController:logMapStructure" type="service" id=".service_locator.1n6P8pO"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestSurveyController:adminSurveyDamageBuilderAction" type="service" id=".service_locator.1uHkbIi"/>
        <argument key="Main\InsuranceBundle\Controller\Test\TestSurveyController:adminSurveyTariffBuilderAction" type="service" id=".service_locator.1uHkbIi"/>
        <argument key="Main\UserBundle\Controller\Admin\AddressController:addressDeleteAction" type="service" id=".service_locator.0iYlbg4"/>
        <argument key="Main\UserBundle\Controller\Admin\AddressController:addressEditAction" type="service" id=".service_locator.CCrtQKA"/>
        <argument key="Main\UserBundle\Controller\Admin\AddressController:addressNewAction" type="service" id=".service_locator.Pl1ZU87"/>
        <argument key="Main\UserBundle\Controller\Admin\AddressController:managerAddressEditAction" type="service" id=".service_locator.kM1ROWR"/>
        <argument key="Main\UserBundle\Controller\Admin\AddressController:managerAddressNewAction" type="service" id=".service_locator.hZfBUUn"/>
        <argument key="Main\UserBundle\Controller\Admin\AdminUserController:adminManagerDecideTypeAction" type="service" id=".service_locator.1v6biAM"/>
        <argument key="Main\UserBundle\Controller\Admin\AdminUserController:adminUserAction" type="service" id=".service_locator.ctFS7jS"/>
        <argument key="Main\UserBundle\Controller\Admin\AdminUserController:adminUserActivitiesAction" type="service" id=".service_locator.14cPno6"/>
        <argument key="Main\UserBundle\Controller\Admin\AdminUserController:adminUserEditAction" type="service" id=".service_locator.68Cmlpn"/>
        <argument key="Main\UserBundle\Controller\Admin\AdminUserController:adminUserNewAction" type="service" id=".service_locator.68Cmlpn"/>
        <argument key="Main\UserBundle\Controller\Admin\AdminUserController:adminUsersAction" type="service" id=".service_locator.2iHazg7"/>
        <argument key="Main\UserBundle\Controller\Admin\BankController:adminBankEditAction" type="service" id=".service_locator.AihCWxh"/>
        <argument key="Main\UserBundle\Controller\Admin\BankController:adminBankNewAction" type="service" id=".service_locator.OWaDhbA"/>
        <argument key="Main\UserBundle\Controller\Admin\BankController:bankAccountEditAction" type="service" id=".service_locator.LAS0p5l"/>
        <argument key="Main\UserBundle\Controller\Admin\BankController:bankAccountNewAction" type="service" id=".service_locator.ko6brxq"/>
        <argument key="Main\UserBundle\Controller\Web\BenefitController:benefitGreetingsAction" type="service" id=".service_locator._T0CbHX"/>
        <argument key="Main\UserBundle\Controller\Web\BenefitController:benefitPartnerAction" type="service" id=".service_locator.8DcygA_"/>
        <argument key="Main\UserBundle\Controller\Web\BenefitController:documentUploadSaveAction" type="service" id=".service_locator.QsOXejS"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController:choosePaymentAction" type="service" id=".service_locator.qvcepAL"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController:chooseSurveyAction" type="service" id=".service_locator.tpMncU."/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController:editManagerAction" type="service" id=".service_locator.nRTkUFf"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController:greetingsAction" type="service" id=".service_locator._T0CbHX"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController:managerTypeShowApplicationAction" type="service" id=".service_locator._usen2v"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController:personalDataAction" type="service" id=".service_locator.mun81IR"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController:profileAction" type="service" id=".service_locator.mun81IR"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController:profileCheckAction" type="service" id=".service_locator.mun81IR"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController:profileHelpAction" type="service" id=".service_locator.mun81IR"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController:savePaymentAction" type="service" id=".service_locator.qvcepAL"/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController:surveyTypeDoAction" type="service" id=".service_locator.tpMncU."/>
        <argument key="Main\UserBundle\Controller\Web\ManagerController:surveyTypeSaveAction" type="service" id=".service_locator.tpMncU."/>
        <argument key="Main\UserBundle\Controller\Web\MandateController:managerSignMandateAction" type="service" id=".service_locator.EZxlOBg"/>
        <argument key="Main\UserBundle\Controller\Web\MandateController:managerSignMandateSaveAction" type="service" id=".service_locator.ibadUJ2"/>
        <argument key="Main\UserBundle\Controller\Web\MandateController:signMandateAction" type="service" id=".service_locator.8DcygA_"/>
        <argument key="Main\UserBundle\Controller\Web\MandateController:signMandateSaveAction" type="service" id=".service_locator.2EWBkDl"/>
        <argument key="Main\UserBundle\Controller\Web\SecurityController:loginAction" type="service" id=".service_locator.wbYV.pu"/>
        <argument key="Main\UserBundle\Controller\Web\SecurityController:loginNewMailAction" type="service" id=".service_locator.CSp2n.F"/>
        <argument key="Main\UserBundle\Controller\Web\SecurityController:loginVerificationAction" type="service" id=".service_locator.X2KZgAb"/>
        <argument key="Main\UserBundle\Controller\Web\SecurityController:loginWaitingAction" type="service" id=".service_locator.wbYV.pu"/>
        <argument key="Main\UserBundle\_bak\UserController:showAction" type="service" id=".service_locator.Tle4ytK"/>
        <argument key="Main\UserBundle\_bak\UserController:userRegisterAction" type="service" id=".service_locator.sXHawSK"/>
      </argument>
    </service>
    <service id=".service_locator.yQVjGlt" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="translation.loader.csv" type="service" id="translation.loader.csv"/>
        <argument key="translation.loader.dat" type="service" id="translation.loader.dat"/>
        <argument key="translation.loader.ini" type="service" id="translation.loader.ini"/>
        <argument key="translation.loader.json" type="service" id="translation.loader.json"/>
        <argument key="translation.loader.mo" type="service" id="translation.loader.mo"/>
        <argument key="translation.loader.php" type="service" id="translation.loader.php"/>
        <argument key="translation.loader.po" type="service" id="translation.loader.po"/>
        <argument key="translation.loader.qt" type="service" id="translation.loader.qt"/>
        <argument key="translation.loader.res" type="service" id="translation.loader.res"/>
        <argument key="translation.loader.xliff" type="service" id="translation.loader.xliff"/>
        <argument key="translation.loader.yml" type="service" id="translation.loader.yml"/>
      </argument>
    </service>
    <service id=".service_locator.gmwRZ3h" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="inline" type="service" id="fragment.renderer.inline"/>
      </argument>
    </service>
    <service id=".service_locator.a1.yqRI" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="AppBundle\Form\Message\EditMessageFormType" type="service" id="AppBundle\Form\Message\EditMessageFormType"/>
        <argument key="AppBundle\Form\Project\EditProjectFormType" type="service" id="AppBundle\Form\Project\EditProjectFormType"/>
        <argument key="AppBundle\Form\Type\TagFormType" type="service" id="AppBundle\Form\Type\TagFormType"/>
        <argument key="Main\InsuranceBundle\Form\Company\Admin\EditCompanyFormType" type="service" id="Main\InsuranceBundle\Form\Company\Admin\EditCompanyFormType"/>
        <argument key="Main\InsuranceBundle\Form\Company\Admin\NewCompanyFormType" type="service" id="Main\InsuranceBundle\Form\Company\Admin\NewCompanyFormType"/>
        <argument key="Main\InsuranceBundle\Form\Contract\EditContractFormType" type="service" id="Main\InsuranceBundle\Form\Contract\EditContractFormType"/>
        <argument key="Main\InsuranceBundle\Form\Tariff\Admin\EditTariffFormType" type="service" id="Main\InsuranceBundle\Form\Tariff\Admin\EditTariffFormType"/>
        <argument key="Main\InsuranceBundle\Form\Tariff\Admin\NewTariffFormType" type="service" id="Main\InsuranceBundle\Form\Tariff\Admin\NewTariffFormType"/>
        <argument key="Main\UserBundle\Form\Address\Admin\EditAddressFormType" type="service" id="Main\UserBundle\Form\Address\Admin\EditAddressFormType"/>
        <argument key="Main\UserBundle\Form\Address\Admin\NewAddressFormType" type="service" id="Main\UserBundle\Form\Address\Admin\NewAddressFormType"/>
        <argument key="Main\UserBundle\Form\Bank\Admin\EditBankFormType" type="service" id="Main\UserBundle\Form\Bank\Admin\EditBankFormType"/>
        <argument key="Main\UserBundle\Form\Bank\Admin\NewBankFormType" type="service" id="Main\UserBundle\Form\Bank\Admin\NewBankFormType"/>
        <argument key="Main\UserBundle\Form\LoginForm" type="service" id="Main\UserBundle\Form\LoginForm"/>
        <argument key="Main\UserBundle\Form\NewsletterFormType" type="service" id="Main\UserBundle\Form\NewsletterFormType"/>
        <argument key="Main\UserBundle\Form\RegistrationForm" type="service" id="Main\UserBundle\Form\RegistrationForm"/>
        <argument key="Main\UserBundle\Form\UserRegistrationForm" type="service" id="Main\UserBundle\Form\UserRegistrationForm"/>
        <argument key="Main\UserBundle\Form\User\Admin\EditUserFormType" type="service" id="Main\UserBundle\Form\User\Admin\EditUserFormType"/>
        <argument key="Main\UserBundle\Form\User\Admin\NewUserFormType" type="service" id="Main\UserBundle\Form\User\Admin\NewUserFormType"/>
        <argument key="Symfony\Bridge\Doctrine\Form\Type\EntityType" type="service" id="form.type.entity"/>
        <argument key="Symfony\Component\Form\Extension\Core\Type\ChoiceType" type="service" id="form.type.choice"/>
        <argument key="Symfony\Component\Form\Extension\Core\Type\FormType" type="service" id="form.type.form"/>
      </argument>
    </service>
    <service id="debug.security.voter.security.access.authenticated_voter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="security.access.authenticated_voter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.security.access.role_hierarchy_voter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="security.access.role_hierarchy_voter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.security.access.expression_voter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="security.access.expression_voter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\CanSendMessageVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\CanSendMessageVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\ChoosePaymentVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\ChoosePaymentVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\DoAdminImportVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\DoAdminImportVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\DoApplicationVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\DoApplicationVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\DoNewContractVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\DoNewContractVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\DoUseBuilderVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\DoUseBuilderVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\EditBenefitVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\EditBenefitVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\SaveSurveyVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\SaveSurveyVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\UseBenefitVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\UseBenefitVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\ViewChooseSurveyVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\ViewChooseSurveyVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\ViewDoSurveyVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\ViewDoSurveyVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\ViewOwnContractsVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\ViewOwnContractsVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\ViewProfileVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\ViewProfileVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.Main\UserBundle\Security\Voter\ViewSurveyResultVoter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="Main\UserBundle\Security\Voter\ViewSurveyResultVoter"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.app.security.voter.view_profile" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="app.security.voter.view_profile"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.app.security.voter.view_choose_survey" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="app.security.voter.view_choose_survey"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.app.security.voter.view_do_survey" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="app.security.voter.view_do_survey"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.app.security.voter.save_survey" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="app.security.voter.save_survey"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.app.security.voter.view_survey_result" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="app.security.voter.view_survey_result"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.app.security.voter.choose_payment" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="app.security.voter.choose_payment"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.app.security.voter.do_application" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="app.security.voter.do_application"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.app.security.voter.do_use_builder" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="app.security.voter.do_use_builder"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.app.security.voter.can_upload_document" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="app.security.voter.can_upload_document"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.app.security.voter.do_admin_import" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="app.security.voter.do_admin_import"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.app.security.voter.use_benefit" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="app.security.voter.use_benefit"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="debug.security.voter.app.security.voter.edit_benefit" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="app.security.voter.edit_benefit"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="security.logout.handler.csrf_token_clearing" class="Symfony\Component\Security\Http\Logout\CsrfTokenClearingLogoutHandler" public="false">
      <argument type="service" id="security.csrf.token_storage"/>
    </service>
    <service id=".service_locator.XzhyEv6" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="session" type="service" id="session" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.AoifO_3" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="initialized_session" type="service" id="session" on-invalid="ignore_uninitialized"/>
        <argument key="session" type="service" id="session" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.jD4_ZG7" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="security.authorization_checker" type="service" id="security.authorization_checker"/>
        <argument key="security.token_storage" type="service" id="security.token_storage"/>
      </argument>
    </service>
    <service id=".service_locator._pu.0Tb" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="translator" type="service" id="translator.default"/>
      </argument>
    </service>
    <service id=".service_locator._pu.0Tb.translation.warmer" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator_context" id="translation.warmer"/>
      <argument>translation.warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator._pu.0Tb" method="withContext"/>
    </service>
    <service id=".service_locator.MAfdX1A" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="routing.loader" type="service" id="routing.loader"/>
      </argument>
    </service>
    <service id=".service_locator.MAfdX1A.router.default" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator_context" id="router.default"/>
      <argument>router.default</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.MAfdX1A" method="withContext"/>
    </service>
    <service id=".service_locator.m8PwGkX" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="router" type="service" id="router.default"/>
      </argument>
    </service>
    <service id=".service_locator.m8PwGkX.router.cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator_context" id="router.cache_warmer"/>
      <argument>router.cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.m8PwGkX" method="withContext"/>
    </service>
    <service id="debug.security.access.decision_manager.inner" class="Symfony\Component\Security\Core\Authorization\AccessDecisionManager" public="false">
      <argument type="iterator">
        <argument type="service" id="debug.security.voter.security.access.authenticated_voter"/>
        <argument type="service" id="debug.security.voter.security.access.role_hierarchy_voter"/>
        <argument type="service" id="debug.security.voter.security.access.expression_voter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\CanDoUploadDocumentVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\CanSendMessageVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\ChoosePaymentVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\DoAdminImportVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\DoApplicationVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\DoNewContractVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\DoUseBuilderVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\EditBenefitVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\SaveSurveyVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\UseBenefitVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\ViewChooseSurveyVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\ViewDoSurveyVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\ViewOwnContractsVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\ViewProfileVoter"/>
        <argument type="service" id="debug.security.voter.Main\UserBundle\Security\Voter\ViewSurveyResultVoter"/>
        <argument type="service" id="debug.security.voter.app.security.voter.view_profile"/>
        <argument type="service" id="debug.security.voter.app.security.voter.view_choose_survey"/>
        <argument type="service" id="debug.security.voter.app.security.voter.view_do_survey"/>
        <argument type="service" id="debug.security.voter.app.security.voter.save_survey"/>
        <argument type="service" id="debug.security.voter.app.security.voter.view_survey_result"/>
        <argument type="service" id="debug.security.voter.app.security.voter.choose_payment"/>
        <argument type="service" id="debug.security.voter.app.security.voter.do_application"/>
        <argument type="service" id="debug.security.voter.app.security.voter.do_use_builder"/>
        <argument type="service" id="debug.security.voter.app.security.voter.can_upload_document"/>
        <argument type="service" id="debug.security.voter.app.security.voter.do_admin_import"/>
        <argument type="service" id="debug.security.voter.app.security.voter.use_benefit"/>
        <argument type="service" id="debug.security.voter.app.security.voter.edit_benefit"/>
      </argument>
      <argument>affirmative</argument>
      <argument>false</argument>
      <argument>true</argument>
    </service>
    <service id=".errored..service_locator.Wcj7vZk.Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent" class="Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent"/>
    <service id=".errored..service_locator.MncfaRS.Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage" class="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage"/>
    <service id=".errored..service_locator.CSp2n.F.Main\UserBundle\Entity\UserSecurityLog" class="Main\UserBundle\Entity\UserSecurityLog"/>
    <service id=".service_locator..a3fWhj" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="jms_serializer.doctrine_proxy_subscriber" type="service" id="jms_serializer.doctrine_proxy_subscriber"/>
      </argument>
    </service>
    <service id=".service_locator.3Es1IPB" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="jms_serializer.array_collection_handler" type="service" id="jms_serializer.array_collection_handler"/>
        <argument key="jms_serializer.constraint_violation_handler" type="service" id="jms_serializer.constraint_violation_handler"/>
        <argument key="jms_serializer.datetime_handler" type="service" id="jms_serializer.datetime_handler"/>
        <argument key="jms_serializer.form_error_handler" type="service" id="jms_serializer.form_error_handler"/>
        <argument key="jms_serializer.php_collection_handler" type="service" id="jms_serializer.php_collection_handler"/>
      </argument>
    </service>
    <service id=".service_locator.HKoUR8q" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator" type="service" id="doctrine.orm.validator.unique"/>
        <argument key="Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator" type="service" id="security.validator.user_password"/>
        <argument key="Symfony\Component\Validator\Constraints\EmailValidator" type="service" id="validator.email"/>
        <argument key="Symfony\Component\Validator\Constraints\ExpressionValidator" type="service" id="validator.expression"/>
        <argument key="doctrine.orm.validator.unique" type="service" id="doctrine.orm.validator.unique"/>
        <argument key="security.validator.user_password" type="service" id="security.validator.user_password"/>
        <argument key="validator.expression" type="service" id="validator.expression"/>
      </argument>
    </service>
    <service id="console.command_loader" class="Symfony\Component\Console\CommandLoader\ContainerCommandLoader" public="true">
      <argument type="service" id=".service_locator.8Jqf5Lz"/>
      <argument type="collection">
        <argument key="doctrine:database:create">doctrine.database_create_command</argument>
        <argument key="doctrine:database:drop">doctrine.database_drop_command</argument>
        <argument key="doctrine:generate:entities">doctrine.generate_entities_command</argument>
        <argument key="doctrine:query:sql">doctrine.query_sql_command</argument>
        <argument key="doctrine:cache:clear-metadata">doctrine.cache_clear_metadata_command</argument>
        <argument key="doctrine:cache:clear-query">doctrine.cache_clear_query_cache_command</argument>
        <argument key="doctrine:cache:clear-result">doctrine.cache_clear_result_command</argument>
        <argument key="doctrine:cache:clear-collection-region">doctrine.cache_collection_region_command</argument>
        <argument key="doctrine:mapping:convert">doctrine.mapping_convert_command</argument>
        <argument key="doctrine:schema:create">doctrine.schema_create_command</argument>
        <argument key="doctrine:schema:drop">doctrine.schema_drop_command</argument>
        <argument key="doctrine:ensure-production-settings">doctrine.ensure_production_settings_command</argument>
        <argument key="doctrine:cache:clear-entity-region">doctrine.clear_entity_region_command</argument>
        <argument key="doctrine:database:import">doctrine.database_import_command</argument>
        <argument key="doctrine:mapping:info">doctrine.mapping_info_command</argument>
        <argument key="doctrine:cache:clear-query-region">doctrine.clear_query_region_command</argument>
        <argument key="doctrine:query:dql">doctrine.query_dql_command</argument>
        <argument key="doctrine:schema:update">doctrine.schema_update_command</argument>
        <argument key="doctrine:schema:validate">doctrine.schema_validate_command</argument>
        <argument key="doctrine:mapping:import">doctrine.mapping_import_command</argument>
        <argument key="debug:swiftmailer">swiftmailer.command.debug</argument>
        <argument key="swiftmailer:email:send">swiftmailer.command.new_email</argument>
        <argument key="swiftmailer:spool:send">swiftmailer.command.send_email</argument>
        <argument key="about">console.command.about</argument>
        <argument key="assets:install">console.command.assets_install</argument>
        <argument key="cache:clear">console.command.cache_clear</argument>
        <argument key="cache:pool:clear">console.command.cache_pool_clear</argument>
        <argument key="cache:pool:prune">console.command.cache_pool_prune</argument>
        <argument key="cache:pool:delete">console.command.cache_pool_delete</argument>
        <argument key="cache:warmup">console.command.cache_warmup</argument>
        <argument key="debug:config">console.command.config_debug</argument>
        <argument key="config:dump-reference">console.command.config_dump_reference</argument>
        <argument key="debug:container">console.command.container_debug</argument>
        <argument key="debug:autowiring">console.command.debug_autowiring</argument>
        <argument key="debug:event-dispatcher">console.command.event_dispatcher_debug</argument>
        <argument key="debug:router">console.command.router_debug</argument>
        <argument key="router:match">console.command.router_match</argument>
        <argument key="debug:translation">console.command.translation_debug</argument>
        <argument key="translation:update">console.command.translation_update</argument>
        <argument key="lint:xliff">console.command.xliff_lint</argument>
        <argument key="lint:yaml">console.command.yaml_lint</argument>
        <argument key="debug:form">console.command.form_debug</argument>
        <argument key="debug:twig">twig.command.debug</argument>
        <argument key="lint:twig">twig.command.lint</argument>
        <argument key="security:encode-password">security.command.user_password_encoder</argument>
      </argument>
    </service>
    <service id=".service_locator.8Jqf5Lz" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="console.command.about" type="service" id="console.command.about"/>
        <argument key="console.command.assets_install" type="service" id="console.command.assets_install"/>
        <argument key="console.command.cache_clear" type="service" id="console.command.cache_clear"/>
        <argument key="console.command.cache_pool_clear" type="service" id="console.command.cache_pool_clear"/>
        <argument key="console.command.cache_pool_delete" type="service" id="console.command.cache_pool_delete"/>
        <argument key="console.command.cache_pool_prune" type="service" id="console.command.cache_pool_prune"/>
        <argument key="console.command.cache_warmup" type="service" id="console.command.cache_warmup"/>
        <argument key="console.command.config_debug" type="service" id="console.command.config_debug"/>
        <argument key="console.command.config_dump_reference" type="service" id="console.command.config_dump_reference"/>
        <argument key="console.command.container_debug" type="service" id="console.command.container_debug"/>
        <argument key="console.command.debug_autowiring" type="service" id="console.command.debug_autowiring"/>
        <argument key="console.command.event_dispatcher_debug" type="service" id="console.command.event_dispatcher_debug"/>
        <argument key="console.command.form_debug" type="service" id="console.command.form_debug"/>
        <argument key="console.command.router_debug" type="service" id="console.command.router_debug"/>
        <argument key="console.command.router_match" type="service" id="console.command.router_match"/>
        <argument key="console.command.translation_debug" type="service" id="console.command.translation_debug"/>
        <argument key="console.command.translation_update" type="service" id="console.command.translation_update"/>
        <argument key="console.command.xliff_lint" type="service" id="console.command.xliff_lint"/>
        <argument key="console.command.yaml_lint" type="service" id="console.command.yaml_lint"/>
        <argument key="doctrine.cache_clear_metadata_command" type="service" id="doctrine.cache_clear_metadata_command"/>
        <argument key="doctrine.cache_clear_query_cache_command" type="service" id="doctrine.cache_clear_query_cache_command"/>
        <argument key="doctrine.cache_clear_result_command" type="service" id="doctrine.cache_clear_result_command"/>
        <argument key="doctrine.cache_collection_region_command" type="service" id="doctrine.cache_collection_region_command"/>
        <argument key="doctrine.clear_entity_region_command" type="service" id="doctrine.clear_entity_region_command"/>
        <argument key="doctrine.clear_query_region_command" type="service" id="doctrine.clear_query_region_command"/>
        <argument key="doctrine.database_create_command" type="service" id="doctrine.database_create_command"/>
        <argument key="doctrine.database_drop_command" type="service" id="doctrine.database_drop_command"/>
        <argument key="doctrine.database_import_command" type="service" id="doctrine.database_import_command"/>
        <argument key="doctrine.ensure_production_settings_command" type="service" id="doctrine.ensure_production_settings_command"/>
        <argument key="doctrine.generate_entities_command" type="service" id="doctrine.generate_entities_command"/>
        <argument key="doctrine.mapping_convert_command" type="service" id="doctrine.mapping_convert_command"/>
        <argument key="doctrine.mapping_import_command" type="service" id="doctrine.mapping_import_command"/>
        <argument key="doctrine.mapping_info_command" type="service" id="doctrine.mapping_info_command"/>
        <argument key="doctrine.query_dql_command" type="service" id="doctrine.query_dql_command"/>
        <argument key="doctrine.query_sql_command" type="service" id="doctrine.query_sql_command"/>
        <argument key="doctrine.schema_create_command" type="service" id="doctrine.schema_create_command"/>
        <argument key="doctrine.schema_drop_command" type="service" id="doctrine.schema_drop_command"/>
        <argument key="doctrine.schema_update_command" type="service" id="doctrine.schema_update_command"/>
        <argument key="doctrine.schema_validate_command" type="service" id="doctrine.schema_validate_command"/>
        <argument key="security.command.user_password_encoder" type="service" id="security.command.user_password_encoder"/>
        <argument key="swiftmailer.command.debug" type="service" id="swiftmailer.command.debug"/>
        <argument key="swiftmailer.command.new_email" type="service" id="swiftmailer.command.new_email"/>
        <argument key="swiftmailer.command.send_email" type="service" id="swiftmailer.command.send_email"/>
        <argument key="twig.command.debug" type="service" id="twig.command.debug"/>
        <argument key="twig.command.lint" type="service" id="twig.command.lint"/>
      </argument>
    </service>
    <service id=".service_locator.CS9cV_I" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="JMS\Serializer\Twig\SerializerRuntimeHelper" type="service" id="jms_serializer.twig_extension.serializer_runtime_helper"/>
        <argument key="Symfony\Bridge\Twig\Extension\CsrfRuntime" type="service" id="twig.runtime.security_csrf"/>
        <argument key="Symfony\Bridge\Twig\Extension\HttpKernelRuntime" type="service" id="twig.runtime.httpkernel"/>
        <argument key="Symfony\Component\Form\FormRenderer" type="service" id="twig.form.renderer"/>
      </argument>
    </service>
    <service id="Psr\Container\ContainerInterface" alias="service_container" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ContainerInterface" alias="service_container" public="false"/>
    <service id="Doctrine\DBAL\Driver\Connection" alias="doctrine.dbal.default_connection" public="false"/>
    <service id="Doctrine\DBAL\Connection" alias="doctrine.dbal.default_connection" public="false"/>
    <service id="Doctrine\Common\Persistence\ManagerRegistry" alias="doctrine" public="false"/>
    <service id="Symfony\Bridge\Doctrine\RegistryInterface" alias="doctrine" public="false"/>
    <service id="database_connection" alias="doctrine.dbal.default_connection" public="true"/>
    <service id="doctrine.dbal.event_manager" alias="doctrine.dbal.default_connection.event_manager" public="false"/>
    <service id="Doctrine\Common\Persistence\ObjectManager" alias="doctrine.orm.default_entity_manager" public="false"/>
    <service id="Doctrine\ORM\EntityManagerInterface" alias="doctrine.orm.default_entity_manager" public="false"/>
    <service id="doctrine.orm.metadata.annotation_reader" alias="annotations.cached_reader" public="false"/>
    <service id="doctrine.orm.entity_manager" alias="doctrine.orm.default_entity_manager" public="true"/>
    <service id="doctrine.orm.default_metadata_cache" alias="doctrine_cache.providers.doctrine.orm.default_metadata_cache" public="true"/>
    <service id="doctrine.orm.default_result_cache" alias="doctrine_cache.providers.doctrine.orm.default_result_cache" public="true"/>
    <service id="doctrine.orm.default_query_cache" alias="doctrine_cache.providers.doctrine.orm.default_query_cache" public="true"/>
    <service id="doctrine.orm.default_entity_manager.event_manager" alias="doctrine.dbal.default_connection.event_manager" public="false"/>
    <service id="jms_serializer.metadata_driver" alias="jms_serializer.metadata.doctrine_type_driver" public="true"/>
    <service id="jms_serializer.metadata.cache" alias="jms_serializer.metadata.cache.file_cache" public="false"/>
    <service id="jms_serializer.naming_strategy" alias="jms_serializer.cache_naming_strategy"/>
    <service id="jms_serializer.object_constructor" alias="jms_serializer.doctrine_object_constructor" public="true"/>
    <service id="jms_serializer.deserialization_context_factory" alias="jms_serializer.configured_deserialization_context_factory" public="true"/>
    <service id="jms_serializer.serialization_context_factory" alias="jms_serializer.configured_serialization_context_factory" public="true"/>
    <service id="jms_serializer" alias="jms_serializer.serializer" public="true"/>
    <service id="JMS\Serializer\SerializerInterface" alias="jms_serializer.serializer" public="false"/>
    <service id="JMS\Serializer\ArrayTransformerInterface" alias="jms_serializer.serializer" public="false"/>
    <service id="jms_serializer.accessor_strategy" alias="jms_serializer.accessor_strategy.expression"/>
    <service id="Knp\Snappy\Pdf" alias="knp_snappy.pdf"/>
    <service id="Knp\Snappy\Image" alias="knp_snappy.image"/>
    <service id="sensio_framework_extra.converter.doctrine.orm.expression_language" alias="sensio_framework_extra.converter.doctrine.orm.expression_language.default" public="false"/>
    <service id="sensio_framework_extra.security.expression_language" alias="sensio_framework_extra.security.expression_language.default" public="false"/>
    <service id="logger" alias="monolog.logger"/>
    <service id="Psr\Log\LoggerInterface" alias="monolog.logger" public="false"/>
    <service id="swiftmailer.mailer.default.transport" alias="swiftmailer.mailer.default.transport.spool"/>
    <service id="swiftmailer.mailer.default.spool" alias="swiftmailer.mailer.default.spool.memory"/>
    <service id="swiftmailer.mailer.default.transport.real" alias="swiftmailer.mailer.default.transport.dynamic" public="true"/>
    <service id="swiftmailer.spool" alias="swiftmailer.mailer.default.spool.memory"/>
    <service id="swiftmailer.transport.real" alias="swiftmailer.mailer.default.transport.dynamic"/>
    <service id="Swift_Spool" alias="swiftmailer.mailer.default.spool.memory" public="false"/>
    <service id="swiftmailer.plugin.messagelogger" alias="swiftmailer.mailer.default.plugin.messagelogger"/>
    <service id="swiftmailer.mailer" alias="swiftmailer.mailer.default"/>
    <service id="swiftmailer.transport" alias="swiftmailer.mailer.default.transport.spool" public="true"/>
    <service id="Swift_Mailer" alias="swiftmailer.mailer.default" public="false"/>
    <service id="Swift_Transport" alias="swiftmailer.mailer.default.transport.spool" public="false"/>
    <service id="mailer" alias="swiftmailer.mailer.default" public="true"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface" alias="parameter_bag" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface" alias="parameter_bag" public="false"/>
    <service id="Symfony\Component\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher" public="false"/>
    <service id="Symfony\Component\HttpKernel\HttpKernelInterface" alias="http_kernel" public="false"/>
    <service id="Symfony\Component\HttpFoundation\RequestStack" alias="request_stack" public="false"/>
    <service id="Symfony\Component\HttpKernel\KernelInterface" alias="kernel" public="false"/>
    <service id="Symfony\Component\Filesystem\Filesystem" alias="filesystem" public="false"/>
    <service id="Symfony\Component\HttpKernel\Config\FileLocator" alias="file_locator" public="false"/>
    <service id="Psr\Container\ContainerInterface $parameterBag" alias="parameter_bag"/>
    <service id="cache.app_clearer" alias="cache.default_clearer" public="true"/>
    <service id="Psr\Cache\CacheItemPoolInterface" alias="cache.app" public="false"/>
    <service id="Psr\SimpleCache\CacheInterface" alias="cache.app.simple" public="false"/>
    <service id="Symfony\Component\Cache\Adapter\AdapterInterface" alias="cache.app" public="false"/>
    <service id="Symfony\Contracts\Cache\CacheInterface" alias="cache.app" public="false"/>
    <service id="Symfony\Contracts\Cache\TagAwareCacheInterface" alias="cache.app.taggable" public="false"/>
    <service id="Symfony\Component\Translation\TranslatorInterface" alias="translator.default" public="false"/>
    <service id="Symfony\Contracts\Translation\TranslatorInterface" alias="translator.default" public="false"/>
    <service id="Symfony\Component\HttpFoundation\Session\SessionInterface" alias="session" public="false"/>
    <service id="Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface" alias="session.storage.mock_file" public="false"/>
    <service id="SessionHandlerInterface" alias="session.handler" public="false"/>
    <service id="Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface" alias="session.flash_bag" public="false"/>
    <service id="session.storage.filesystem" alias="session.storage.mock_file" public="false"/>
    <service id="session.storage" alias="session.storage.mock_file"/>
    <service id="Symfony\Component\Security\Csrf\TokenGenerator\TokenGeneratorInterface" alias="security.csrf.token_generator" public="false"/>
    <service id="Symfony\Component\Security\Csrf\TokenStorage\TokenStorageInterface" alias="security.csrf.token_storage" public="false"/>
    <service id="Symfony\Component\Security\Csrf\CsrfTokenManagerInterface" alias="security.csrf.token_manager" public="false"/>
    <service id="Symfony\Component\Form\ResolvedFormTypeFactoryInterface" alias="form.resolved_type_factory" public="false"/>
    <service id="Symfony\Component\Form\FormRegistryInterface" alias="form.registry" public="false"/>
    <service id="Symfony\Component\Form\FormFactoryInterface" alias="form.factory" public="false"/>
    <service id="form.property_accessor" alias="property_accessor" public="false"/>
    <service id="form.choice_list_factory" alias="form.choice_list_factory.cached" public="false"/>
    <service id="Symfony\Component\Asset\Packages" alias="assets.packages" public="false"/>
    <service id="Symfony\Component\Validator\Validator\ValidatorInterface" alias="validator" public="false"/>
    <service id="validator.mapping.class_metadata_factory" alias="validator" public="false"/>
    <service id="Symfony\Component\Translation\Reader\TranslationReaderInterface" alias="translation.reader" public="false"/>
    <service id="Symfony\Component\Translation\Extractor\ExtractorInterface" alias="translation.extractor" public="false"/>
    <service id="Symfony\Component\Translation\Writer\TranslationWriterInterface" alias="translation.writer" public="false"/>
    <service id="translator" alias="translator.default" public="true"/>
    <service id="translator.formatter" alias="translator.formatter.default" public="false"/>
    <service id="cache.default_redis_provider" alias=".cache_connection.GD_MSZC" public="false"/>
    <service id="cache.default_memcached_provider" alias=".cache_connection.JKE6keX" public="false"/>
    <service id="cache.default_pdo_provider" alias="doctrine.dbal.default_connection" public="false"/>
    <service id="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" alias="debug.file_link_formatter" public="false"/>
    <service id="router" alias="router.default" public="true"/>
    <service id="Symfony\Component\Routing\RouterInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\Generator\UrlGeneratorInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\Matcher\UrlMatcherInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\RequestContextAwareInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\RequestContext" alias="router.request_context" public="false"/>
    <service id="annotation_reader" alias="annotations.cached_reader"/>
    <service id="Doctrine\Common\Annotations\Reader" alias="annotations.cached_reader" public="false"/>
    <service id="Symfony\Component\PropertyAccess\PropertyAccessorInterface" alias="property_accessor" public="false"/>
    <service id="Twig_Environment" alias="twig" public="false"/>
    <service id="Twig\Environment" alias="twig" public="false"/>
    <service id="Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface" alias="security.authorization_checker" public="false"/>
    <service id="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface" alias="security.token_storage" public="false"/>
    <service id="Symfony\Component\Security\Core\Security" alias="security.helper" public="false"/>
    <service id="Symfony\Component\Security\Core\Authentication\AuthenticationManagerInterface" alias="security.authentication.manager" public="false"/>
    <service id="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategyInterface" alias="security.authentication.session_strategy" public="false"/>
    <service id="security.encoder_factory" alias="security.encoder_factory.generic" public="false"/>
    <service id="Symfony\Component\Security\Core\Encoder\EncoderFactoryInterface" alias="security.encoder_factory.generic" public="false"/>
    <service id="security.password_encoder" alias="security.user_password_encoder.generic" public="true"/>
    <service id="Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface" alias="security.user_password_encoder.generic" public="false"/>
    <service id="Symfony\Component\Security\Http\Authentication\AuthenticationUtils" alias="security.authentication_utils" public="false"/>
    <service id="Symfony\Component\Security\Core\Authorization\AccessDecisionManagerInterface" alias="debug.security.access.decision_manager" public="false"/>
    <service id="Symfony\Component\Security\Core\Role\RoleHierarchyInterface" alias="security.role_hierarchy" public="false"/>
    <service id="Symfony\Component\Security\Http\Firewall" alias="debug.security.firewall" public="false"/>
    <service id="Symfony\Component\Security\Http\HttpUtils" alias="security.http_utils" public="false"/>
    <service id="Symfony\Component\Security\Guard\GuardAuthenticatorHandler" alias="security.authentication.guard_handler" public="false"/>
    <service id="security.firewall" alias="debug.security.firewall" public="false"/>
    <service id="Symfony\Component\Security\Core\User\UserProviderInterface" alias="security.user.provider.concrete.our_users"/>
    <service id="security.authentication.session_strategy.main" alias="security.authentication.session_strategy"/>
    <service id="security.user_checker.main" alias="security.user_checker" public="false"/>
    <service id="Symfony\Component\Security\Core\User\UserCheckerInterface" alias="security.user_checker" public="false"/>
    <service id="markdown.parser" alias="markdown.parser.max" public="true"/>
    <service id="Knp\Bundle\MarkdownBundle\MarkdownParserInterface" alias="markdown.parser.max"/>
    <service id="Michelf\MarkdownInterface" alias="markdown.parser.max"/>
    <service id="argument_resolver.controller_locator" alias=".service_locator.MzWCiiK"/>
    <service id="twig.loader.filesystem" alias="twig.loader.native_filesystem" public="false"/>
    <service id="twig.loader" alias="twig.loader.native_filesystem"/>
    <service id=".service_locator.4zihvow" alias=".1_ServiceLocator~xve27Pd" public="false"/>
    <service id="security.access.decision_manager" alias="debug.security.access.decision_manager" public="false"/>
    <service id="console.command.public_alias.doctrine_cache.contains_command" alias="doctrine_cache.contains_command" public="true"/>
    <service id="console.command.public_alias.doctrine_cache.delete_command" alias="doctrine_cache.delete_command" public="true"/>
    <service id="console.command.public_alias.doctrine_cache.flush_command" alias="doctrine_cache.flush_command" public="true"/>
    <service id="console.command.public_alias.doctrine_cache.stats_command" alias="doctrine_cache.stats_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.diff_command" alias="doctrine_migrations.diff_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.execute_command" alias="doctrine_migrations.execute_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.generate_command" alias="doctrine_migrations.generate_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.latest_command" alias="doctrine_migrations.latest_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.migrate_command" alias="doctrine_migrations.migrate_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.status_command" alias="doctrine_migrations.status_command" public="true"/>
    <service id="console.command.public_alias.doctrine_migrations.version_command" alias="doctrine_migrations.version_command" public="true"/>
  </services>
</container>
